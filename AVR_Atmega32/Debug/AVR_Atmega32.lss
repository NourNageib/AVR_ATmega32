
AVR_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c56  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a4e  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000695  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008c6  00000000  00000000  00002a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cb 01 	call	0x396	; 0x396 <main>
  7a:	0c 94 14 02 	jmp	0x428	; 0x428 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MDIO_SetPinDirection>:
MDIO_enumError_t MDIO_SetPinDirection  (MDIO_enumPorts_t Copy_uinit8PortNum ,MDIO_enumPins_t Copy_uinit8PinNum,MDIO_enumConfig_t Copy_uinitPortConfig)
{
	
	MDIO_enumError_t State;
	/*check on port and pin num didnot exceed the max*/
	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
  82:	85 30       	cpi	r24, 0x05	; 5
  84:	18 f0       	brcs	.+6      	; 0x8c <MDIO_SetPinDirection+0xa>
  86:	69 30       	cpi	r22, 0x09	; 9
  88:	08 f0       	brcs	.+2      	; 0x8c <MDIO_SetPinDirection+0xa>
  8a:	7b c0       	rjmp	.+246    	; 0x182 <MDIO_SetPinDirection+0x100>
		State =MDIO_enumWrongConfig;
		
	}
	else
	{
		if((Copy_uinitPortConfig==MDIO_enumOutput_HIGH) ||(Copy_uinitPortConfig==MDIO_enumOutput_LOW))
  8c:	9e ef       	ldi	r25, 0xFE	; 254
  8e:	94 0f       	add	r25, r20
  90:	92 30       	cpi	r25, 0x02	; 2
  92:	c0 f5       	brcc	.+112    	; 0x104 <MDIO_SetPinDirection+0x82>
		{
			switch (Copy_uinit8PortNum)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	91 f0       	breq	.+36     	; 0xbc <MDIO_SetPinDirection+0x3a>
  98:	28 f0       	brcs	.+10     	; 0xa4 <MDIO_SetPinDirection+0x22>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	d9 f0       	breq	.+54     	; 0xd4 <MDIO_SetPinDirection+0x52>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	29 f1       	breq	.+74     	; 0xec <MDIO_SetPinDirection+0x6a>
  a2:	71 c0       	rjmp	.+226    	; 0x186 <MDIO_SetPinDirection+0x104>
			{
				case MDIO_enumPortA : SET_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <MDIO_SetPinDirection+0x2e>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <MDIO_SetPinDirection+0x2a>
  b4:	82 2b       	or	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	{
		if((Copy_uinitPortConfig==MDIO_enumOutput_HIGH) ||(Copy_uinitPortConfig==MDIO_enumOutput_LOW))
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
  ba:	08 95       	ret
				case MDIO_enumPortB : SET_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
  bc:	27 b3       	in	r18, 0x17	; 23
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <MDIO_SetPinDirection+0x46>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <MDIO_SetPinDirection+0x42>
  cc:	82 2b       	or	r24, r18
  ce:	87 bb       	out	0x17, r24	; 23
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
  d0:	80 e0       	ldi	r24, 0x00	; 0
		if((Copy_uinitPortConfig==MDIO_enumOutput_HIGH) ||(Copy_uinitPortConfig==MDIO_enumOutput_LOW))
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
  d2:	08 95       	ret
				case MDIO_enumPortC : SET_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
  d4:	21 b3       	in	r18, 0x11	; 17
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <MDIO_SetPinDirection+0x5e>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <MDIO_SetPinDirection+0x5a>
  e4:	82 2b       	or	r24, r18
  e6:	81 bb       	out	0x11, r24	; 17
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
  e8:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : SET_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
  ea:	08 95       	ret
				case MDIO_enumPortD : SET_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
  ec:	24 b3       	in	r18, 0x14	; 20
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <MDIO_SetPinDirection+0x76>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <MDIO_SetPinDirection+0x72>
  fc:	82 2b       	or	r24, r18
  fe:	84 bb       	out	0x14, r24	; 20
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 100:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : SET_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
				case MDIO_enumPortD : SET_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
 102:	08 95       	ret
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
		}
		else if((Copy_uinitPortConfig==MDIO_enumInputInternalPU) ||(Copy_uinitPortConfig==MDIO_enumInputExternalPD))
 104:	42 30       	cpi	r20, 0x02	; 2
 106:	08 f0       	brcs	.+2      	; 0x10a <MDIO_SetPinDirection+0x88>
 108:	40 c0       	rjmp	.+128    	; 0x18a <MDIO_SetPinDirection+0x108>
		{
			switch (Copy_uinit8PortNum)
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	99 f0       	breq	.+38     	; 0x134 <MDIO_SetPinDirection+0xb2>
 10e:	28 f0       	brcs	.+10     	; 0x11a <MDIO_SetPinDirection+0x98>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	e9 f0       	breq	.+58     	; 0x14e <MDIO_SetPinDirection+0xcc>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	41 f1       	breq	.+80     	; 0x168 <MDIO_SetPinDirection+0xe6>
 118:	3a c0       	rjmp	.+116    	; 0x18e <MDIO_SetPinDirection+0x10c>
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
 11a:	2a b3       	in	r18, 0x1a	; 26
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <MDIO_SetPinDirection+0xa4>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <MDIO_SetPinDirection+0xa0>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 130:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if((Copy_uinitPortConfig==MDIO_enumInputInternalPU) ||(Copy_uinitPortConfig==MDIO_enumInputExternalPD))
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
 132:	08 95       	ret
				case MDIO_enumPortB : CLR_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <MDIO_SetPinDirection+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <MDIO_SetPinDirection+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	87 bb       	out	0x17, r24	; 23
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 14a:	80 e0       	ldi	r24, 0x00	; 0
		else if((Copy_uinitPortConfig==MDIO_enumInputInternalPU) ||(Copy_uinitPortConfig==MDIO_enumInputExternalPD))
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
 14c:	08 95       	ret
				case MDIO_enumPortC : CLR_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <MDIO_SetPinDirection+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <MDIO_SetPinDirection+0xd4>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 164:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : CLR_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
 166:	08 95       	ret
				case MDIO_enumPortD : CLR_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <MDIO_SetPinDirection+0xf2>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <MDIO_SetPinDirection+0xee>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 17e:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : CLR_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
				case MDIO_enumPortD : CLR_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
 180:	08 95       	ret
	
	MDIO_enumError_t State;
	/*check on port and pin num didnot exceed the max*/
	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
	{
		State =MDIO_enumWrongConfig;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	08 95       	ret
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	08 95       	ret
			State=MDIO_enumOk;
		}
		else
		{

			State =MDIO_enumWrongConfig;
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	08 95       	ret
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 18e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return State;
	
}
 190:	08 95       	ret

00000192 <MDIO_SetPinValue>:
MDIO_enumError_t MDIO_SetPinValue      (MDIO_enumPorts_t Copy_uinit8PortNum ,MDIO_enumPins_t Copy_uinit8PinNum,MDIO_enumConfig_t Copy_uinit8LogicState)
{
	MDIO_enumError_t State;
	/*check on port and pin num didnot exceed the max*/
	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
 192:	85 30       	cpi	r24, 0x05	; 5
 194:	18 f0       	brcs	.+6      	; 0x19c <MDIO_SetPinValue+0xa>
 196:	69 30       	cpi	r22, 0x09	; 9
 198:	08 f0       	brcs	.+2      	; 0x19c <MDIO_SetPinValue+0xa>
 19a:	f1 c0       	rjmp	.+482    	; 0x37e <MDIO_SetPinValue+0x1ec>
		State =MDIO_enumWrongConfig;
		
	}
	else
	{
		if(Copy_uinit8LogicState==MDIO_enumOutput_HIGH)
 19c:	42 30       	cpi	r20, 0x02	; 2
 19e:	c1 f5       	brne	.+112    	; 0x210 <MDIO_SetPinValue+0x7e>
		{
			switch (Copy_uinit8PortNum)
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	91 f0       	breq	.+36     	; 0x1c8 <MDIO_SetPinValue+0x36>
 1a4:	28 f0       	brcs	.+10     	; 0x1b0 <MDIO_SetPinValue+0x1e>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	d9 f0       	breq	.+54     	; 0x1e0 <MDIO_SetPinValue+0x4e>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	29 f1       	breq	.+74     	; 0x1f8 <MDIO_SetPinValue+0x66>
 1ae:	e9 c0       	rjmp	.+466    	; 0x382 <MDIO_SetPinValue+0x1f0>
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 1b0:	2b b3       	in	r18, 0x1b	; 27
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <MDIO_SetPinValue+0x2a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <MDIO_SetPinValue+0x26>
 1c0:	82 2b       	or	r24, r18
 1c2:	8b bb       	out	0x1b, r24	; 27
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(Copy_uinit8LogicState==MDIO_enumOutput_HIGH)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 1c6:	08 95       	ret
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <MDIO_SetPinValue+0x42>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <MDIO_SetPinValue+0x3e>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
		if(Copy_uinit8LogicState==MDIO_enumOutput_HIGH)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 1de:	08 95       	ret
				case MDIO_enumPortC : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 1e0:	22 b3       	in	r18, 0x12	; 18
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <MDIO_SetPinValue+0x5a>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <MDIO_SetPinValue+0x56>
 1f0:	82 2b       	or	r24, r18
 1f2:	82 bb       	out	0x12, r24	; 18
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 1f6:	08 95       	ret
				case MDIO_enumPortD : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <MDIO_SetPinValue+0x72>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <MDIO_SetPinValue+0x6e>
 208:	82 2b       	or	r24, r18
 20a:	85 bb       	out	0x15, r24	; 21
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 20c:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
				case MDIO_enumPortD : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 20e:	08 95       	ret
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
		}
		else if(Copy_uinit8LogicState==MDIO_enumOutput_LOW)
 210:	43 30       	cpi	r20, 0x03	; 3
 212:	e1 f5       	brne	.+120    	; 0x28c <MDIO_SetPinValue+0xfa>
		{
			switch (Copy_uinit8PortNum)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	01 f1       	breq	.+64     	; 0x258 <MDIO_SetPinValue+0xc6>
 218:	28 f0       	brcs	.+10     	; 0x224 <MDIO_SetPinValue+0x92>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	81 f0       	breq	.+32     	; 0x23e <MDIO_SetPinValue+0xac>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	41 f1       	breq	.+80     	; 0x272 <MDIO_SetPinValue+0xe0>
 222:	b1 c0       	rjmp	.+354    	; 0x386 <MDIO_SetPinValue+0x1f4>
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 224:	2b b3       	in	r18, 0x1b	; 27
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <MDIO_SetPinValue+0x9e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <MDIO_SetPinValue+0x9a>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	8b bb       	out	0x1b, r24	; 27
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 23a:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_uinit8LogicState==MDIO_enumOutput_LOW)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 23c:	08 95       	ret
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <MDIO_SetPinValue+0xb8>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <MDIO_SetPinValue+0xb4>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 254:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_uinit8LogicState==MDIO_enumOutput_LOW)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 256:	08 95       	ret
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 258:	25 b3       	in	r18, 0x15	; 21
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <MDIO_SetPinValue+0xd2>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <MDIO_SetPinValue+0xce>
 268:	80 95       	com	r24
 26a:	82 23       	and	r24, r18
 26c:	85 bb       	out	0x15, r24	; 21
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 26e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 270:	08 95       	ret
				case MDIO_enumPortD : CLR_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 272:	22 b3       	in	r18, 0x12	; 18
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <MDIO_SetPinValue+0xec>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <MDIO_SetPinValue+0xe8>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	82 bb       	out	0x12, r24	; 18
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 288:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
				case MDIO_enumPortD : CLR_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 28a:	08 95       	ret
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
		}
		else if(Copy_uinit8LogicState==MDIO_enumInputInternalPU)
 28c:	41 11       	cpse	r20, r1
 28e:	38 c0       	rjmp	.+112    	; 0x300 <MDIO_SetPinValue+0x16e>
		{
			switch (Copy_uinit8PortNum)
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	91 f0       	breq	.+36     	; 0x2b8 <MDIO_SetPinValue+0x126>
 294:	28 f0       	brcs	.+10     	; 0x2a0 <MDIO_SetPinValue+0x10e>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	d9 f0       	breq	.+54     	; 0x2d0 <MDIO_SetPinValue+0x13e>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	29 f1       	breq	.+74     	; 0x2e8 <MDIO_SetPinValue+0x156>
 29e:	75 c0       	rjmp	.+234    	; 0x38a <MDIO_SetPinValue+0x1f8>
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 2a0:	2b b3       	in	r18, 0x1b	; 27
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <MDIO_SetPinValue+0x11a>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <MDIO_SetPinValue+0x116>
 2b0:	82 2b       	or	r24, r18
 2b2:	8b bb       	out	0x1b, r24	; 27
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_uinit8LogicState==MDIO_enumInputInternalPU)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 2b6:	08 95       	ret
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 2b8:	28 b3       	in	r18, 0x18	; 24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <MDIO_SetPinValue+0x132>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <MDIO_SetPinValue+0x12e>
 2c8:	82 2b       	or	r24, r18
 2ca:	88 bb       	out	0x18, r24	; 24
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_uinit8LogicState==MDIO_enumInputInternalPU)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 2ce:	08 95       	ret
				case MDIO_enumPortC : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 2d0:	25 b3       	in	r18, 0x15	; 21
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <MDIO_SetPinValue+0x14a>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <MDIO_SetPinValue+0x146>
 2e0:	82 2b       	or	r24, r18
 2e2:	85 bb       	out	0x15, r24	; 21
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 2e6:	08 95       	ret
				case MDIO_enumPortD : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 2e8:	22 b3       	in	r18, 0x12	; 18
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <MDIO_SetPinValue+0x162>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <MDIO_SetPinValue+0x15e>
 2f8:	82 2b       	or	r24, r18
 2fa:	82 bb       	out	0x12, r24	; 18
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
				case MDIO_enumPortD : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 2fe:	08 95       	ret
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
		}
		else if(Copy_uinit8LogicState==MDIO_enumInputExternalPD)
 300:	41 30       	cpi	r20, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <MDIO_SetPinValue+0x174>
 304:	44 c0       	rjmp	.+136    	; 0x38e <MDIO_SetPinValue+0x1fc>
		{
			switch (Copy_uinit8PortNum)
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	99 f0       	breq	.+38     	; 0x330 <MDIO_SetPinValue+0x19e>
 30a:	28 f0       	brcs	.+10     	; 0x316 <MDIO_SetPinValue+0x184>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	e9 f0       	breq	.+58     	; 0x34a <MDIO_SetPinValue+0x1b8>
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	41 f1       	breq	.+80     	; 0x364 <MDIO_SetPinValue+0x1d2>
 314:	3e c0       	rjmp	.+124    	; 0x392 <MDIO_SetPinValue+0x200>
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 316:	2b b3       	in	r18, 0x1b	; 27
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <MDIO_SetPinValue+0x190>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <MDIO_SetPinValue+0x18c>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	8b bb       	out	0x1b, r24	; 27
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 32c:	80 e0       	ldi	r24, 0x00	; 0
		}
		else if(Copy_uinit8LogicState==MDIO_enumInputExternalPD)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
 32e:	08 95       	ret
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 330:	28 b3       	in	r18, 0x18	; 24
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 c0       	rjmp	.+4      	; 0x33c <MDIO_SetPinValue+0x1aa>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	6a 95       	dec	r22
 33e:	e2 f7       	brpl	.-8      	; 0x338 <MDIO_SetPinValue+0x1a6>
 340:	80 95       	com	r24
 342:	82 23       	and	r24, r18
 344:	88 bb       	out	0x18, r24	; 24
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 346:	80 e0       	ldi	r24, 0x00	; 0
		else if(Copy_uinit8LogicState==MDIO_enumInputExternalPD)
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
 348:	08 95       	ret
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 34a:	25 b3       	in	r18, 0x15	; 21
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <MDIO_SetPinValue+0x1c4>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <MDIO_SetPinValue+0x1c0>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	85 bb       	out	0x15, r24	; 21
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 360:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
 362:	08 95       	ret
				case MDIO_enumPortD : CLR_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 364:	22 b3       	in	r18, 0x12	; 18
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <MDIO_SetPinValue+0x1de>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <MDIO_SetPinValue+0x1da>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	82 bb       	out	0x12, r24	; 18
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 37a:	80 e0       	ldi	r24, 0x00	; 0
			switch (Copy_uinit8PortNum)
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
				case MDIO_enumPortD : CLR_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
 37c:	08 95       	ret
{
	MDIO_enumError_t State;
	/*check on port and pin num didnot exceed the max*/
	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
	{
		State =MDIO_enumWrongConfig;
 37e:	84 e0       	ldi	r24, 0x04	; 4
 380:	08 95       	ret
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret
			}
			State=MDIO_enumOk;
		}
		else
		{
			State =MDIO_enumWrongConfig;
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	08 95       	ret
				default :
				{
					State =MDIO_enumWrongConfig;
				}
			}
			State=MDIO_enumOk;
 392:	80 e0       	ldi	r24, 0x00	; 0
			State =MDIO_enumWrongConfig;
		}
	}

	return State;
}
 394:	08 95       	ret

00000396 <main>:
 #include  "../../MCAL/MDIO/MDIO_config.h"
 #include  "../../MCAL/MDIO/MDIO_interface.h"
 
int main(void)
{
	MDIO_SetPinDirection(MDIO_enumPortA,MDIO_enumPin0,MDIO_enumOutput_LOW);
 396:	43 e0       	ldi	r20, 0x03	; 3
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(MDIO_enumPortA,MDIO_enumPin1,MDIO_enumOutput_LOW);
 3a0:	43 e0       	ldi	r20, 0x03	; 3
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(MDIO_enumPortA,MDIO_enumPin2,MDIO_enumOutput_LOW);
 3aa:	43 e0       	ldi	r20, 0x03	; 3
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 41 00 	call	0x82	; 0x82 <MDIO_SetPinDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	84 e3       	ldi	r24, 0x34	; 52
 3b8:	9c e0       	ldi	r25, 0x0C	; 12
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x24>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x2e>
 3c4:	00 00       	nop
	{
		

		_delay_ms(500);

		MDIO_SetPinValue(MDIO_enumPortA,MDIO_enumPin0,MDIO_enumOutput_HIGH);
 3c6:	42 e0       	ldi	r20, 0x02	; 2
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 c9 00 	call	0x192	; 0x192 <MDIO_SetPinValue>
		MDIO_SetPinValue(MDIO_enumPortA,MDIO_enumPin1,MDIO_enumOutput_HIGH);
 3d0:	42 e0       	ldi	r20, 0x02	; 2
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 c9 00 	call	0x192	; 0x192 <MDIO_SetPinValue>
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	84 e3       	ldi	r24, 0x34	; 52
 3de:	9c e0       	ldi	r25, 0x0C	; 12
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <main+0x4a>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <main+0x54>
 3ea:	00 00       	nop
		_delay_ms(500);
		MDIO_SetPinValue(MDIO_enumPortA,MDIO_enumPin1,MDIO_enumOutput_LOW);
 3ec:	43 e0       	ldi	r20, 0x03	; 3
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 c9 00 	call	0x192	; 0x192 <MDIO_SetPinValue>
		MDIO_SetPinValue(MDIO_enumPortA,MDIO_enumPin0,MDIO_enumOutput_LOW);
 3f6:	43 e0       	ldi	r20, 0x03	; 3
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 c9 00 	call	0x192	; 0x192 <MDIO_SetPinValue>
		MDIO_SetPinValue(MDIO_enumPortA,MDIO_enumPin2,MDIO_enumOutput_HIGH);
 400:	42 e0       	ldi	r20, 0x02	; 2
 402:	62 e0       	ldi	r22, 0x02	; 2
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 c9 00 	call	0x192	; 0x192 <MDIO_SetPinValue>
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	84 e3       	ldi	r24, 0x34	; 52
 40e:	9c e0       	ldi	r25, 0x0C	; 12
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
		_delay_ms(500);
		MDIO_SetPinValue(MDIO_enumPortA,MDIO_enumPin2,MDIO_enumOutput_LOW);
 41c:	43 e0       	ldi	r20, 0x03	; 3
 41e:	62 e0       	ldi	r22, 0x02	; 2
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 c9 00 	call	0x192	; 0x192 <MDIO_SetPinValue>
 426:	c6 cf       	rjmp	.-116    	; 0x3b4 <main+0x1e>

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
