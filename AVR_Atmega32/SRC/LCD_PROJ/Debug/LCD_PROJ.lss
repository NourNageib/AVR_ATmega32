
LCD_PROJ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000372c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000372c  000037a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002880  00000000  00000000  000037e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000014ac  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000750c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000764c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000077bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b0a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <main>
      7a:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a9 e7       	ldi	r26, 0x79	; 121
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	89 e7       	ldi	r24, 0x79	; 121
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <HAL_LCD_Init>:
/* Description ! 16x2 Character LCD for chip LMB161A       */
/* Version     ! V01                                       */
/***********************************************************/

LCD_enuErrorStatus HAL_LCD_Init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	a1 97       	sbiw	r28, 0x21	; 33
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	MDIO_enumError_t loc_Port_state;
	/*Total Number of pins to be configured  */



	for(uinit8_t LCD_iteration_counter =0;LCD_iteration_counter<LCD_PINs_NUM;LCD_iteration_counter++)
     b4a:	19 82       	std	Y+1, r1	; 0x01
     b4c:	57 c0       	rjmp	.+174    	; 0xbfc <HAL_LCD_Init+0xc6>
			/*
				*Copying required data from array of LCD configuration to
				*array of configurations sent to the port function
				*in port driver
			*/
			loc_LCD_Array[LCD_iteration_counter].MPORT_HW_Config         = LCD_PinsConfig[LCD_iteration_counter].LCD_PORT;
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	48 2f       	mov	r20, r24
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	c9 01       	movw	r24, r18
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	fc 01       	movw	r30, r24
     b66:	ef 57       	subi	r30, 0x7F	; 127
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	60 81       	ld	r22, Z
     b6c:	ca 01       	movw	r24, r20
     b6e:	88 0f       	add	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	84 0f       	add	r24, r20
     b74:	95 1f       	adc	r25, r21
     b76:	9e 01       	movw	r18, r28
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	82 0f       	add	r24, r18
     b7e:	93 1f       	adc	r25, r19
     b80:	fc 01       	movw	r30, r24
     b82:	33 96       	adiw	r30, 0x03	; 3
     b84:	60 83       	st	Z, r22
			loc_LCD_Array[LCD_iteration_counter].MPIN_HW_Config          = LCD_PinsConfig[LCD_iteration_counter].LCD_PIN;
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	48 2f       	mov	r20, r24
     b8a:	50 e0       	ldi	r21, 0x00	; 0
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	c9 01       	movw	r24, r18
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	82 0f       	add	r24, r18
     b9a:	93 1f       	adc	r25, r19
     b9c:	fc 01       	movw	r30, r24
     b9e:	ee 57       	subi	r30, 0x7E	; 126
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	60 81       	ld	r22, Z
     ba4:	ca 01       	movw	r24, r20
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	84 0f       	add	r24, r20
     bac:	95 1f       	adc	r25, r21
     bae:	9e 01       	movw	r18, r28
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	82 0f       	add	r24, r18
     bb6:	93 1f       	adc	r25, r19
     bb8:	fc 01       	movw	r30, r24
     bba:	34 96       	adiw	r30, 0x04	; 4
     bbc:	60 83       	st	Z, r22
			loc_LCD_Array[LCD_iteration_counter].MPORT_Config_State      = LCD_PinsConfig[LCD_iteration_counter].LCD_STATE;
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	48 2f       	mov	r20, r24
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	c9 01       	movw	r24, r18
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	82 0f       	add	r24, r18
     bd2:	93 1f       	adc	r25, r19
     bd4:	fc 01       	movw	r30, r24
     bd6:	ed 57       	subi	r30, 0x7D	; 125
     bd8:	ff 4f       	sbci	r31, 0xFF	; 255
     bda:	60 81       	ld	r22, Z
     bdc:	ca 01       	movw	r24, r20
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	84 0f       	add	r24, r20
     be4:	95 1f       	adc	r25, r21
     be6:	9e 01       	movw	r18, r28
     be8:	2f 5f       	subi	r18, 0xFF	; 255
     bea:	3f 4f       	sbci	r19, 0xFF	; 255
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	fc 01       	movw	r30, r24
     bf2:	35 96       	adiw	r30, 0x05	; 5
     bf4:	60 83       	st	Z, r22
	MDIO_enumError_t loc_Port_state;
	/*Total Number of pins to be configured  */



	for(uinit8_t LCD_iteration_counter =0;LCD_iteration_counter<LCD_PINs_NUM;LCD_iteration_counter++)
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	8a 30       	cpi	r24, 0x0A	; 10
     c00:	08 f4       	brcc	.+2      	; 0xc04 <HAL_LCD_Init+0xce>
     c02:	a5 cf       	rjmp	.-182    	; 0xb4e <HAL_LCD_Init+0x18>

	}
	/*
	  * receive the return of port function if the registers
	*/
	loc_Port_state = MDIO_SetConfig( loc_LCD_Array , LCD_PINs_NUM);
     c04:	ce 01       	movw	r24, r28
     c06:	04 96       	adiw	r24, 0x04	; 4
     c08:	6a e0       	ldi	r22, 0x0A	; 10
     c0a:	0e 94 c4 11 	call	0x2388	; 0x2388 <MDIO_SetConfig>
     c0e:	8a 83       	std	Y+2, r24	; 0x02

	/*
	   *condition to ensure that port configured correctly first then return LCD condition correctly
	*/
	if( loc_Port_state == MDIO_enumOk )
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	88 23       	and	r24, r24
     c14:	19 f4       	brne	.+6      	; 0xc1c <HAL_LCD_Init+0xe6>
	{
		loc_LCD_state = HAL_LCDConfigOK;
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <HAL_LCD_Init+0xf0>
	}
	else if(loc_Port_state == MDIO_enumWrongConfig)
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	84 30       	cpi	r24, 0x04	; 4
     c20:	11 f4       	brne	.+4      	; 0xc26 <HAL_LCD_Init+0xf0>
	{
		loc_LCD_state = HAL_LCDwrongConfig;
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	8b 83       	std	Y+3, r24	; 0x03
	}

	return loc_LCD_state;
     c26:	8b 81       	ldd	r24, Y+3	; 0x03

}
     c28:	a1 96       	adiw	r28, 0x21	; 33
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <LCD_init>:

LCD_enuErrorStatus LCD_init (void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	6d 97       	sbiw	r28, 0x1d	; 29
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
	LCD_enuErrorStatus Loc_state = HAL_LCDenumERROR;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	8d 8f       	std	Y+29, r24	; 0x1d
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	a8 e4       	ldi	r26, 0x48	; 72
     c58:	b2 e4       	ldi	r27, 0x42	; 66
     c5a:	89 8f       	std	Y+25, r24	; 0x19
     c5c:	9a 8f       	std	Y+26, r25	; 0x1a
     c5e:	ab 8f       	std	Y+27, r26	; 0x1b
     c60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c62:	69 8d       	ldd	r22, Y+25	; 0x19
     c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	4a ef       	ldi	r20, 0xFA	; 250
     c70:	54 e4       	ldi	r21, 0x44	; 68
     c72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	8d 8b       	std	Y+21, r24	; 0x15
     c7c:	9e 8b       	std	Y+22, r25	; 0x16
     c7e:	af 8b       	std	Y+23, r26	; 0x17
     c80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c82:	6d 89       	ldd	r22, Y+21	; 0x15
     c84:	7e 89       	ldd	r23, Y+22	; 0x16
     c86:	8f 89       	ldd	r24, Y+23	; 0x17
     c88:	98 8d       	ldd	r25, Y+24	; 0x18
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e8       	ldi	r20, 0x80	; 128
     c90:	5f e3       	ldi	r21, 0x3F	; 63
     c92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c96:	88 23       	and	r24, r24
     c98:	2c f4       	brge	.+10     	; 0xca4 <LCD_init+0x6a>
		__ticks = 1;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	9c 8b       	std	Y+20, r25	; 0x14
     ca0:	8b 8b       	std	Y+19, r24	; 0x13
     ca2:	3f c0       	rjmp	.+126    	; 0xd22 <LCD_init+0xe8>
	else if (__tmp > 65535)
     ca4:	6d 89       	ldd	r22, Y+21	; 0x15
     ca6:	7e 89       	ldd	r23, Y+22	; 0x16
     ca8:	8f 89       	ldd	r24, Y+23	; 0x17
     caa:	98 8d       	ldd	r25, Y+24	; 0x18
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	3f ef       	ldi	r19, 0xFF	; 255
     cb0:	4f e7       	ldi	r20, 0x7F	; 127
     cb2:	57 e4       	ldi	r21, 0x47	; 71
     cb4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cb8:	18 16       	cp	r1, r24
     cba:	4c f5       	brge	.+82     	; 0xd0e <LCD_init+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbc:	69 8d       	ldd	r22, Y+25	; 0x19
     cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e2       	ldi	r20, 0x20	; 32
     cca:	51 e4       	ldi	r21, 0x41	; 65
     ccc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd0:	dc 01       	movw	r26, r24
     cd2:	cb 01       	movw	r24, r22
     cd4:	bc 01       	movw	r22, r24
     cd6:	cd 01       	movw	r24, r26
     cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	9c 8b       	std	Y+20, r25	; 0x14
     ce2:	8b 8b       	std	Y+19, r24	; 0x13
     ce4:	0f c0       	rjmp	.+30     	; 0xd04 <LCD_init+0xca>
     ce6:	88 ec       	ldi	r24, 0xC8	; 200
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9a 8b       	std	Y+18, r25	; 0x12
     cec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cee:	89 89       	ldd	r24, Y+17	; 0x11
     cf0:	9a 89       	ldd	r25, Y+18	; 0x12
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	f1 f7       	brne	.-4      	; 0xcf2 <LCD_init+0xb8>
     cf6:	9a 8b       	std	Y+18, r25	; 0x12
     cf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfa:	8b 89       	ldd	r24, Y+19	; 0x13
     cfc:	9c 89       	ldd	r25, Y+20	; 0x14
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	9c 8b       	std	Y+20, r25	; 0x14
     d02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d04:	8b 89       	ldd	r24, Y+19	; 0x13
     d06:	9c 89       	ldd	r25, Y+20	; 0x14
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	69 f7       	brne	.-38     	; 0xce6 <LCD_init+0xac>
     d0c:	14 c0       	rjmp	.+40     	; 0xd36 <LCD_init+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0e:	6d 89       	ldd	r22, Y+21	; 0x15
     d10:	7e 89       	ldd	r23, Y+22	; 0x16
     d12:	8f 89       	ldd	r24, Y+23	; 0x17
     d14:	98 8d       	ldd	r25, Y+24	; 0x18
     d16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	9c 8b       	std	Y+20, r25	; 0x14
     d20:	8b 8b       	std	Y+19, r24	; 0x13
     d22:	8b 89       	ldd	r24, Y+19	; 0x13
     d24:	9c 89       	ldd	r25, Y+20	; 0x14
     d26:	98 8b       	std	Y+16, r25	; 0x10
     d28:	8f 87       	std	Y+15, r24	; 0x0f
     d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2c:	98 89       	ldd	r25, Y+16	; 0x10
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <LCD_init+0xf4>
     d32:	98 8b       	std	Y+16, r25	; 0x10
     d34:	8f 87       	std	Y+15, r24	; 0x0f

		/***********************Function Set************************/
		/*Set character font 5X7 dots & Number of Lines 2 -> (0X38)*/
		/*    character font 5X7 dots & Number of Lines 1 -> (0X30)*/
		/***********************************************************/
	    LCD_enuWriteCommand(0X38);
     d36:	88 e3       	ldi	r24, 0x38	; 56
     d38:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
	    /*                 C->1 : cursor display ON                */
	    /*                 C->0 : cursor display OFF               */
 	    /*                 B->1 : Cursor Blink   ON                */
	    /*                 B->0 : Cursor Blink   OFF               */
	    /***********************************************************/
	    LCD_enuWriteCommand(0X0F);
     d3c:	8f e0       	ldi	r24, 0x0F	; 15
     d3e:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>

	    /******************Display Clear***************************/
	    LCD_enuWriteCommand(0X01);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e4       	ldi	r27, 0x40	; 64
     d50:	8b 87       	std	Y+11, r24	; 0x0b
     d52:	9c 87       	std	Y+12, r25	; 0x0c
     d54:	ad 87       	std	Y+13, r26	; 0x0d
     d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a ef       	ldi	r20, 0xFA	; 250
     d66:	54 e4       	ldi	r21, 0x44	; 68
     d68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8f 83       	std	Y+7, r24	; 0x07
     d72:	98 87       	std	Y+8, r25	; 0x08
     d74:	a9 87       	std	Y+9, r26	; 0x09
     d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d78:	6f 81       	ldd	r22, Y+7	; 0x07
     d7a:	78 85       	ldd	r23, Y+8	; 0x08
     d7c:	89 85       	ldd	r24, Y+9	; 0x09
     d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <LCD_init+0x160>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9e 83       	std	Y+6, r25	; 0x06
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <LCD_init+0x1de>
	else if (__tmp > 65535)
     d9a:	6f 81       	ldd	r22, Y+7	; 0x07
     d9c:	78 85       	ldd	r23, Y+8	; 0x08
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <LCD_init+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	6b 85       	ldd	r22, Y+11	; 0x0b
     db4:	7c 85       	ldd	r23, Y+12	; 0x0c
     db6:	8d 85       	ldd	r24, Y+13	; 0x0d
     db8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <LCD_init+0x1c0>
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	9c 81       	ldd	r25, Y+4	; 0x04
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <LCD_init+0x1ae>
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	9e 81       	ldd	r25, Y+6	; 0x06
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <LCD_init+0x1a2>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <LCD_init+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	6f 81       	ldd	r22, Y+7	; 0x07
     e06:	78 85       	ldd	r23, Y+8	; 0x08
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	9e 83       	std	Y+6, r25	; 0x06
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	8d 81       	ldd	r24, Y+5	; 0x05
     e1a:	9e 81       	ldd	r25, Y+6	; 0x06
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <LCD_init+0x1ea>
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
		/*                  0b0000001I/DSH                           */
		/*  I/D ->1 :Increases "Cursor/ address shift to the right"  */
	    /*  I/D ->0 :Decreases "Cursor/ address shift to the left"   */
	    /*  SH  ->1 :Display shift to left when I/D ->1              */
	    /*************************************************************/
	    LCD_enuWriteCommand(0X06);
     e2c:	86 e0       	ldi	r24, 0x06	; 6
     e2e:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
	    Loc_state =HAL_LCDenumOk;
     e32:	1d 8e       	std	Y+29, r1	; 0x1d
		LCD_enuWriteCommand(0X06);


	#endif

	return Loc_state;
     e34:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
     e36:	6d 96       	adiw	r28, 0x1d	; 29
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <LCD_enuWriteData>:

LCD_enuErrorStatus LCD_enuWriteData (uinit8_t Copy_u8Data)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	6e 97       	sbiw	r28, 0x1e	; 30
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	8e 8f       	std	Y+30, r24	; 0x1e
           	LCD_enuErrorStatus Loc_state = HAL_LCDwrongInput;
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	8d 8f       	std	Y+29, r24	; 0x1d

		#if LCD_MODE == _8_BIT_MODE

			   /*Select Instruction data for RS-> H */
				MDIO_SetPinValue(LCD_PinsConfig[RS].LCD_PORT,LCD_PinsConfig[RS].LCD_PIN,MDIO_enumOutput_HIGH);
     e62:	80 91 84 00 	lds	r24, 0x0084
     e66:	90 91 85 00 	lds	r25, 0x0085
     e6a:	69 2f       	mov	r22, r25
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <MDIO_SetPinValue>
				/*
				 * In case not connecting R/W -> PIN TO GND
				 *  MDIO_SetPinValue(LCD_PinsConfig[RW].LCD_PORT,LCD_PinsConfig[RW].LCD_PIN,MDIO_enumOutput_LOW);
				 */
				/*Assign Data to port on which LCD is connected */
				MDIO_AssignPortValue(LCD_PORT_CONFIG,Copy_u8Data);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e76:	0e 94 76 11 	call	0x22ec	; 0x22ec <MDIO_AssignPortValue>
				MDIO_SetPinValue(LCD_PinsConfig[D7].LCD_PORT,LCD_PinsConfig[D7].LCD_PIN,READ_BIT(Copy_u8Data,7));
				*/


				/*Trigger H->L to inform LCD MC to read port */
				MDIO_SetPinValue(LCD_PinsConfig[EN].LCD_PORT,LCD_PinsConfig[EN].LCD_PIN,MDIO_enumOutput_HIGH);
     e7a:	80 91 81 00 	lds	r24, 0x0081
     e7e:	90 91 82 00 	lds	r25, 0x0082
     e82:	69 2f       	mov	r22, r25
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <MDIO_SetPinValue>
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e8       	ldi	r26, 0x80	; 128
     e90:	bf e3       	ldi	r27, 0x3F	; 63
     e92:	89 8f       	std	Y+25, r24	; 0x19
     e94:	9a 8f       	std	Y+26, r25	; 0x1a
     e96:	ab 8f       	std	Y+27, r26	; 0x1b
     e98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9a:	69 8d       	ldd	r22, Y+25	; 0x19
     e9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	4a ef       	ldi	r20, 0xFA	; 250
     ea8:	54 e4       	ldi	r21, 0x44	; 68
     eaa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	8d 8b       	std	Y+21, r24	; 0x15
     eb4:	9e 8b       	std	Y+22, r25	; 0x16
     eb6:	af 8b       	std	Y+23, r26	; 0x17
     eb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eba:	6d 89       	ldd	r22, Y+21	; 0x15
     ebc:	7e 89       	ldd	r23, Y+22	; 0x16
     ebe:	8f 89       	ldd	r24, Y+23	; 0x17
     ec0:	98 8d       	ldd	r25, Y+24	; 0x18
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e8       	ldi	r20, 0x80	; 128
     ec8:	5f e3       	ldi	r21, 0x3F	; 63
     eca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ece:	88 23       	and	r24, r24
     ed0:	2c f4       	brge	.+10     	; 0xedc <LCD_enuWriteData+0x94>
		__ticks = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9c 8b       	std	Y+20, r25	; 0x14
     ed8:	8b 8b       	std	Y+19, r24	; 0x13
     eda:	3f c0       	rjmp	.+126    	; 0xf5a <LCD_enuWriteData+0x112>
	else if (__tmp > 65535)
     edc:	6d 89       	ldd	r22, Y+21	; 0x15
     ede:	7e 89       	ldd	r23, Y+22	; 0x16
     ee0:	8f 89       	ldd	r24, Y+23	; 0x17
     ee2:	98 8d       	ldd	r25, Y+24	; 0x18
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	57 e4       	ldi	r21, 0x47	; 71
     eec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	4c f5       	brge	.+82     	; 0xf46 <LCD_enuWriteData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef4:	69 8d       	ldd	r22, Y+25	; 0x19
     ef6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e2       	ldi	r20, 0x20	; 32
     f02:	51 e4       	ldi	r21, 0x41	; 65
     f04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9c 8b       	std	Y+20, r25	; 0x14
     f1a:	8b 8b       	std	Y+19, r24	; 0x13
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <LCD_enuWriteData+0xf4>
     f1e:	88 ec       	ldi	r24, 0xC8	; 200
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9a 8b       	std	Y+18, r25	; 0x12
     f24:	89 8b       	std	Y+17, r24	; 0x11
     f26:	89 89       	ldd	r24, Y+17	; 0x11
     f28:	9a 89       	ldd	r25, Y+18	; 0x12
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <LCD_enuWriteData+0xe2>
     f2e:	9a 8b       	std	Y+18, r25	; 0x12
     f30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f32:	8b 89       	ldd	r24, Y+19	; 0x13
     f34:	9c 89       	ldd	r25, Y+20	; 0x14
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	9c 8b       	std	Y+20, r25	; 0x14
     f3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3c:	8b 89       	ldd	r24, Y+19	; 0x13
     f3e:	9c 89       	ldd	r25, Y+20	; 0x14
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	69 f7       	brne	.-38     	; 0xf1e <LCD_enuWriteData+0xd6>
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <LCD_enuWriteData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f46:	6d 89       	ldd	r22, Y+21	; 0x15
     f48:	7e 89       	ldd	r23, Y+22	; 0x16
     f4a:	8f 89       	ldd	r24, Y+23	; 0x17
     f4c:	98 8d       	ldd	r25, Y+24	; 0x18
     f4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9c 8b       	std	Y+20, r25	; 0x14
     f58:	8b 8b       	std	Y+19, r24	; 0x13
     f5a:	8b 89       	ldd	r24, Y+19	; 0x13
     f5c:	9c 89       	ldd	r25, Y+20	; 0x14
     f5e:	98 8b       	std	Y+16, r25	; 0x10
     f60:	8f 87       	std	Y+15, r24	; 0x0f
     f62:	8f 85       	ldd	r24, Y+15	; 0x0f
     f64:	98 89       	ldd	r25, Y+16	; 0x10
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <LCD_enuWriteData+0x11e>
     f6a:	98 8b       	std	Y+16, r25	; 0x10
     f6c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1);
				MDIO_SetPinValue(LCD_PinsConfig[EN].LCD_PORT,LCD_PinsConfig[EN].LCD_PIN,MDIO_enumOutput_LOW);
     f6e:	80 91 81 00 	lds	r24, 0x0081
     f72:	90 91 82 00 	lds	r25, 0x0082
     f76:	69 2f       	mov	r22, r25
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <MDIO_SetPinValue>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a0 e8       	ldi	r26, 0x80	; 128
     f84:	bf e3       	ldi	r27, 0x3F	; 63
     f86:	8b 87       	std	Y+11, r24	; 0x0b
     f88:	9c 87       	std	Y+12, r25	; 0x0c
     f8a:	ad 87       	std	Y+13, r26	; 0x0d
     f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f90:	7c 85       	ldd	r23, Y+12	; 0x0c
     f92:	8d 85       	ldd	r24, Y+13	; 0x0d
     f94:	9e 85       	ldd	r25, Y+14	; 0x0e
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	4a ef       	ldi	r20, 0xFA	; 250
     f9c:	54 e4       	ldi	r21, 0x44	; 68
     f9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	8f 83       	std	Y+7, r24	; 0x07
     fa8:	98 87       	std	Y+8, r25	; 0x08
     faa:	a9 87       	std	Y+9, r26	; 0x09
     fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fae:	6f 81       	ldd	r22, Y+7	; 0x07
     fb0:	78 85       	ldd	r23, Y+8	; 0x08
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e8       	ldi	r20, 0x80	; 128
     fbc:	5f e3       	ldi	r21, 0x3F	; 63
     fbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fc2:	88 23       	and	r24, r24
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <LCD_enuWriteData+0x188>
		__ticks = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	3f c0       	rjmp	.+126    	; 0x104e <LCD_enuWriteData+0x206>
	else if (__tmp > 65535)
     fd0:	6f 81       	ldd	r22, Y+7	; 0x07
     fd2:	78 85       	ldd	r23, Y+8	; 0x08
     fd4:	89 85       	ldd	r24, Y+9	; 0x09
     fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	3f ef       	ldi	r19, 0xFF	; 255
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	57 e4       	ldi	r21, 0x47	; 71
     fe0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fe4:	18 16       	cp	r1, r24
     fe6:	4c f5       	brge	.+82     	; 0x103a <LCD_enuWriteData+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fea:	7c 85       	ldd	r23, Y+12	; 0x0c
     fec:	8d 85       	ldd	r24, Y+13	; 0x0d
     fee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e2       	ldi	r20, 0x20	; 32
     ff6:	51 e4       	ldi	r21, 0x41	; 65
     ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9e 83       	std	Y+6, r25	; 0x06
    100e:	8d 83       	std	Y+5, r24	; 0x05
    1010:	0f c0       	rjmp	.+30     	; 0x1030 <LCD_enuWriteData+0x1e8>
    1012:	88 ec       	ldi	r24, 0xC8	; 200
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <LCD_enuWriteData+0x1d6>
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	69 f7       	brne	.-38     	; 0x1012 <LCD_enuWriteData+0x1ca>
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <LCD_enuWriteData+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103a:	6f 81       	ldd	r22, Y+7	; 0x07
    103c:	78 85       	ldd	r23, Y+8	; 0x08
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <LCD_enuWriteData+0x212>
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);

				Loc_state = HAL_LCDenumOk;
    1062:	1d 8e       	std	Y+29, r1	; 0x1d
				_delay_ms(1);

				Loc_state = HAL_LCDenumOk;

        #endif
	 return Loc_state;
    1064:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    1066:	6e 96       	adiw	r28, 0x1e	; 30
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <LCD_enuWriteCommand>:
LCD_enuErrorStatus LCD_enuWriteCommand  (uinit8_t Copy_u8Command)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	6e 97       	sbiw	r28, 0x1e	; 30
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	8e 8f       	std	Y+30, r24	; 0x1e

	        LCD_enuErrorStatus Loc_state = HAL_LCDwrongInput;
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	8d 8f       	std	Y+29, r24	; 0x1d

		#if LCD_MODE == _8_BIT_MODE

			   /*Select Instruction mode for RS-> L */
				MDIO_SetPinValue(LCD_PinsConfig[RS].LCD_PORT,LCD_PinsConfig[RS].LCD_PIN,MDIO_enumOutput_LOW);
    1092:	80 91 84 00 	lds	r24, 0x0084
    1096:	90 91 85 00 	lds	r25, 0x0085
    109a:	69 2f       	mov	r22, r25
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <MDIO_SetPinValue>
				/*
				 * In case not connecting R/W -> PIN TO GND
				 *  MDIO_SetPinValue(LCD_PinsConfig[RW].LCD_PORT,LCD_PinsConfig[RW].LCD_PIN,MDIO_enumOutput_LOW);
				 */
				/*Assign Command to port on which LCD is connected */
				MDIO_AssignPortValue(LCD_PORT_CONFIG,Copy_u8Command);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    10a6:	0e 94 76 11 	call	0x22ec	; 0x22ec <MDIO_AssignPortValue>
				MDIO_SetPinValue(LCD_PinsConfig[D5].LCD_PORT,LCD_PinsConfig[D5].LCD_PIN,READ_BIT(Copy_u8Command,5));
				MDIO_SetPinValue(LCD_PinsConfig[D6].LCD_PORT,LCD_PinsConfig[D6].LCD_PIN,READ_BIT(Copy_u8Command,6));
				MDIO_SetPinValue(LCD_PinsConfig[D7].LCD_PORT,LCD_PinsConfig[D7].LCD_PIN,READ_BIT(Copy_u8Command,7));
				*/
				/*Trigger H->L to inform LCD MC to read port */
				MDIO_SetPinValue(LCD_PinsConfig[EN].LCD_PORT,LCD_PinsConfig[EN].LCD_PIN,MDIO_enumOutput_HIGH);
    10aa:	80 91 81 00 	lds	r24, 0x0081
    10ae:	90 91 82 00 	lds	r25, 0x0082
    10b2:	69 2f       	mov	r22, r25
    10b4:	41 e0       	ldi	r20, 0x01	; 1
    10b6:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <MDIO_SetPinValue>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a0 e8       	ldi	r26, 0x80	; 128
    10c0:	bf e3       	ldi	r27, 0x3F	; 63
    10c2:	89 8f       	std	Y+25, r24	; 0x19
    10c4:	9a 8f       	std	Y+26, r25	; 0x1a
    10c6:	ab 8f       	std	Y+27, r26	; 0x1b
    10c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ca:	69 8d       	ldd	r22, Y+25	; 0x19
    10cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	4a ef       	ldi	r20, 0xFA	; 250
    10d8:	54 e4       	ldi	r21, 0x44	; 68
    10da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	8d 8b       	std	Y+21, r24	; 0x15
    10e4:	9e 8b       	std	Y+22, r25	; 0x16
    10e6:	af 8b       	std	Y+23, r26	; 0x17
    10e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10ea:	6d 89       	ldd	r22, Y+21	; 0x15
    10ec:	7e 89       	ldd	r23, Y+22	; 0x16
    10ee:	8f 89       	ldd	r24, Y+23	; 0x17
    10f0:	98 8d       	ldd	r25, Y+24	; 0x18
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e8       	ldi	r20, 0x80	; 128
    10f8:	5f e3       	ldi	r21, 0x3F	; 63
    10fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10fe:	88 23       	and	r24, r24
    1100:	2c f4       	brge	.+10     	; 0x110c <LCD_enuWriteCommand+0x94>
		__ticks = 1;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9c 8b       	std	Y+20, r25	; 0x14
    1108:	8b 8b       	std	Y+19, r24	; 0x13
    110a:	3f c0       	rjmp	.+126    	; 0x118a <LCD_enuWriteCommand+0x112>
	else if (__tmp > 65535)
    110c:	6d 89       	ldd	r22, Y+21	; 0x15
    110e:	7e 89       	ldd	r23, Y+22	; 0x16
    1110:	8f 89       	ldd	r24, Y+23	; 0x17
    1112:	98 8d       	ldd	r25, Y+24	; 0x18
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	3f ef       	ldi	r19, 0xFF	; 255
    1118:	4f e7       	ldi	r20, 0x7F	; 127
    111a:	57 e4       	ldi	r21, 0x47	; 71
    111c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1120:	18 16       	cp	r1, r24
    1122:	4c f5       	brge	.+82     	; 0x1176 <LCD_enuWriteCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1124:	69 8d       	ldd	r22, Y+25	; 0x19
    1126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e2       	ldi	r20, 0x20	; 32
    1132:	51 e4       	ldi	r21, 0x41	; 65
    1134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9c 8b       	std	Y+20, r25	; 0x14
    114a:	8b 8b       	std	Y+19, r24	; 0x13
    114c:	0f c0       	rjmp	.+30     	; 0x116c <LCD_enuWriteCommand+0xf4>
    114e:	88 ec       	ldi	r24, 0xC8	; 200
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9a 8b       	std	Y+18, r25	; 0x12
    1154:	89 8b       	std	Y+17, r24	; 0x11
    1156:	89 89       	ldd	r24, Y+17	; 0x11
    1158:	9a 89       	ldd	r25, Y+18	; 0x12
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <LCD_enuWriteCommand+0xe2>
    115e:	9a 8b       	std	Y+18, r25	; 0x12
    1160:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1162:	8b 89       	ldd	r24, Y+19	; 0x13
    1164:	9c 89       	ldd	r25, Y+20	; 0x14
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	9c 8b       	std	Y+20, r25	; 0x14
    116a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116c:	8b 89       	ldd	r24, Y+19	; 0x13
    116e:	9c 89       	ldd	r25, Y+20	; 0x14
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	69 f7       	brne	.-38     	; 0x114e <LCD_enuWriteCommand+0xd6>
    1174:	14 c0       	rjmp	.+40     	; 0x119e <LCD_enuWriteCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1176:	6d 89       	ldd	r22, Y+21	; 0x15
    1178:	7e 89       	ldd	r23, Y+22	; 0x16
    117a:	8f 89       	ldd	r24, Y+23	; 0x17
    117c:	98 8d       	ldd	r25, Y+24	; 0x18
    117e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9c 8b       	std	Y+20, r25	; 0x14
    1188:	8b 8b       	std	Y+19, r24	; 0x13
    118a:	8b 89       	ldd	r24, Y+19	; 0x13
    118c:	9c 89       	ldd	r25, Y+20	; 0x14
    118e:	98 8b       	std	Y+16, r25	; 0x10
    1190:	8f 87       	std	Y+15, r24	; 0x0f
    1192:	8f 85       	ldd	r24, Y+15	; 0x0f
    1194:	98 89       	ldd	r25, Y+16	; 0x10
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <LCD_enuWriteCommand+0x11e>
    119a:	98 8b       	std	Y+16, r25	; 0x10
    119c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1);
				MDIO_SetPinValue(LCD_PinsConfig[EN].LCD_PORT,LCD_PinsConfig[EN].LCD_PIN,MDIO_enumOutput_LOW);
    119e:	80 91 81 00 	lds	r24, 0x0081
    11a2:	90 91 82 00 	lds	r25, 0x0082
    11a6:	69 2f       	mov	r22, r25
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <MDIO_SetPinValue>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e8       	ldi	r26, 0x80	; 128
    11b4:	bf e3       	ldi	r27, 0x3F	; 63
    11b6:	8b 87       	std	Y+11, r24	; 0x0b
    11b8:	9c 87       	std	Y+12, r25	; 0x0c
    11ba:	ad 87       	std	Y+13, r26	; 0x0d
    11bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11be:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	4a ef       	ldi	r20, 0xFA	; 250
    11cc:	54 e4       	ldi	r21, 0x44	; 68
    11ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	8f 83       	std	Y+7, r24	; 0x07
    11d8:	98 87       	std	Y+8, r25	; 0x08
    11da:	a9 87       	std	Y+9, r26	; 0x09
    11dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11de:	6f 81       	ldd	r22, Y+7	; 0x07
    11e0:	78 85       	ldd	r23, Y+8	; 0x08
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	40 e8       	ldi	r20, 0x80	; 128
    11ec:	5f e3       	ldi	r21, 0x3F	; 63
    11ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11f2:	88 23       	and	r24, r24
    11f4:	2c f4       	brge	.+10     	; 0x1200 <LCD_enuWriteCommand+0x188>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <LCD_enuWriteCommand+0x206>
	else if (__tmp > 65535)
    1200:	6f 81       	ldd	r22, Y+7	; 0x07
    1202:	78 85       	ldd	r23, Y+8	; 0x08
    1204:	89 85       	ldd	r24, Y+9	; 0x09
    1206:	9a 85       	ldd	r25, Y+10	; 0x0a
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	3f ef       	ldi	r19, 0xFF	; 255
    120c:	4f e7       	ldi	r20, 0x7F	; 127
    120e:	57 e4       	ldi	r21, 0x47	; 71
    1210:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1214:	18 16       	cp	r1, r24
    1216:	4c f5       	brge	.+82     	; 0x126a <LCD_enuWriteCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1218:	6b 85       	ldd	r22, Y+11	; 0x0b
    121a:	7c 85       	ldd	r23, Y+12	; 0x0c
    121c:	8d 85       	ldd	r24, Y+13	; 0x0d
    121e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	9e 83       	std	Y+6, r25	; 0x06
    123e:	8d 83       	std	Y+5, r24	; 0x05
    1240:	0f c0       	rjmp	.+30     	; 0x1260 <LCD_enuWriteCommand+0x1e8>
    1242:	88 ec       	ldi	r24, 0xC8	; 200
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <LCD_enuWriteCommand+0x1d6>
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1256:	8d 81       	ldd	r24, Y+5	; 0x05
    1258:	9e 81       	ldd	r25, Y+6	; 0x06
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	9e 83       	std	Y+6, r25	; 0x06
    125e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	69 f7       	brne	.-38     	; 0x1242 <LCD_enuWriteCommand+0x1ca>
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <LCD_enuWriteCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    126a:	6f 81       	ldd	r22, Y+7	; 0x07
    126c:	78 85       	ldd	r23, Y+8	; 0x08
    126e:	89 85       	ldd	r24, Y+9	; 0x09
    1270:	9a 85       	ldd	r25, Y+10	; 0x0a
    1272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	9e 81       	ldd	r25, Y+6	; 0x06
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	9a 81       	ldd	r25, Y+2	; 0x02
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <LCD_enuWriteCommand+0x212>
    128e:	9a 83       	std	Y+2, r25	; 0x02
    1290:	89 83       	std	Y+1, r24	; 0x01
               _delay_ms(1);



				Loc_state = HAL_LCDenumOk;
    1292:	1d 8e       	std	Y+29, r1	; 0x1d
						MDIO_SetPinValue(LCD_PinsConfig[EN].LCD_PORT,LCD_PinsConfig[EN].LCD_PIN,MDIO_enumOutput_LOW);
						_delay_ms(1);

						Loc_state = HAL_LCDenumOk;
			#endif
	        return Loc_state;
    1294:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1296:	6e 96       	adiw	r28, 0x1e	; 30
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <LCD_enuWriteCharacter>:

LCD_enuErrorStatus LCD_enuWriteCharacter(uinit8_t Copy_u8Character)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <LCD_enuWriteCharacter+0x6>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_enuErrorStatus Loc_state = HAL_LCDenumERROR;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	89 83       	std	Y+1, r24	; 0x01
	#if LCD_MODE ==_8_BIT_MODE

		LCD_enuWriteData(Copy_u8Character);
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	0e 94 24 07 	call	0xe48	; 0xe48 <LCD_enuWriteData>

	 #endif
	return Loc_state;
    12be:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <LCD_enumPrintStringwithLocation>:
#define NULL 0

LCD_enuErrorStatus LCD_enumPrintStringwithLocation (uinit8_t Copy_u8X, uinit8_t Copy_u8Y,char* Copy_pString)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <LCD_enumPrintStringwithLocation+0x6>
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <LCD_enumPrintStringwithLocation+0x8>
    12d2:	0f 92       	push	r0
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	6b 83       	std	Y+3, r22	; 0x03
    12dc:	5d 83       	std	Y+5, r21	; 0x05
    12de:	4c 83       	std	Y+4, r20	; 0x04
	LCD_enuErrorStatus Loc_state = HAL_LCDenumERROR;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pString != NULL)
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	49 f0       	breq	.+18     	; 0x12fe <LCD_enumPrintStringwithLocation+0x34>
	{
		Loc_state =LCD_enuGotoDDRAM_XY(Copy_u8X,Copy_u8Y);
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	6b 81       	ldd	r22, Y+3	; 0x03
    12f0:	0e 94 88 09 	call	0x1310	; 0x1310 <LCD_enuGotoDDRAM_XY>
    12f4:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuWriteString(Copy_pString);
    12f6:	8c 81       	ldd	r24, Y+4	; 0x04
    12f8:	9d 81       	ldd	r25, Y+5	; 0x05
    12fa:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_enuWriteString>
	}

	return Loc_state;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <LCD_enuGotoDDRAM_XY>:

LCD_enuErrorStatus LCD_enuGotoDDRAM_XY (uinit8_t Copy_u8X, uinit8_t Copy_u8Y)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <LCD_enuGotoDDRAM_XY+0x6>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	8a 83       	std	Y+2, r24	; 0x02
    131e:	6b 83       	std	Y+3, r22	; 0x03
	LCD_enuErrorStatus Loc_state = HAL_LCDenumERROR;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	89 83       	std	Y+1, r24	; 0x01

	/*x for line of the LCD (1 OR 2)   Y for cell (1:15)  */
	if(( Copy_u8X == 1 || Copy_u8X == 2) && (Copy_u8Y >= 1 && Copy_u8Y <=16 ))
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	19 f0       	breq	.+6      	; 0x1330 <LCD_enuGotoDDRAM_XY+0x20>
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	d1 f4       	brne	.+52     	; 0x1364 <LCD_enuGotoDDRAM_XY+0x54>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 23       	and	r24, r24
    1334:	b9 f0       	breq	.+46     	; 0x1364 <LCD_enuGotoDDRAM_XY+0x54>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	81 31       	cpi	r24, 0x11	; 17
    133a:	a0 f4       	brcc	.+40     	; 0x1364 <LCD_enuGotoDDRAM_XY+0x54>
	{
		if(Copy_u8X == 1)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	39 f4       	brne	.+14     	; 0x1350 <LCD_enuGotoDDRAM_XY+0x40>
		{
			LCD_enuWriteCommand(0X80|(Copy_u8Y-1));
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	81 50       	subi	r24, 0x01	; 1
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
			Loc_state = HAL_LCDenumOk;
    134c:	19 82       	std	Y+1, r1	; 0x01
    134e:	0c c0       	rjmp	.+24     	; 0x1368 <LCD_enuGotoDDRAM_XY+0x58>
		}
		else if (Copy_u8X == 2)
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	82 30       	cpi	r24, 0x02	; 2
    1354:	49 f4       	brne	.+18     	; 0x1368 <LCD_enuGotoDDRAM_XY+0x58>
		{
			LCD_enuWriteCommand(0X80|0X40|(Copy_u8Y-1));
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	81 50       	subi	r24, 0x01	; 1
    135a:	80 6c       	ori	r24, 0xC0	; 192
    135c:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
			Loc_state = HAL_LCDenumOk;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <LCD_enuGotoDDRAM_XY+0x58>
		}

	}
	else
	{
		Loc_state = HAL_LCDenumERROR;
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_state;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <LCD_enuWriteNumber>:
LCD_enuErrorStatus LCD_enuWriteNumber (int32__t Copy_u8Number)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	64 97       	sbiw	r28, 0x14	; 20
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	9c 8b       	std	Y+20, r25	; 0x14
    138c:	8b 8b       	std	Y+19, r24	; 0x13
	LCD_enuErrorStatus Loc_state = HAL_LCDenumOk;
    138e:	1a 82       	std	Y+2, r1	; 0x02
	uinit8_t mystr[16];
	sint8_t  Loc_Loop_iterator = 0 ;
    1390:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Number==0)
    1392:	8b 89       	ldd	r24, Y+19	; 0x13
    1394:	9c 89       	ldd	r25, Y+20	; 0x14
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	21 f4       	brne	.+8      	; 0x13a2 <LCD_enuWriteNumber+0x2c>
	{
		LCD_enuWriteCharacter('0');
    139a:	80 e3       	ldi	r24, 0x30	; 48
    139c:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_enuWriteCharacter>
    13a0:	4a c0       	rjmp	.+148    	; 0x1436 <LCD_enuWriteNumber+0xc0>
	}
	else
	{
		if(Copy_u8Number<0)
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	99 23       	and	r25, r25
    13a8:	5c f5       	brge	.+86     	; 0x1400 <LCD_enuWriteNumber+0x8a>
		{
			Copy_u8Number*=(-1);
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	90 95       	com	r25
    13b0:	81 95       	neg	r24
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	9c 8b       	std	Y+20, r25	; 0x14
    13b6:	8b 8b       	std	Y+19, r24	; 0x13
			LCD_enuWriteCharacter('-');
    13b8:	8d e2       	ldi	r24, 0x2D	; 45
    13ba:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_enuWriteCharacter>
    13be:	20 c0       	rjmp	.+64     	; 0x1400 <LCD_enuWriteNumber+0x8a>
		}
		while(Copy_u8Number)
			{
				mystr[Loc_Loop_iterator++] = Copy_u8Number%10 + '0';
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	e8 2f       	mov	r30, r24
    13c4:	ff 27       	eor	r31, r31
    13c6:	e7 fd       	sbrc	r30, 7
    13c8:	f0 95       	com	r31
    13ca:	8b 89       	ldd	r24, Y+19	; 0x13
    13cc:	9c 89       	ldd	r25, Y+20	; 0x14
    13ce:	2a e0       	ldi	r18, 0x0A	; 10
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	b9 01       	movw	r22, r18
    13d4:	0e 94 36 1b 	call	0x366c	; 0x366c <__divmodhi4>
    13d8:	28 2f       	mov	r18, r24
    13da:	20 5d       	subi	r18, 0xD0	; 208
    13dc:	ce 01       	movw	r24, r28
    13de:	03 96       	adiw	r24, 0x03	; 3
    13e0:	e8 0f       	add	r30, r24
    13e2:	f9 1f       	adc	r31, r25
    13e4:	20 83       	st	Z, r18
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	89 83       	std	Y+1, r24	; 0x01
				Copy_u8Number/=10;
    13ec:	8b 89       	ldd	r24, Y+19	; 0x13
    13ee:	9c 89       	ldd	r25, Y+20	; 0x14
    13f0:	2a e0       	ldi	r18, 0x0A	; 10
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	b9 01       	movw	r22, r18
    13f6:	0e 94 36 1b 	call	0x366c	; 0x366c <__divmodhi4>
    13fa:	cb 01       	movw	r24, r22
    13fc:	9c 8b       	std	Y+20, r25	; 0x14
    13fe:	8b 8b       	std	Y+19, r24	; 0x13
		if(Copy_u8Number<0)
		{
			Copy_u8Number*=(-1);
			LCD_enuWriteCharacter('-');
		}
		while(Copy_u8Number)
    1400:	8b 89       	ldd	r24, Y+19	; 0x13
    1402:	9c 89       	ldd	r25, Y+20	; 0x14
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	e1 f6       	brne	.-72     	; 0x13c0 <LCD_enuWriteNumber+0x4a>
			{
				mystr[Loc_Loop_iterator++] = Copy_u8Number%10 + '0';
				Copy_u8Number/=10;
			}
			for(Loc_Loop_iterator-=1;Loc_Loop_iterator>=0;Loc_Loop_iterator--)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	81 50       	subi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	10 c0       	rjmp	.+32     	; 0x1430 <LCD_enuWriteNumber+0xba>
			{
				LCD_enuWriteCharacter(mystr[Loc_Loop_iterator]);
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	28 2f       	mov	r18, r24
    1414:	33 27       	eor	r19, r19
    1416:	27 fd       	sbrc	r18, 7
    1418:	30 95       	com	r19
    141a:	ce 01       	movw	r24, r28
    141c:	03 96       	adiw	r24, 0x03	; 3
    141e:	fc 01       	movw	r30, r24
    1420:	e2 0f       	add	r30, r18
    1422:	f3 1f       	adc	r31, r19
    1424:	80 81       	ld	r24, Z
    1426:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_enuWriteCharacter>
		while(Copy_u8Number)
			{
				mystr[Loc_Loop_iterator++] = Copy_u8Number%10 + '0';
				Copy_u8Number/=10;
			}
			for(Loc_Loop_iterator-=1;Loc_Loop_iterator>=0;Loc_Loop_iterator--)
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	81 50       	subi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	88 23       	and	r24, r24
    1434:	6c f7       	brge	.-38     	; 0x1410 <LCD_enuWriteNumber+0x9a>

			}

	}

	return Loc_state;
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1438:	64 96       	adiw	r28, 0x14	; 20
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <LCD_enuWriteString>:
LCD_enuErrorStatus LCD_enuWriteString   (char* Copy_pchPattern)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <LCD_enuWriteString+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <LCD_enuWriteString+0x8>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
	LCD_enuErrorStatus Loc_state =HAL_LCDenumERROR;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	8a 83       	std	Y+2, r24	; 0x02

	for(uinit8_t Loc_string_ieration=0;Copy_pchPattern[Loc_string_ieration];Loc_string_ieration++)
    145e:	19 82       	std	Y+1, r1	; 0x01
    1460:	0e c0       	rjmp	.+28     	; 0x147e <LCD_enuWriteString+0x34>
	{
			LCD_enuWriteCharacter(Copy_pchPattern[Loc_string_ieration]);
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	fc 01       	movw	r30, r24
    146e:	e2 0f       	add	r30, r18
    1470:	f3 1f       	adc	r31, r19
    1472:	80 81       	ld	r24, Z
    1474:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_enuWriteCharacter>
}
LCD_enuErrorStatus LCD_enuWriteString   (char* Copy_pchPattern)
{
	LCD_enuErrorStatus Loc_state =HAL_LCDenumERROR;

	for(uinit8_t Loc_string_ieration=0;Copy_pchPattern[Loc_string_ieration];Loc_string_ieration++)
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	fc 01       	movw	r30, r24
    148a:	e2 0f       	add	r30, r18
    148c:	f3 1f       	adc	r31, r19
    148e:	80 81       	ld	r24, Z
    1490:	88 23       	and	r24, r24
    1492:	39 f7       	brne	.-50     	; 0x1462 <LCD_enuWriteString+0x18>
	{
			LCD_enuWriteCharacter(Copy_pchPattern[Loc_string_ieration]);
	}

	return Loc_state;
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <LCD_enumClearCell>:
LCD_enuErrorStatus LCD_enumClearCell   (uinit8_t Copy_u8X, uinit8_t Copy_u8Y,uinit8_t Copy_numofcells)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <LCD_enumClearCell+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <LCD_enumClearCell+0x8>
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	6c 83       	std	Y+4, r22	; 0x04
    14b6:	4d 83       	std	Y+5, r20	; 0x05
	LCD_enuErrorStatus Loc_state = HAL_LCDenumOk;
    14b8:	1a 82       	std	Y+2, r1	; 0x02
	LCD_enuGotoDDRAM_XY(Copy_u8X,Copy_u8Y);
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	6c 81       	ldd	r22, Y+4	; 0x04
    14be:	0e 94 88 09 	call	0x1310	; 0x1310 <LCD_enuGotoDDRAM_XY>
	for(uinit8_t Loc_iterator=0;Loc_iterator<=Copy_numofcells;Copy_numofcells++)
    14c2:	19 82       	std	Y+1, r1	; 0x01
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <LCD_enumClearCell+0x2e>
	{
		LCD_enuWriteCharacter(' ');
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <LCD_enuWriteCharacter>
}
LCD_enuErrorStatus LCD_enumClearCell   (uinit8_t Copy_u8X, uinit8_t Copy_u8Y,uinit8_t Copy_numofcells)
{
	LCD_enuErrorStatus Loc_state = HAL_LCDenumOk;
	LCD_enuGotoDDRAM_XY(Copy_u8X,Copy_u8Y);
	for(uinit8_t Loc_iterator=0;Loc_iterator<=Copy_numofcells;Copy_numofcells++)
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	99 81       	ldd	r25, Y+1	; 0x01
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	89 17       	cp	r24, r25
    14d8:	b0 f7       	brcc	.-20     	; 0x14c6 <LCD_enumClearCell+0x22>
	{
		LCD_enuWriteCharacter(' ');
	}

	return Loc_state;
    14da:	8a 81       	ldd	r24, Y+2	; 0x02

}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <LCD_enumWriteHEX>:
LCD_enuErrorStatus LCD_enumWriteHEX   (int32__t Copy_u8DecimalNumber)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <LCD_enumWriteHEX+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <LCD_enumWriteHEX+0x8>
    14f4:	0f 92       	push	r0
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	9b 83       	std	Y+3, r25	; 0x03
    14fc:	8a 83       	std	Y+2, r24	; 0x02
	LCD_enuErrorStatus Loc_state = HAL_LCDenumOk;
    14fe:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8DecimalNumber == 0)
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	29 f4       	brne	.+10     	; 0x1512 <LCD_enumWriteHEX+0x26>
	{
		LCD_enuWriteNumber(0);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 bb 09 	call	0x1376	; 0x1376 <LCD_enuWriteNumber>
    1510:	19 c0       	rjmp	.+50     	; 0x1544 <LCD_enumWriteHEX+0x58>
	}
	else
	{
	  Copy_u8DecimalNumber/=16;
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	9b 81       	ldd	r25, Y+3	; 0x03
    1516:	9d 83       	std	Y+5, r25	; 0x05
    1518:	8c 83       	std	Y+4, r24	; 0x04
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	99 23       	and	r25, r25
    1520:	2c f4       	brge	.+10     	; 0x152c <LCD_enumWriteHEX+0x40>
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	0f 96       	adiw	r24, 0x0f	; 15
    1528:	9d 83       	std	Y+5, r25	; 0x05
    152a:	8c 83       	std	Y+4, r24	; 0x04
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	95 95       	asr	r25
    1532:	87 95       	ror	r24
    1534:	95 95       	asr	r25
    1536:	87 95       	ror	r24
    1538:	95 95       	asr	r25
    153a:	87 95       	ror	r24
    153c:	95 95       	asr	r25
    153e:	87 95       	ror	r24
    1540:	9b 83       	std	Y+3, r25	; 0x03
    1542:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Loc_state;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <LCD_enuDisplaySpecialPattern>:
LCD_enuErrorStatus LCD_enuDisplaySpecialPattern   (uinit8_t* Copy_pu8Pattern, uinit8_t Copy_u8CGRAMBlockNumber, uinit8_t Copy_u8X, uinit8_t Copy_u8Y)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <LCD_enuDisplaySpecialPattern+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <LCD_enuDisplaySpecialPattern+0x8>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <LCD_enuDisplaySpecialPattern+0xa>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9b 83       	std	Y+3, r25	; 0x03
    1566:	8a 83       	std	Y+2, r24	; 0x02
    1568:	6c 83       	std	Y+4, r22	; 0x04
    156a:	4d 83       	std	Y+5, r20	; 0x05
    156c:	2e 83       	std	Y+6, r18	; 0x06
	LCD_enuErrorStatus Loc_state =HAL_LCDenumERROR;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	89 83       	std	Y+1, r24	; 0x01
	return Loc_state;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
}
    1574:	26 96       	adiw	r28, 0x06	; 6
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <MDIO_SetPortDirection>:




MDIO_enumError_t MDIO_SetPortDirection (MDIO_enumPorts_t Copy_uinit8PortNum ,MDIO_enumConfig_t Copy_uinitPortConfig)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	2b 97       	sbiw	r28, 0x0b	; 11
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	8a 83       	std	Y+2, r24	; 0x02
    159c:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_enumError_t State;
	/*check on port num didnot exceed the max*/
	if((Copy_uinit8PortNum>4)|| (Copy_uinit8PortNum<0))
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	85 30       	cpi	r24, 0x05	; 5
    15a2:	18 f0       	brcs	.+6      	; 0x15aa <MDIO_SetPortDirection+0x24>
	{
		State = MDIO_enumWrongPort;
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	c1 c0       	rjmp	.+386    	; 0x172c <MDIO_SetPortDirection+0x1a6>
		
	}
	else
	{
		if((Copy_uinitPortConfig == MDIO_enumOutput_HIGH) || (Copy_uinitPortConfig == MDIO_enumOutput_LOW))
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <MDIO_SetPortDirection+0x30>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	88 23       	and	r24, r24
    15b4:	a1 f5       	brne	.+104    	; 0x161e <MDIO_SetPortDirection+0x98>
		{
			switch (Copy_uinit8PortNum)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3b 87       	std	Y+11, r19	; 0x0b
    15be:	2a 87       	std	Y+10, r18	; 0x0a
    15c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <MDIO_SetPortDirection+0x78>
    15ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    15cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <MDIO_SetPortDirection+0x58>
    15d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <MDIO_SetPortDirection+0x6e>
    15dc:	1e c0       	rjmp	.+60     	; 0x161a <MDIO_SetPortDirection+0x94>
    15de:	2a 85       	ldd	r18, Y+10	; 0x0a
    15e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <MDIO_SetPortDirection+0x82>
    15e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <MDIO_SetPortDirection+0x8c>
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <MDIO_SetPortDirection+0x94>
			{
				case MDIO_enumPortA : SET_REG(MDIO_DDRA);break;
    15f4:	ea e3       	ldi	r30, 0x3A	; 58
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	80 83       	st	Z, r24
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <MDIO_SetPortDirection+0x94>
				case MDIO_enumPortB : SET_REG(MDIO_DDRB);break;
    15fe:	e7 e3       	ldi	r30, 0x37	; 55
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	80 83       	st	Z, r24
    1606:	09 c0       	rjmp	.+18     	; 0x161a <MDIO_SetPortDirection+0x94>
				case MDIO_enumPortC : SET_REG(MDIO_DDRC);break;
    1608:	e4 e3       	ldi	r30, 0x34	; 52
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	80 83       	st	Z, r24
    1610:	04 c0       	rjmp	.+8      	; 0x161a <MDIO_SetPortDirection+0x94>
				case MDIO_enumPortD : SET_REG(MDIO_DDRD);break;
    1612:	e1 e3       	ldi	r30, 0x31	; 49
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8f ef       	ldi	r24, 0xFF	; 255
    1618:	80 83       	st	Z, r24
				default:/*error*/break;
			}
			State=MDIO_enumOk;
    161a:	19 82       	std	Y+1, r1	; 0x01
    161c:	87 c0       	rjmp	.+270    	; 0x172c <MDIO_SetPortDirection+0x1a6>
		}
		else if((Copy_uinitPortConfig == MDIO_enumInputInternalPU) ||(Copy_uinitPortConfig == MDIO_enumInputExternalPD))
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	21 f0       	breq	.+8      	; 0x162c <MDIO_SetPortDirection+0xa6>
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	83 30       	cpi	r24, 0x03	; 3
    1628:	09 f0       	breq	.+2      	; 0x162c <MDIO_SetPortDirection+0xa6>
    162a:	80 c0       	rjmp	.+256    	; 0x172c <MDIO_SetPortDirection+0x1a6>
		{
			switch(Copy_uinitPortConfig)
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	39 87       	std	Y+9, r19	; 0x09
    1634:	28 87       	std	Y+8, r18	; 0x08
    1636:	88 85       	ldd	r24, Y+8	; 0x08
    1638:	99 85       	ldd	r25, Y+9	; 0x09
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	91 05       	cpc	r25, r1
    163e:	39 f0       	breq	.+14     	; 0x164e <MDIO_SetPortDirection+0xc8>
    1640:	28 85       	ldd	r18, Y+8	; 0x08
    1642:	39 85       	ldd	r19, Y+9	; 0x09
    1644:	23 30       	cpi	r18, 0x03	; 3
    1646:	31 05       	cpc	r19, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <MDIO_SetPortDirection+0xc6>
    164a:	41 c0       	rjmp	.+130    	; 0x16ce <MDIO_SetPortDirection+0x148>
    164c:	6f c0       	rjmp	.+222    	; 0x172c <MDIO_SetPortDirection+0x1a6>
						{
							case  MDIO_enumInputInternalPU :
							{
								switch (Copy_uinit8PortNum)
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3f 83       	std	Y+7, r19	; 0x07
    1656:	2e 83       	std	Y+6, r18	; 0x06
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	91 05       	cpc	r25, r1
    1660:	e9 f0       	breq	.+58     	; 0x169c <MDIO_SetPortDirection+0x116>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <MDIO_SetPortDirection+0xf0>
    166c:	8e 81       	ldd	r24, Y+6	; 0x06
    166e:	9f 81       	ldd	r25, Y+7	; 0x07
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	61 f0       	breq	.+24     	; 0x168c <MDIO_SetPortDirection+0x106>
    1674:	2a c0       	rjmp	.+84     	; 0x16ca <MDIO_SetPortDirection+0x144>
    1676:	2e 81       	ldd	r18, Y+6	; 0x06
    1678:	3f 81       	ldd	r19, Y+7	; 0x07
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	b1 f0       	breq	.+44     	; 0x16ac <MDIO_SetPortDirection+0x126>
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	9f 81       	ldd	r25, Y+7	; 0x07
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	c9 f0       	breq	.+50     	; 0x16bc <MDIO_SetPortDirection+0x136>
    168a:	1f c0       	rjmp	.+62     	; 0x16ca <MDIO_SetPortDirection+0x144>
								{
									case MDIO_enumPortA : SET_REG(MDIO_PORTA);CLR_REG(MDIO_DDRA);break;
    168c:	eb e3       	ldi	r30, 0x3B	; 59
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	80 83       	st	Z, r24
    1694:	ea e3       	ldi	r30, 0x3A	; 58
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	10 82       	st	Z, r1
    169a:	17 c0       	rjmp	.+46     	; 0x16ca <MDIO_SetPortDirection+0x144>
									case MDIO_enumPortB : SET_REG(MDIO_PORTB);CLR_REG(MDIO_DDRA);break;
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	80 83       	st	Z, r24
    16a4:	ea e3       	ldi	r30, 0x3A	; 58
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	10 82       	st	Z, r1
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <MDIO_SetPortDirection+0x144>
									case MDIO_enumPortC : SET_REG(MDIO_PORTC);CLR_REG(MDIO_DDRA);break;
    16ac:	e5 e3       	ldi	r30, 0x35	; 53
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	80 83       	st	Z, r24
    16b4:	ea e3       	ldi	r30, 0x3A	; 58
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	10 82       	st	Z, r1
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <MDIO_SetPortDirection+0x144>
									case MDIO_enumPortD : SET_REG(MDIO_PORTD);CLR_REG(MDIO_DDRA);break;
    16bc:	e2 e3       	ldi	r30, 0x32	; 50
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	80 83       	st	Z, r24
    16c4:	ea e3       	ldi	r30, 0x3A	; 58
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	10 82       	st	Z, r1

			                     	default:/*error*/break;
			                      }
			                    State=MDIO_enumOk;
    16ca:	19 82       	std	Y+1, r1	; 0x01
    16cc:	2f c0       	rjmp	.+94     	; 0x172c <MDIO_SetPortDirection+0x1a6>
							}break;
							case  MDIO_enumInputExternalPD :
							{
								switch (Copy_uinit8PortNum)
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	3d 83       	std	Y+5, r19	; 0x05
    16d6:	2c 83       	std	Y+4, r18	; 0x04
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	c9 f0       	breq	.+50     	; 0x1714 <MDIO_SetPortDirection+0x18e>
    16e2:	2c 81       	ldd	r18, Y+4	; 0x04
    16e4:	3d 81       	ldd	r19, Y+5	; 0x05
    16e6:	22 30       	cpi	r18, 0x02	; 2
    16e8:	31 05       	cpc	r19, r1
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <MDIO_SetPortDirection+0x170>
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	61 f0       	breq	.+24     	; 0x170c <MDIO_SetPortDirection+0x186>
    16f4:	1a c0       	rjmp	.+52     	; 0x172a <MDIO_SetPortDirection+0x1a4>
    16f6:	2c 81       	ldd	r18, Y+4	; 0x04
    16f8:	3d 81       	ldd	r19, Y+5	; 0x05
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	71 f0       	breq	.+28     	; 0x171c <MDIO_SetPortDirection+0x196>
    1700:	8c 81       	ldd	r24, Y+4	; 0x04
    1702:	9d 81       	ldd	r25, Y+5	; 0x05
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	91 05       	cpc	r25, r1
    1708:	69 f0       	breq	.+26     	; 0x1724 <MDIO_SetPortDirection+0x19e>
    170a:	0f c0       	rjmp	.+30     	; 0x172a <MDIO_SetPortDirection+0x1a4>
								{
									case MDIO_enumPortA : CLR_REG(MDIO_DDRA);break;
    170c:	ea e3       	ldi	r30, 0x3A	; 58
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	10 82       	st	Z, r1
    1712:	0b c0       	rjmp	.+22     	; 0x172a <MDIO_SetPortDirection+0x1a4>
									case MDIO_enumPortB : CLR_REG(MDIO_DDRA);break;
    1714:	ea e3       	ldi	r30, 0x3A	; 58
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	10 82       	st	Z, r1
    171a:	07 c0       	rjmp	.+14     	; 0x172a <MDIO_SetPortDirection+0x1a4>
									case MDIO_enumPortC : CLR_REG(MDIO_DDRA);break;
    171c:	ea e3       	ldi	r30, 0x3A	; 58
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	10 82       	st	Z, r1
    1722:	03 c0       	rjmp	.+6      	; 0x172a <MDIO_SetPortDirection+0x1a4>
									case MDIO_enumPortD : CLR_REG(MDIO_DDRA);break;
    1724:	ea e3       	ldi	r30, 0x3A	; 58
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	10 82       	st	Z, r1

									default:/*error*/break;
								  }
								State=MDIO_enumOk;
    172a:	19 82       	std	Y+1, r1	; 0x01
							}break;
							default:/*error*/break;
		            }
	          }
	}
	State =MDIO_enumWrongConfig;
    172c:	84 e0       	ldi	r24, 0x04	; 4
    172e:	89 83       	std	Y+1, r24	; 0x01
	return State;
    1730:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1732:	2b 96       	adiw	r28, 0x0b	; 11
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <MDIO_SetPortValue>:
MDIO_enumError_t MDIO_SetPortValue     (MDIO_enumPorts_t Copy_uinit8PortNum ,MDIO_enumConfig_t Copy_uinit8LogicState)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	2b 97       	sbiw	r28, 0x0b	; 11
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	8a 83       	std	Y+2, r24	; 0x02
    175a:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_enumError_t State;
	if((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0))
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	85 30       	cpi	r24, 0x05	; 5
    1760:	18 f0       	brcs	.+6      	; 0x1768 <MDIO_SetPortValue+0x24>
	{
		State =MDIO_enumWrongPort;
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	d3 c0       	rjmp	.+422    	; 0x190e <MDIO_SetPortValue+0x1ca>
		
	}
	else
	{
		if(Copy_uinit8LogicState==MDIO_enumOutput_HIGH)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	a1 f5       	brne	.+104    	; 0x17d6 <MDIO_SetPortValue+0x92>
		{
			switch (Copy_uinit8PortNum)
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3b 87       	std	Y+11, r19	; 0x0b
    1776:	2a 87       	std	Y+10, r18	; 0x0a
    1778:	8a 85       	ldd	r24, Y+10	; 0x0a
    177a:	9b 85       	ldd	r25, Y+11	; 0x0b
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	d1 f0       	breq	.+52     	; 0x17b6 <MDIO_SetPortValue+0x72>
    1782:	2a 85       	ldd	r18, Y+10	; 0x0a
    1784:	3b 85       	ldd	r19, Y+11	; 0x0b
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	2c f4       	brge	.+10     	; 0x1796 <MDIO_SetPortValue+0x52>
    178c:	8a 85       	ldd	r24, Y+10	; 0x0a
    178e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	61 f0       	breq	.+24     	; 0x17ac <MDIO_SetPortValue+0x68>
    1794:	1e c0       	rjmp	.+60     	; 0x17d2 <MDIO_SetPortValue+0x8e>
    1796:	2a 85       	ldd	r18, Y+10	; 0x0a
    1798:	3b 85       	ldd	r19, Y+11	; 0x0b
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	81 f0       	breq	.+32     	; 0x17c0 <MDIO_SetPortValue+0x7c>
    17a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a4:	83 30       	cpi	r24, 0x03	; 3
    17a6:	91 05       	cpc	r25, r1
    17a8:	81 f0       	breq	.+32     	; 0x17ca <MDIO_SetPortValue+0x86>
    17aa:	13 c0       	rjmp	.+38     	; 0x17d2 <MDIO_SetPortValue+0x8e>
			{
				case MDIO_enumPortA : SET_REG(MDIO_PORTA);break;
    17ac:	eb e3       	ldi	r30, 0x3B	; 59
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8f ef       	ldi	r24, 0xFF	; 255
    17b2:	80 83       	st	Z, r24
    17b4:	0e c0       	rjmp	.+28     	; 0x17d2 <MDIO_SetPortValue+0x8e>
				case MDIO_enumPortB : SET_REG(MDIO_PORTB);break;
    17b6:	e8 e3       	ldi	r30, 0x38	; 56
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8f ef       	ldi	r24, 0xFF	; 255
    17bc:	80 83       	st	Z, r24
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <MDIO_SetPortValue+0x8e>
				case MDIO_enumPortC : SET_REG(MDIO_PORTC);break;
    17c0:	e5 e3       	ldi	r30, 0x35	; 53
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	80 83       	st	Z, r24
    17c8:	04 c0       	rjmp	.+8      	; 0x17d2 <MDIO_SetPortValue+0x8e>
				case MDIO_enumPortD : SET_REG(MDIO_PORTD);break;
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	80 83       	st	Z, r24
			}
			State=MDIO_enumOk;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	9c c0       	rjmp	.+312    	; 0x190e <MDIO_SetPortValue+0x1ca>
		}
		else if(Copy_uinit8LogicState==MDIO_enumOutput_LOW)
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	88 23       	and	r24, r24
    17da:	81 f5       	brne	.+96     	; 0x183c <MDIO_SetPortValue+0xf8>
		{
			switch (Copy_uinit8PortNum)
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	39 87       	std	Y+9, r19	; 0x09
    17e4:	28 87       	std	Y+8, r18	; 0x08
    17e6:	88 85       	ldd	r24, Y+8	; 0x08
    17e8:	99 85       	ldd	r25, Y+9	; 0x09
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	91 05       	cpc	r25, r1
    17ee:	c9 f0       	breq	.+50     	; 0x1822 <MDIO_SetPortValue+0xde>
    17f0:	28 85       	ldd	r18, Y+8	; 0x08
    17f2:	39 85       	ldd	r19, Y+9	; 0x09
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	2c f4       	brge	.+10     	; 0x1804 <MDIO_SetPortValue+0xc0>
    17fa:	88 85       	ldd	r24, Y+8	; 0x08
    17fc:	99 85       	ldd	r25, Y+9	; 0x09
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	61 f0       	breq	.+24     	; 0x181a <MDIO_SetPortValue+0xd6>
    1802:	1a c0       	rjmp	.+52     	; 0x1838 <MDIO_SetPortValue+0xf4>
    1804:	28 85       	ldd	r18, Y+8	; 0x08
    1806:	39 85       	ldd	r19, Y+9	; 0x09
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	71 f0       	breq	.+28     	; 0x182a <MDIO_SetPortValue+0xe6>
    180e:	88 85       	ldd	r24, Y+8	; 0x08
    1810:	99 85       	ldd	r25, Y+9	; 0x09
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	91 05       	cpc	r25, r1
    1816:	69 f0       	breq	.+26     	; 0x1832 <MDIO_SetPortValue+0xee>
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <MDIO_SetPortValue+0xf4>
			{
				case MDIO_enumPortA : CLR_REG(MDIO_PORTA);break;
    181a:	eb e3       	ldi	r30, 0x3B	; 59
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	10 82       	st	Z, r1
    1820:	0b c0       	rjmp	.+22     	; 0x1838 <MDIO_SetPortValue+0xf4>
				case MDIO_enumPortB : CLR_REG(MDIO_PORTB);break;
    1822:	e8 e3       	ldi	r30, 0x38	; 56
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	10 82       	st	Z, r1
    1828:	07 c0       	rjmp	.+14     	; 0x1838 <MDIO_SetPortValue+0xf4>
				case MDIO_enumPortC : CLR_REG(MDIO_PORTC);break;
    182a:	e5 e3       	ldi	r30, 0x35	; 53
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	10 82       	st	Z, r1
    1830:	03 c0       	rjmp	.+6      	; 0x1838 <MDIO_SetPortValue+0xf4>
				case MDIO_enumPortD : CLR_REG(MDIO_PORTD);break;
    1832:	e2 e3       	ldi	r30, 0x32	; 50
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	10 82       	st	Z, r1
			}
			State=MDIO_enumOk;
    1838:	19 82       	std	Y+1, r1	; 0x01
    183a:	69 c0       	rjmp	.+210    	; 0x190e <MDIO_SetPortValue+0x1ca>
		}
		else if(Copy_uinit8LogicState==MDIO_enumInputInternalPU)
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	a1 f5       	brne	.+104    	; 0x18aa <MDIO_SetPortValue+0x166>
		{
			switch (Copy_uinit8PortNum)
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3f 83       	std	Y+7, r19	; 0x07
    184a:	2e 83       	std	Y+6, r18	; 0x06
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	9f 81       	ldd	r25, Y+7	; 0x07
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	91 05       	cpc	r25, r1
    1854:	d1 f0       	breq	.+52     	; 0x188a <MDIO_SetPortValue+0x146>
    1856:	2e 81       	ldd	r18, Y+6	; 0x06
    1858:	3f 81       	ldd	r19, Y+7	; 0x07
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <MDIO_SetPortValue+0x126>
    1860:	8e 81       	ldd	r24, Y+6	; 0x06
    1862:	9f 81       	ldd	r25, Y+7	; 0x07
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	61 f0       	breq	.+24     	; 0x1880 <MDIO_SetPortValue+0x13c>
    1868:	1e c0       	rjmp	.+60     	; 0x18a6 <MDIO_SetPortValue+0x162>
    186a:	2e 81       	ldd	r18, Y+6	; 0x06
    186c:	3f 81       	ldd	r19, Y+7	; 0x07
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	81 f0       	breq	.+32     	; 0x1894 <MDIO_SetPortValue+0x150>
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	9f 81       	ldd	r25, Y+7	; 0x07
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	91 05       	cpc	r25, r1
    187c:	81 f0       	breq	.+32     	; 0x189e <MDIO_SetPortValue+0x15a>
    187e:	13 c0       	rjmp	.+38     	; 0x18a6 <MDIO_SetPortValue+0x162>
			{
				case MDIO_enumPortA : SET_REG(MDIO_PORTA);break;
    1880:	eb e3       	ldi	r30, 0x3B	; 59
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	80 83       	st	Z, r24
    1888:	0e c0       	rjmp	.+28     	; 0x18a6 <MDIO_SetPortValue+0x162>
				case MDIO_enumPortB : SET_REG(MDIO_PORTB);break;
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8f ef       	ldi	r24, 0xFF	; 255
    1890:	80 83       	st	Z, r24
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <MDIO_SetPortValue+0x162>
				case MDIO_enumPortC : SET_REG(MDIO_PORTC);break;
    1894:	e5 e3       	ldi	r30, 0x35	; 53
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	80 83       	st	Z, r24
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <MDIO_SetPortValue+0x162>
				case MDIO_enumPortD : SET_REG(MDIO_PORTD);break;
    189e:	e2 e3       	ldi	r30, 0x32	; 50
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	80 83       	st	Z, r24
			}
			State=MDIO_enumOk;
    18a6:	19 82       	std	Y+1, r1	; 0x01
    18a8:	32 c0       	rjmp	.+100    	; 0x190e <MDIO_SetPortValue+0x1ca>
		}
		else if(Copy_uinit8LogicState == MDIO_enumInputExternalPD)
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	79 f5       	brne	.+94     	; 0x190e <MDIO_SetPortValue+0x1ca>
		{
			switch (Copy_uinit8PortNum)
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3d 83       	std	Y+5, r19	; 0x05
    18b8:	2c 83       	std	Y+4, r18	; 0x04
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	c9 f0       	breq	.+50     	; 0x18f6 <MDIO_SetPortValue+0x1b2>
    18c4:	2c 81       	ldd	r18, Y+4	; 0x04
    18c6:	3d 81       	ldd	r19, Y+5	; 0x05
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <MDIO_SetPortValue+0x194>
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	61 f0       	breq	.+24     	; 0x18ee <MDIO_SetPortValue+0x1aa>
    18d6:	1a c0       	rjmp	.+52     	; 0x190c <MDIO_SetPortValue+0x1c8>
    18d8:	2c 81       	ldd	r18, Y+4	; 0x04
    18da:	3d 81       	ldd	r19, Y+5	; 0x05
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	71 f0       	breq	.+28     	; 0x18fe <MDIO_SetPortValue+0x1ba>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	69 f0       	breq	.+26     	; 0x1906 <MDIO_SetPortValue+0x1c2>
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <MDIO_SetPortValue+0x1c8>
			{
				case MDIO_enumPortA : CLR_REG(MDIO_PORTA);break;
    18ee:	eb e3       	ldi	r30, 0x3B	; 59
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	10 82       	st	Z, r1
    18f4:	0b c0       	rjmp	.+22     	; 0x190c <MDIO_SetPortValue+0x1c8>
				case MDIO_enumPortB : CLR_REG(MDIO_PORTB);break;
    18f6:	e8 e3       	ldi	r30, 0x38	; 56
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	10 82       	st	Z, r1
    18fc:	07 c0       	rjmp	.+14     	; 0x190c <MDIO_SetPortValue+0x1c8>
				case MDIO_enumPortC : CLR_REG(MDIO_PORTC);break;
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	10 82       	st	Z, r1
    1904:	03 c0       	rjmp	.+6      	; 0x190c <MDIO_SetPortValue+0x1c8>
				case MDIO_enumPortD : CLR_REG(MDIO_PORTD);break;
    1906:	e2 e3       	ldi	r30, 0x32	; 50
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	10 82       	st	Z, r1
			}
			State=MDIO_enumOk;
    190c:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	State = MDIO_enumWrongConfig;
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	89 83       	std	Y+1, r24	; 0x01
	return State;
    1912:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1914:	2b 96       	adiw	r28, 0x0b	; 11
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <MDIO_GetPortValue>:
MDIO_enumError_t MDIO_GetPortValue     (MDIO_enumPorts_t Copy_uinit8PortNum ,uinit8_t* Get_Puinit8_tPortValue)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <MDIO_GetPortValue+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <MDIO_GetPortValue+0x8>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <MDIO_GetPortValue+0xa>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	8a 83       	std	Y+2, r24	; 0x02
    1936:	7c 83       	std	Y+4, r23	; 0x04
    1938:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_enumError_t State;
	if((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0))
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	85 30       	cpi	r24, 0x05	; 5
    193e:	18 f0       	brcs	.+6      	; 0x1946 <MDIO_GetPortValue+0x20>
	{
		State = MDIO_enumWrongPort;
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	3e c0       	rjmp	.+124    	; 0x19c2 <MDIO_GetPortValue+0x9c>
		
	}
	else
	{
		switch (Copy_uinit8PortNum)
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3e 83       	std	Y+6, r19	; 0x06
    194e:	2d 83       	std	Y+5, r18	; 0x05
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	e1 f0       	breq	.+56     	; 0x1992 <MDIO_GetPortValue+0x6c>
    195a:	2d 81       	ldd	r18, Y+5	; 0x05
    195c:	3e 81       	ldd	r19, Y+6	; 0x06
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <MDIO_GetPortValue+0x48>
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	61 f0       	breq	.+24     	; 0x1984 <MDIO_GetPortValue+0x5e>
    196c:	27 c0       	rjmp	.+78     	; 0x19bc <MDIO_GetPortValue+0x96>
    196e:	2d 81       	ldd	r18, Y+5	; 0x05
    1970:	3e 81       	ldd	r19, Y+6	; 0x06
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	a1 f0       	breq	.+40     	; 0x19a0 <MDIO_GetPortValue+0x7a>
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	b1 f0       	breq	.+44     	; 0x19ae <MDIO_GetPortValue+0x88>
    1982:	1c c0       	rjmp	.+56     	; 0x19bc <MDIO_GetPortValue+0x96>
		{
			case MDIO_enumPortA    : *Get_Puinit8_tPortValue = MDIO_PINA ; break;
    1984:	e9 e3       	ldi	r30, 0x39	; 57
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	eb 81       	ldd	r30, Y+3	; 0x03
    198c:	fc 81       	ldd	r31, Y+4	; 0x04
    198e:	80 83       	st	Z, r24
    1990:	17 c0       	rjmp	.+46     	; 0x19c0 <MDIO_GetPortValue+0x9a>
			case MDIO_enumPortB    : *Get_Puinit8_tPortValue = MDIO_PINB ; break;
    1992:	e6 e3       	ldi	r30, 0x36	; 54
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	eb 81       	ldd	r30, Y+3	; 0x03
    199a:	fc 81       	ldd	r31, Y+4	; 0x04
    199c:	80 83       	st	Z, r24
    199e:	10 c0       	rjmp	.+32     	; 0x19c0 <MDIO_GetPortValue+0x9a>
			case MDIO_enumPortC    : *Get_Puinit8_tPortValue = MDIO_PINC ; break;
    19a0:	e3 e3       	ldi	r30, 0x33	; 51
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	eb 81       	ldd	r30, Y+3	; 0x03
    19a8:	fc 81       	ldd	r31, Y+4	; 0x04
    19aa:	80 83       	st	Z, r24
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <MDIO_GetPortValue+0x9a>
			case MDIO_enumPortD    : *Get_Puinit8_tPortValue = MDIO_PIND ; break;
    19ae:	e0 e3       	ldi	r30, 0x30	; 48
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	eb 81       	ldd	r30, Y+3	; 0x03
    19b6:	fc 81       	ldd	r31, Y+4	; 0x04
    19b8:	80 83       	st	Z, r24
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <MDIO_GetPortValue+0x9a>
			default :
			{
				State =MDIO_enumERRORValue;
    19bc:	85 e0       	ldi	r24, 0x05	; 5
    19be:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		State=MDIO_enumOk;
    19c0:	19 82       	std	Y+1, r1	; 0x01
	}

	return State;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
	

}
    19c4:	26 96       	adiw	r28, 0x06	; 6
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <MDIO_SetPinDirection>:

/*PIN CONFIG FUNCTIONS*/
MDIO_enumError_t MDIO_SetPinDirection  (MDIO_enumPorts_t Copy_uinit8PortNum ,MDIO_enumPins_t Copy_uinit8PinNum,MDIO_enumConfig_t Copy_uinitPortConfig)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	2c 97       	sbiw	r28, 0x0c	; 12
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	8a 83       	std	Y+2, r24	; 0x02
    19ec:	6b 83       	std	Y+3, r22	; 0x03
    19ee:	4c 83       	std	Y+4, r20	; 0x04
	
	MDIO_enumError_t State;
	/*check on port and pin num didnot exceed the max*/
	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	85 30       	cpi	r24, 0x05	; 5
    19f4:	30 f0       	brcs	.+12     	; 0x1a02 <MDIO_SetPinDirection+0x2c>
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	89 30       	cpi	r24, 0x09	; 9
    19fa:	18 f0       	brcs	.+6      	; 0x1a02 <MDIO_SetPinDirection+0x2c>
	{
		State =MDIO_enumWrongConfig;
    19fc:	84 e0       	ldi	r24, 0x04	; 4
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	ce c1       	rjmp	.+924    	; 0x1d9e <MDIO_SetPinDirection+0x3c8>
		
	}
	else
	{
		if((Copy_uinitPortConfig==MDIO_enumOutput_HIGH) ||(Copy_uinitPortConfig==MDIO_enumOutput_LOW))
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	21 f0       	breq	.+8      	; 0x1a10 <MDIO_SetPinDirection+0x3a>
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	88 23       	and	r24, r24
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <MDIO_SetPinDirection+0x3a>
    1a0e:	73 c0       	rjmp	.+230    	; 0x1af6 <MDIO_SetPinDirection+0x120>
		{
			switch (Copy_uinit8PortNum)
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3c 87       	std	Y+12, r19	; 0x0c
    1a18:	2b 87       	std	Y+11, r18	; 0x0b
    1a1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 05       	cpc	r25, r1
    1a22:	49 f1       	breq	.+82     	; 0x1a76 <MDIO_SetPinDirection+0xa0>
    1a24:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a26:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <MDIO_SetPinDirection+0x62>
    1a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a30:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	61 f0       	breq	.+24     	; 0x1a4e <MDIO_SetPinDirection+0x78>
    1a36:	5b c0       	rjmp	.+182    	; 0x1aee <MDIO_SetPinDirection+0x118>
    1a38:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a3a:	3c 85       	ldd	r19, Y+12	; 0x0c
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	71 f1       	breq	.+92     	; 0x1a9e <MDIO_SetPinDirection+0xc8>
    1a42:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a44:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	e9 f1       	breq	.+122    	; 0x1ac6 <MDIO_SetPinDirection+0xf0>
    1a4c:	50 c0       	rjmp	.+160    	; 0x1aee <MDIO_SetPinDirection+0x118>
			{
				case MDIO_enumPortA : SET_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
    1a4e:	aa e3       	ldi	r26, 0x3A	; 58
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ea e3       	ldi	r30, 0x3A	; 58
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <MDIO_SetPinDirection+0x96>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <MDIO_SetPinDirection+0x92>
    1a70:	84 2b       	or	r24, r20
    1a72:	8c 93       	st	X, r24
    1a74:	3e c0       	rjmp	.+124    	; 0x1af2 <MDIO_SetPinDirection+0x11c>
				case MDIO_enumPortB : SET_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
    1a76:	a7 e3       	ldi	r26, 0x37	; 55
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e7 e3       	ldi	r30, 0x37	; 55
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <MDIO_SetPinDirection+0xbe>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <MDIO_SetPinDirection+0xba>
    1a98:	84 2b       	or	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	2a c0       	rjmp	.+84     	; 0x1af2 <MDIO_SetPinDirection+0x11c>
				case MDIO_enumPortC : SET_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
    1a9e:	a4 e3       	ldi	r26, 0x34	; 52
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e4 e3       	ldi	r30, 0x34	; 52
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <MDIO_SetPinDirection+0xe6>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <MDIO_SetPinDirection+0xe2>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	16 c0       	rjmp	.+44     	; 0x1af2 <MDIO_SetPinDirection+0x11c>
				case MDIO_enumPortD : SET_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
    1ac6:	a1 e3       	ldi	r26, 0x31	; 49
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e1 e3       	ldi	r30, 0x31	; 49
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <MDIO_SetPinDirection+0x10e>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <MDIO_SetPinDirection+0x10a>
    1ae8:	84 2b       	or	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <MDIO_SetPinDirection+0x11c>
				default :
				{
					State =MDIO_enumWrongConfig;
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			State=MDIO_enumOk;
    1af2:	19 82       	std	Y+1, r1	; 0x01
    1af4:	54 c1       	rjmp	.+680    	; 0x1d9e <MDIO_SetPinDirection+0x3c8>
		}
		else if((Copy_uinitPortConfig==MDIO_enumInputInternalPU) ||(Copy_uinitPortConfig==MDIO_enumInputExternalPD))
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	21 f0       	breq	.+8      	; 0x1b04 <MDIO_SetPinDirection+0x12e>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	83 30       	cpi	r24, 0x03	; 3
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <MDIO_SetPinDirection+0x12e>
    1b02:	4b c1       	rjmp	.+662    	; 0x1d9a <MDIO_SetPinDirection+0x3c4>
		{
			switch(Copy_uinitPortConfig)
    1b04:	8c 81       	ldd	r24, Y+4	; 0x04
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3a 87       	std	Y+10, r19	; 0x0a
    1b0c:	29 87       	std	Y+9, r18	; 0x09
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	91 05       	cpc	r25, r1
    1b16:	39 f0       	breq	.+14     	; 0x1b26 <MDIO_SetPinDirection+0x150>
    1b18:	29 85       	ldd	r18, Y+9	; 0x09
    1b1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b1c:	23 30       	cpi	r18, 0x03	; 3
    1b1e:	31 05       	cpc	r19, r1
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <MDIO_SetPinDirection+0x14e>
    1b22:	c3 c0       	rjmp	.+390    	; 0x1caa <MDIO_SetPinDirection+0x2d4>
    1b24:	3c c1       	rjmp	.+632    	; 0x1d9e <MDIO_SetPinDirection+0x3c8>
			{
				case  MDIO_enumInputInternalPU :
				{
					switch (Copy_uinit8PortNum)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	38 87       	std	Y+8, r19	; 0x08
    1b2e:	2f 83       	std	Y+7, r18	; 0x07
    1b30:	8f 81       	ldd	r24, Y+7	; 0x07
    1b32:	98 85       	ldd	r25, Y+8	; 0x08
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	91 05       	cpc	r25, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <MDIO_SetPinDirection+0x166>
    1b3a:	3e c0       	rjmp	.+124    	; 0x1bb8 <MDIO_SetPinDirection+0x1e2>
    1b3c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b3e:	38 85       	ldd	r19, Y+8	; 0x08
    1b40:	22 30       	cpi	r18, 0x02	; 2
    1b42:	31 05       	cpc	r19, r1
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <MDIO_SetPinDirection+0x17a>
    1b46:	8f 81       	ldd	r24, Y+7	; 0x07
    1b48:	98 85       	ldd	r25, Y+8	; 0x08
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	71 f0       	breq	.+28     	; 0x1b6a <MDIO_SetPinDirection+0x194>
    1b4e:	a9 c0       	rjmp	.+338    	; 0x1ca2 <MDIO_SetPinDirection+0x2cc>
    1b50:	2f 81       	ldd	r18, Y+7	; 0x07
    1b52:	38 85       	ldd	r19, Y+8	; 0x08
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <MDIO_SetPinDirection+0x186>
    1b5a:	55 c0       	rjmp	.+170    	; 0x1c06 <MDIO_SetPinDirection+0x230>
    1b5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5e:	98 85       	ldd	r25, Y+8	; 0x08
    1b60:	83 30       	cpi	r24, 0x03	; 3
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <MDIO_SetPinDirection+0x192>
    1b66:	76 c0       	rjmp	.+236    	; 0x1c54 <MDIO_SetPinDirection+0x27e>
    1b68:	9c c0       	rjmp	.+312    	; 0x1ca2 <MDIO_SetPinDirection+0x2cc>
					{
						case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);CLR_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
    1b6a:	ab e3       	ldi	r26, 0x3B	; 59
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	eb e3       	ldi	r30, 0x3B	; 59
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <MDIO_SetPinDirection+0x1b0>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	2a 95       	dec	r18
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <MDIO_SetPinDirection+0x1ac>
    1b8a:	84 2b       	or	r24, r20
    1b8c:	8c 93       	st	X, r24
    1b8e:	aa e3       	ldi	r26, 0x3A	; 58
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ea e3       	ldi	r30, 0x3A	; 58
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <MDIO_SetPinDirection+0x1d6>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <MDIO_SetPinDirection+0x1d2>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	77 c0       	rjmp	.+238    	; 0x1ca6 <MDIO_SetPinDirection+0x2d0>
						case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);CLR_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
    1bb8:	a8 e3       	ldi	r26, 0x38	; 56
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e8 e3       	ldi	r30, 0x38	; 56
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <MDIO_SetPinDirection+0x1fe>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	2a 95       	dec	r18
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <MDIO_SetPinDirection+0x1fa>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	a7 e3       	ldi	r26, 0x37	; 55
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e7 e3       	ldi	r30, 0x37	; 55
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <MDIO_SetPinDirection+0x224>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <MDIO_SetPinDirection+0x220>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	50 c0       	rjmp	.+160    	; 0x1ca6 <MDIO_SetPinDirection+0x2d0>
						case MDIO_enumPortC : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);CLR_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
    1c06:	a5 e3       	ldi	r26, 0x35	; 53
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e3       	ldi	r30, 0x35	; 53
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <MDIO_SetPinDirection+0x24c>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	2a 95       	dec	r18
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <MDIO_SetPinDirection+0x248>
    1c26:	84 2b       	or	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	a4 e3       	ldi	r26, 0x34	; 52
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e4 e3       	ldi	r30, 0x34	; 52
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <MDIO_SetPinDirection+0x272>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <MDIO_SetPinDirection+0x26e>
    1c4c:	80 95       	com	r24
    1c4e:	84 23       	and	r24, r20
    1c50:	8c 93       	st	X, r24
    1c52:	29 c0       	rjmp	.+82     	; 0x1ca6 <MDIO_SetPinDirection+0x2d0>
						case MDIO_enumPortD : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);CLR_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
    1c54:	a2 e3       	ldi	r26, 0x32	; 50
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e2 e3       	ldi	r30, 0x32	; 50
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <MDIO_SetPinDirection+0x29a>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	2a 95       	dec	r18
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <MDIO_SetPinDirection+0x296>
    1c74:	84 2b       	or	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	a1 e3       	ldi	r26, 0x31	; 49
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e1 e3       	ldi	r30, 0x31	; 49
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	48 2f       	mov	r20, r24
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 2e       	mov	r0, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <MDIO_SetPinDirection+0x2c0>
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <MDIO_SetPinDirection+0x2bc>
    1c9a:	80 95       	com	r24
    1c9c:	84 23       	and	r24, r20
    1c9e:	8c 93       	st	X, r24
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <MDIO_SetPinDirection+0x2d0>
						default :
						{
							State =MDIO_enumWrongConfig;
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	89 83       	std	Y+1, r24	; 0x01
						}
					}
					State=MDIO_enumOk;
    1ca6:	19 82       	std	Y+1, r1	; 0x01
    1ca8:	7a c0       	rjmp	.+244    	; 0x1d9e <MDIO_SetPinDirection+0x3c8>
				}break;
				case  MDIO_enumInputExternalPD :
				{
					switch (Copy_uinit8PortNum)
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3e 83       	std	Y+6, r19	; 0x06
    1cb2:	2d 83       	std	Y+5, r18	; 0x05
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	91 05       	cpc	r25, r1
    1cbc:	59 f1       	breq	.+86     	; 0x1d14 <MDIO_SetPinDirection+0x33e>
    1cbe:	2d 81       	ldd	r18, Y+5	; 0x05
    1cc0:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc2:	22 30       	cpi	r18, 0x02	; 2
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <MDIO_SetPinDirection+0x2fc>
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	69 f0       	breq	.+26     	; 0x1cea <MDIO_SetPinDirection+0x314>
    1cd0:	60 c0       	rjmp	.+192    	; 0x1d92 <MDIO_SetPinDirection+0x3bc>
    1cd2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cd4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	89 f1       	breq	.+98     	; 0x1d3e <MDIO_SetPinDirection+0x368>
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	83 30       	cpi	r24, 0x03	; 3
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <MDIO_SetPinDirection+0x312>
    1ce6:	40 c0       	rjmp	.+128    	; 0x1d68 <MDIO_SetPinDirection+0x392>
    1ce8:	54 c0       	rjmp	.+168    	; 0x1d92 <MDIO_SetPinDirection+0x3bc>
						{
							case MDIO_enumPortA : CLR_BIT(MDIO_DDRA,Copy_uinit8PinNum);break;
    1cea:	aa e3       	ldi	r26, 0x3A	; 58
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ea e3       	ldi	r30, 0x3A	; 58
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <MDIO_SetPinDirection+0x332>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <MDIO_SetPinDirection+0x32e>
    1d0c:	80 95       	com	r24
    1d0e:	84 23       	and	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	41 c0       	rjmp	.+130    	; 0x1d96 <MDIO_SetPinDirection+0x3c0>
							case MDIO_enumPortB : CLR_BIT(MDIO_DDRB,Copy_uinit8PinNum);break;
    1d14:	a7 e3       	ldi	r26, 0x37	; 55
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e7 e3       	ldi	r30, 0x37	; 55
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <MDIO_SetPinDirection+0x35c>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <MDIO_SetPinDirection+0x358>
    1d36:	80 95       	com	r24
    1d38:	84 23       	and	r24, r20
    1d3a:	8c 93       	st	X, r24
    1d3c:	2c c0       	rjmp	.+88     	; 0x1d96 <MDIO_SetPinDirection+0x3c0>
							case MDIO_enumPortC : CLR_BIT(MDIO_DDRC,Copy_uinit8PinNum);break;
    1d3e:	a4 e3       	ldi	r26, 0x34	; 52
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e4 e3       	ldi	r30, 0x34	; 52
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	48 2f       	mov	r20, r24
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 2e       	mov	r0, r18
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <MDIO_SetPinDirection+0x386>
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	0a 94       	dec	r0
    1d5e:	e2 f7       	brpl	.-8      	; 0x1d58 <MDIO_SetPinDirection+0x382>
    1d60:	80 95       	com	r24
    1d62:	84 23       	and	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	17 c0       	rjmp	.+46     	; 0x1d96 <MDIO_SetPinDirection+0x3c0>
							case MDIO_enumPortD : CLR_BIT(MDIO_DDRD,Copy_uinit8PinNum);break;
    1d68:	a1 e3       	ldi	r26, 0x31	; 49
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e1 e3       	ldi	r30, 0x31	; 49
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <MDIO_SetPinDirection+0x3b0>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <MDIO_SetPinDirection+0x3ac>
    1d8a:	80 95       	com	r24
    1d8c:	84 23       	and	r24, r20
    1d8e:	8c 93       	st	X, r24
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <MDIO_SetPinDirection+0x3c0>
							default :
							{
								State =MDIO_enumWrongConfig;
    1d92:	84 e0       	ldi	r24, 0x04	; 4
    1d94:	89 83       	std	Y+1, r24	; 0x01
							}
						}
						State=MDIO_enumOk;
    1d96:	19 82       	std	Y+1, r1	; 0x01
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <MDIO_SetPinDirection+0x3c8>

		}
		else
		{

			State =MDIO_enumWrongConfig;
    1d9a:	84 e0       	ldi	r24, 0x04	; 4
    1d9c:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return State;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1da0:	2c 96       	adiw	r28, 0x0c	; 12
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <MDIO_SetPinValue>:
MDIO_enumError_t MDIO_SetPinValue      (MDIO_enumPorts_t Copy_uinit8PortNum ,MDIO_enumPins_t Copy_uinit8PinNum,MDIO_enumConfig_t Copy_uinit8LogicState)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	2c 97       	sbiw	r28, 0x0c	; 12
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	6b 83       	std	Y+3, r22	; 0x03
    1dca:	4c 83       	std	Y+4, r20	; 0x04
	MDIO_enumError_t State;
	/*check on port and pin num didnot exceed the max*/
	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	85 30       	cpi	r24, 0x05	; 5
    1dd0:	30 f0       	brcs	.+12     	; 0x1dde <MDIO_SetPinValue+0x2c>
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	89 30       	cpi	r24, 0x09	; 9
    1dd6:	18 f0       	brcs	.+6      	; 0x1dde <MDIO_SetPinValue+0x2c>
	{
		State =MDIO_enumWrongConfig;
    1dd8:	84 e0       	ldi	r24, 0x04	; 4
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	e8 c1       	rjmp	.+976    	; 0x21ae <MDIO_SetPinValue+0x3fc>
		
	}
	else
	{
		if(Copy_uinit8LogicState==MDIO_enumOutput_HIGH)
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <MDIO_SetPinValue+0x34>
    1de4:	73 c0       	rjmp	.+230    	; 0x1ecc <MDIO_SetPinValue+0x11a>
		{
			switch (Copy_uinit8PortNum)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3c 87       	std	Y+12, r19	; 0x0c
    1dee:	2b 87       	std	Y+11, r18	; 0x0b
    1df0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1df2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	49 f1       	breq	.+82     	; 0x1e4c <MDIO_SetPinValue+0x9a>
    1dfa:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dfc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <MDIO_SetPinValue+0x5c>
    1e04:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e06:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <MDIO_SetPinValue+0x72>
    1e0c:	5b c0       	rjmp	.+182    	; 0x1ec4 <MDIO_SetPinValue+0x112>
    1e0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e10:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	71 f1       	breq	.+92     	; 0x1e74 <MDIO_SetPinValue+0xc2>
    1e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	91 05       	cpc	r25, r1
    1e20:	e9 f1       	breq	.+122    	; 0x1e9c <MDIO_SetPinValue+0xea>
    1e22:	50 c0       	rjmp	.+160    	; 0x1ec4 <MDIO_SetPinValue+0x112>
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
    1e24:	ab e3       	ldi	r26, 0x3B	; 59
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	eb e3       	ldi	r30, 0x3B	; 59
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <MDIO_SetPinValue+0x90>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <MDIO_SetPinValue+0x8c>
    1e46:	84 2b       	or	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	3e c0       	rjmp	.+124    	; 0x1ec8 <MDIO_SetPinValue+0x116>
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
    1e4c:	a8 e3       	ldi	r26, 0x38	; 56
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e8 e3       	ldi	r30, 0x38	; 56
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <MDIO_SetPinValue+0xb8>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <MDIO_SetPinValue+0xb4>
    1e6e:	84 2b       	or	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	2a c0       	rjmp	.+84     	; 0x1ec8 <MDIO_SetPinValue+0x116>
				case MDIO_enumPortC : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
    1e74:	a5 e3       	ldi	r26, 0x35	; 53
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e3       	ldi	r30, 0x35	; 53
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <MDIO_SetPinValue+0xe0>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <MDIO_SetPinValue+0xdc>
    1e96:	84 2b       	or	r24, r20
    1e98:	8c 93       	st	X, r24
    1e9a:	16 c0       	rjmp	.+44     	; 0x1ec8 <MDIO_SetPinValue+0x116>
				case MDIO_enumPortD : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
    1e9c:	a2 e3       	ldi	r26, 0x32	; 50
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e2 e3       	ldi	r30, 0x32	; 50
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <MDIO_SetPinValue+0x108>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <MDIO_SetPinValue+0x104>
    1ebe:	84 2b       	or	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <MDIO_SetPinValue+0x116>
				default :
				{
					State =MDIO_enumWrongConfig;
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			State=MDIO_enumOk;
    1ec8:	19 82       	std	Y+1, r1	; 0x01
    1eca:	71 c1       	rjmp	.+738    	; 0x21ae <MDIO_SetPinValue+0x3fc>
		}
		else if(Copy_uinit8LogicState==MDIO_enumOutput_LOW)
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	88 23       	and	r24, r24
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <MDIO_SetPinValue+0x122>
    1ed2:	78 c0       	rjmp	.+240    	; 0x1fc4 <MDIO_SetPinValue+0x212>
		{
			switch (Copy_uinit8PortNum)
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	3a 87       	std	Y+10, r19	; 0x0a
    1edc:	29 87       	std	Y+9, r18	; 0x09
    1ede:	89 85       	ldd	r24, Y+9	; 0x09
    1ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	59 f1       	breq	.+86     	; 0x1f3e <MDIO_SetPinValue+0x18c>
    1ee8:	29 85       	ldd	r18, Y+9	; 0x09
    1eea:	3a 85       	ldd	r19, Y+10	; 0x0a
    1eec:	22 30       	cpi	r18, 0x02	; 2
    1eee:	31 05       	cpc	r19, r1
    1ef0:	2c f4       	brge	.+10     	; 0x1efc <MDIO_SetPinValue+0x14a>
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f0       	breq	.+26     	; 0x1f14 <MDIO_SetPinValue+0x162>
    1efa:	60 c0       	rjmp	.+192    	; 0x1fbc <MDIO_SetPinValue+0x20a>
    1efc:	29 85       	ldd	r18, Y+9	; 0x09
    1efe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f00:	22 30       	cpi	r18, 0x02	; 2
    1f02:	31 05       	cpc	r19, r1
    1f04:	89 f1       	breq	.+98     	; 0x1f68 <MDIO_SetPinValue+0x1b6>
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	83 30       	cpi	r24, 0x03	; 3
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <MDIO_SetPinValue+0x160>
    1f10:	40 c0       	rjmp	.+128    	; 0x1f92 <MDIO_SetPinValue+0x1e0>
    1f12:	54 c0       	rjmp	.+168    	; 0x1fbc <MDIO_SetPinValue+0x20a>
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
    1f14:	ab e3       	ldi	r26, 0x3B	; 59
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	eb e3       	ldi	r30, 0x3B	; 59
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <MDIO_SetPinValue+0x180>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <MDIO_SetPinValue+0x17c>
    1f36:	80 95       	com	r24
    1f38:	84 23       	and	r24, r20
    1f3a:	8c 93       	st	X, r24
    1f3c:	41 c0       	rjmp	.+130    	; 0x1fc0 <MDIO_SetPinValue+0x20e>
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
    1f3e:	a8 e3       	ldi	r26, 0x38	; 56
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e8 e3       	ldi	r30, 0x38	; 56
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	48 2f       	mov	r20, r24
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	02 2e       	mov	r0, r18
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <MDIO_SetPinValue+0x1aa>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <MDIO_SetPinValue+0x1a6>
    1f60:	80 95       	com	r24
    1f62:	84 23       	and	r24, r20
    1f64:	8c 93       	st	X, r24
    1f66:	2c c0       	rjmp	.+88     	; 0x1fc0 <MDIO_SetPinValue+0x20e>
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
    1f68:	a5 e3       	ldi	r26, 0x35	; 53
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e5 e3       	ldi	r30, 0x35	; 53
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	48 2f       	mov	r20, r24
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	02 2e       	mov	r0, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <MDIO_SetPinValue+0x1d4>
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	0a 94       	dec	r0
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <MDIO_SetPinValue+0x1d0>
    1f8a:	80 95       	com	r24
    1f8c:	84 23       	and	r24, r20
    1f8e:	8c 93       	st	X, r24
    1f90:	17 c0       	rjmp	.+46     	; 0x1fc0 <MDIO_SetPinValue+0x20e>
				case MDIO_enumPortD : CLR_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
    1f92:	a2 e3       	ldi	r26, 0x32	; 50
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e2 e3       	ldi	r30, 0x32	; 50
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <MDIO_SetPinValue+0x1fe>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <MDIO_SetPinValue+0x1fa>
    1fb4:	80 95       	com	r24
    1fb6:	84 23       	and	r24, r20
    1fb8:	8c 93       	st	X, r24
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <MDIO_SetPinValue+0x20e>
				default :
				{
					State =MDIO_enumWrongConfig;
    1fbc:	84 e0       	ldi	r24, 0x04	; 4
    1fbe:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			State=MDIO_enumOk;
    1fc0:	19 82       	std	Y+1, r1	; 0x01
    1fc2:	f5 c0       	rjmp	.+490    	; 0x21ae <MDIO_SetPinValue+0x3fc>
		}
		else if(Copy_uinit8LogicState==MDIO_enumInputInternalPU)
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <MDIO_SetPinValue+0x21a>
    1fca:	73 c0       	rjmp	.+230    	; 0x20b2 <MDIO_SetPinValue+0x300>
		{
			switch (Copy_uinit8PortNum)
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	38 87       	std	Y+8, r19	; 0x08
    1fd4:	2f 83       	std	Y+7, r18	; 0x07
    1fd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd8:	98 85       	ldd	r25, Y+8	; 0x08
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	91 05       	cpc	r25, r1
    1fde:	49 f1       	breq	.+82     	; 0x2032 <MDIO_SetPinValue+0x280>
    1fe0:	2f 81       	ldd	r18, Y+7	; 0x07
    1fe2:	38 85       	ldd	r19, Y+8	; 0x08
    1fe4:	22 30       	cpi	r18, 0x02	; 2
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <MDIO_SetPinValue+0x242>
    1fea:	8f 81       	ldd	r24, Y+7	; 0x07
    1fec:	98 85       	ldd	r25, Y+8	; 0x08
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	61 f0       	breq	.+24     	; 0x200a <MDIO_SetPinValue+0x258>
    1ff2:	5b c0       	rjmp	.+182    	; 0x20aa <MDIO_SetPinValue+0x2f8>
    1ff4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ff6:	38 85       	ldd	r19, Y+8	; 0x08
    1ff8:	22 30       	cpi	r18, 0x02	; 2
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	71 f1       	breq	.+92     	; 0x205a <MDIO_SetPinValue+0x2a8>
    1ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    2000:	98 85       	ldd	r25, Y+8	; 0x08
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	91 05       	cpc	r25, r1
    2006:	e9 f1       	breq	.+122    	; 0x2082 <MDIO_SetPinValue+0x2d0>
    2008:	50 c0       	rjmp	.+160    	; 0x20aa <MDIO_SetPinValue+0x2f8>
			{
				case MDIO_enumPortA : SET_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
    200a:	ab e3       	ldi	r26, 0x3B	; 59
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	eb e3       	ldi	r30, 0x3B	; 59
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	48 2f       	mov	r20, r24
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	02 2e       	mov	r0, r18
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <MDIO_SetPinValue+0x276>
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	0a 94       	dec	r0
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <MDIO_SetPinValue+0x272>
    202c:	84 2b       	or	r24, r20
    202e:	8c 93       	st	X, r24
    2030:	3e c0       	rjmp	.+124    	; 0x20ae <MDIO_SetPinValue+0x2fc>
				case MDIO_enumPortB : SET_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
    2032:	a8 e3       	ldi	r26, 0x38	; 56
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e8 e3       	ldi	r30, 0x38	; 56
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <MDIO_SetPinValue+0x29e>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <MDIO_SetPinValue+0x29a>
    2054:	84 2b       	or	r24, r20
    2056:	8c 93       	st	X, r24
    2058:	2a c0       	rjmp	.+84     	; 0x20ae <MDIO_SetPinValue+0x2fc>
				case MDIO_enumPortC : SET_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
    205a:	a5 e3       	ldi	r26, 0x35	; 53
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e5 e3       	ldi	r30, 0x35	; 53
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <MDIO_SetPinValue+0x2c6>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <MDIO_SetPinValue+0x2c2>
    207c:	84 2b       	or	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	16 c0       	rjmp	.+44     	; 0x20ae <MDIO_SetPinValue+0x2fc>
				case MDIO_enumPortD : SET_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
    2082:	a2 e3       	ldi	r26, 0x32	; 50
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e2 e3       	ldi	r30, 0x32	; 50
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <MDIO_SetPinValue+0x2ee>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <MDIO_SetPinValue+0x2ea>
    20a4:	84 2b       	or	r24, r20
    20a6:	8c 93       	st	X, r24
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <MDIO_SetPinValue+0x2fc>
				default :
				{
					State =MDIO_enumWrongConfig;
    20aa:	84 e0       	ldi	r24, 0x04	; 4
    20ac:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			State=MDIO_enumOk;
    20ae:	19 82       	std	Y+1, r1	; 0x01
    20b0:	7e c0       	rjmp	.+252    	; 0x21ae <MDIO_SetPinValue+0x3fc>
		}
		else if(Copy_uinit8LogicState==MDIO_enumInputExternalPD)
    20b2:	8c 81       	ldd	r24, Y+4	; 0x04
    20b4:	83 30       	cpi	r24, 0x03	; 3
    20b6:	09 f0       	breq	.+2      	; 0x20ba <MDIO_SetPinValue+0x308>
    20b8:	78 c0       	rjmp	.+240    	; 0x21aa <MDIO_SetPinValue+0x3f8>
		{
			switch (Copy_uinit8PortNum)
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	3e 83       	std	Y+6, r19	; 0x06
    20c2:	2d 83       	std	Y+5, r18	; 0x05
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	9e 81       	ldd	r25, Y+6	; 0x06
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	91 05       	cpc	r25, r1
    20cc:	59 f1       	breq	.+86     	; 0x2124 <MDIO_SetPinValue+0x372>
    20ce:	2d 81       	ldd	r18, Y+5	; 0x05
    20d0:	3e 81       	ldd	r19, Y+6	; 0x06
    20d2:	22 30       	cpi	r18, 0x02	; 2
    20d4:	31 05       	cpc	r19, r1
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <MDIO_SetPinValue+0x330>
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f0       	breq	.+26     	; 0x20fa <MDIO_SetPinValue+0x348>
    20e0:	60 c0       	rjmp	.+192    	; 0x21a2 <MDIO_SetPinValue+0x3f0>
    20e2:	2d 81       	ldd	r18, Y+5	; 0x05
    20e4:	3e 81       	ldd	r19, Y+6	; 0x06
    20e6:	22 30       	cpi	r18, 0x02	; 2
    20e8:	31 05       	cpc	r19, r1
    20ea:	89 f1       	breq	.+98     	; 0x214e <MDIO_SetPinValue+0x39c>
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	83 30       	cpi	r24, 0x03	; 3
    20f2:	91 05       	cpc	r25, r1
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <MDIO_SetPinValue+0x346>
    20f6:	40 c0       	rjmp	.+128    	; 0x2178 <MDIO_SetPinValue+0x3c6>
    20f8:	54 c0       	rjmp	.+168    	; 0x21a2 <MDIO_SetPinValue+0x3f0>
			{
				case MDIO_enumPortA : CLR_BIT(MDIO_PORTA,Copy_uinit8PinNum);break;
    20fa:	ab e3       	ldi	r26, 0x3B	; 59
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e3       	ldi	r30, 0x3B	; 59
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	48 2f       	mov	r20, r24
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 2e       	mov	r0, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <MDIO_SetPinValue+0x366>
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <MDIO_SetPinValue+0x362>
    211c:	80 95       	com	r24
    211e:	84 23       	and	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	41 c0       	rjmp	.+130    	; 0x21a6 <MDIO_SetPinValue+0x3f4>
				case MDIO_enumPortB : CLR_BIT(MDIO_PORTB,Copy_uinit8PinNum);break;
    2124:	a8 e3       	ldi	r26, 0x38	; 56
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e8 e3       	ldi	r30, 0x38	; 56
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	48 2f       	mov	r20, r24
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <MDIO_SetPinValue+0x390>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <MDIO_SetPinValue+0x38c>
    2146:	80 95       	com	r24
    2148:	84 23       	and	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	2c c0       	rjmp	.+88     	; 0x21a6 <MDIO_SetPinValue+0x3f4>
				case MDIO_enumPortC : CLR_BIT(MDIO_PORTC,Copy_uinit8PinNum);break;
    214e:	a5 e3       	ldi	r26, 0x35	; 53
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e5 e3       	ldi	r30, 0x35	; 53
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	48 2f       	mov	r20, r24
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	02 2e       	mov	r0, r18
    2166:	02 c0       	rjmp	.+4      	; 0x216c <MDIO_SetPinValue+0x3ba>
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	0a 94       	dec	r0
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <MDIO_SetPinValue+0x3b6>
    2170:	80 95       	com	r24
    2172:	84 23       	and	r24, r20
    2174:	8c 93       	st	X, r24
    2176:	17 c0       	rjmp	.+46     	; 0x21a6 <MDIO_SetPinValue+0x3f4>
				case MDIO_enumPortD : CLR_BIT(MDIO_PORTD,Copy_uinit8PinNum);break;
    2178:	a2 e3       	ldi	r26, 0x32	; 50
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e2 e3       	ldi	r30, 0x32	; 50
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	48 2f       	mov	r20, r24
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 2e       	mov	r0, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <MDIO_SetPinValue+0x3e4>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	0a 94       	dec	r0
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <MDIO_SetPinValue+0x3e0>
    219a:	80 95       	com	r24
    219c:	84 23       	and	r24, r20
    219e:	8c 93       	st	X, r24
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <MDIO_SetPinValue+0x3f4>
				default :
				{
					State =MDIO_enumWrongConfig;
    21a2:	84 e0       	ldi	r24, 0x04	; 4
    21a4:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			State=MDIO_enumOk;
    21a6:	19 82       	std	Y+1, r1	; 0x01
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <MDIO_SetPinValue+0x3fc>
		}
		else
		{
			State =MDIO_enumWrongConfig;
    21aa:	84 e0       	ldi	r24, 0x04	; 4
    21ac:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return State;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b0:	2c 96       	adiw	r28, 0x0c	; 12
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <MDIO_GetPinValue>:

MDIO_enumError_t MDIO_GetPinValue      (MDIO_enumPorts_t Copy_uinit8PortNum,MDIO_enumPins_t Copy_uinit8PinNum,uinit8_t* Get_Puinit8_tPinValue)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	27 97       	sbiw	r28, 0x07	; 7
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	8a 83       	std	Y+2, r24	; 0x02
    21d8:	6b 83       	std	Y+3, r22	; 0x03
    21da:	5d 83       	std	Y+5, r21	; 0x05
    21dc:	4c 83       	std	Y+4, r20	; 0x04
	MDIO_enumError_t State;
	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	85 30       	cpi	r24, 0x05	; 5
    21e2:	30 f0       	brcs	.+12     	; 0x21f0 <MDIO_GetPinValue+0x2e>
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	89 30       	cpi	r24, 0x09	; 9
    21e8:	18 f0       	brcs	.+6      	; 0x21f0 <MDIO_GetPinValue+0x2e>
	{
		State =MDIO_enumWrongConfig;
    21ea:	84 e0       	ldi	r24, 0x04	; 4
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	74 c0       	rjmp	.+232    	; 0x22d8 <MDIO_GetPinValue+0x116>
		
	}
	else
	{
		switch (Copy_uinit8PortNum)
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	3f 83       	std	Y+7, r19	; 0x07
    21f8:	2e 83       	std	Y+6, r18	; 0x06
    21fa:	4e 81       	ldd	r20, Y+6	; 0x06
    21fc:	5f 81       	ldd	r21, Y+7	; 0x07
    21fe:	41 30       	cpi	r20, 0x01	; 1
    2200:	51 05       	cpc	r21, r1
    2202:	59 f1       	breq	.+86     	; 0x225a <MDIO_GetPinValue+0x98>
    2204:	8e 81       	ldd	r24, Y+6	; 0x06
    2206:	9f 81       	ldd	r25, Y+7	; 0x07
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	91 05       	cpc	r25, r1
    220c:	34 f4       	brge	.+12     	; 0x221a <MDIO_GetPinValue+0x58>
    220e:	2e 81       	ldd	r18, Y+6	; 0x06
    2210:	3f 81       	ldd	r19, Y+7	; 0x07
    2212:	21 15       	cp	r18, r1
    2214:	31 05       	cpc	r19, r1
    2216:	69 f0       	breq	.+26     	; 0x2232 <MDIO_GetPinValue+0x70>
    2218:	5c c0       	rjmp	.+184    	; 0x22d2 <MDIO_GetPinValue+0x110>
    221a:	4e 81       	ldd	r20, Y+6	; 0x06
    221c:	5f 81       	ldd	r21, Y+7	; 0x07
    221e:	42 30       	cpi	r20, 0x02	; 2
    2220:	51 05       	cpc	r21, r1
    2222:	79 f1       	breq	.+94     	; 0x2282 <MDIO_GetPinValue+0xc0>
    2224:	8e 81       	ldd	r24, Y+6	; 0x06
    2226:	9f 81       	ldd	r25, Y+7	; 0x07
    2228:	83 30       	cpi	r24, 0x03	; 3
    222a:	91 05       	cpc	r25, r1
    222c:	09 f4       	brne	.+2      	; 0x2230 <MDIO_GetPinValue+0x6e>
    222e:	3d c0       	rjmp	.+122    	; 0x22aa <MDIO_GetPinValue+0xe8>
    2230:	50 c0       	rjmp	.+160    	; 0x22d2 <MDIO_GetPinValue+0x110>
		{
			case MDIO_enumPortA : *Get_Puinit8_tPinValue = READ_BIT(MDIO_PINA,Copy_uinit8PinNum) ; break;
    2232:	e9 e3       	ldi	r30, 0x39	; 57
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a9 01       	movw	r20, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <MDIO_GetPinValue+0x88>
    2246:	55 95       	asr	r21
    2248:	47 95       	ror	r20
    224a:	8a 95       	dec	r24
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <MDIO_GetPinValue+0x84>
    224e:	ca 01       	movw	r24, r20
    2250:	81 70       	andi	r24, 0x01	; 1
    2252:	ec 81       	ldd	r30, Y+4	; 0x04
    2254:	fd 81       	ldd	r31, Y+5	; 0x05
    2256:	80 83       	st	Z, r24
    2258:	3e c0       	rjmp	.+124    	; 0x22d6 <MDIO_GetPinValue+0x114>
			case MDIO_enumPortB : *Get_Puinit8_tPinValue = READ_BIT(MDIO_PINB,Copy_uinit8PinNum) ; break;
    225a:	e6 e3       	ldi	r30, 0x36	; 54
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <MDIO_GetPinValue+0xb0>
    226e:	55 95       	asr	r21
    2270:	47 95       	ror	r20
    2272:	8a 95       	dec	r24
    2274:	e2 f7       	brpl	.-8      	; 0x226e <MDIO_GetPinValue+0xac>
    2276:	ca 01       	movw	r24, r20
    2278:	81 70       	andi	r24, 0x01	; 1
    227a:	ec 81       	ldd	r30, Y+4	; 0x04
    227c:	fd 81       	ldd	r31, Y+5	; 0x05
    227e:	80 83       	st	Z, r24
    2280:	2a c0       	rjmp	.+84     	; 0x22d6 <MDIO_GetPinValue+0x114>
			case MDIO_enumPortC : *Get_Puinit8_tPinValue = READ_BIT(MDIO_PINC,Copy_uinit8PinNum) ; break;
    2282:	e3 e3       	ldi	r30, 0x33	; 51
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a9 01       	movw	r20, r18
    2294:	02 c0       	rjmp	.+4      	; 0x229a <MDIO_GetPinValue+0xd8>
    2296:	55 95       	asr	r21
    2298:	47 95       	ror	r20
    229a:	8a 95       	dec	r24
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <MDIO_GetPinValue+0xd4>
    229e:	ca 01       	movw	r24, r20
    22a0:	81 70       	andi	r24, 0x01	; 1
    22a2:	ec 81       	ldd	r30, Y+4	; 0x04
    22a4:	fd 81       	ldd	r31, Y+5	; 0x05
    22a6:	80 83       	st	Z, r24
    22a8:	16 c0       	rjmp	.+44     	; 0x22d6 <MDIO_GetPinValue+0x114>
			case MDIO_enumPortD : *Get_Puinit8_tPinValue = READ_BIT(MDIO_PIND,Copy_uinit8PinNum) ; break;
    22aa:	e0 e3       	ldi	r30, 0x30	; 48
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a9 01       	movw	r20, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <MDIO_GetPinValue+0x100>
    22be:	55 95       	asr	r21
    22c0:	47 95       	ror	r20
    22c2:	8a 95       	dec	r24
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <MDIO_GetPinValue+0xfc>
    22c6:	ca 01       	movw	r24, r20
    22c8:	81 70       	andi	r24, 0x01	; 1
    22ca:	ec 81       	ldd	r30, Y+4	; 0x04
    22cc:	fd 81       	ldd	r31, Y+5	; 0x05
    22ce:	80 83       	st	Z, r24
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <MDIO_GetPinValue+0x114>
			default :
			{
				State =MDIO_enumERRORValue;
    22d2:	85 e0       	ldi	r24, 0x05	; 5
    22d4:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		State=MDIO_enumOk;
    22d6:	19 82       	std	Y+1, r1	; 0x01
	}

	return State;
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22da:	27 96       	adiw	r28, 0x07	; 7
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <MDIO_AssignPortValue>:
//MDIO_enumError_t MDIO_TogglePinValue();
MDIO_enumError_t MDIO_AssignPortValue(MDIO_enumPorts_t Copy_uinit8PortNum,uinit8_t uinit8_tPortValue)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <MDIO_AssignPortValue+0x6>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <MDIO_AssignPortValue+0x8>
    22f4:	0f 92       	push	r0
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	8a 83       	std	Y+2, r24	; 0x02
    22fc:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_enumError_t State=MDIO_enumOk;
    22fe:	19 82       	std	Y+1, r1	; 0x01
		/*check on port num didnot exceed the max*/
		if((Copy_uinit8PortNum>4)|| (Copy_uinit8PortNum<0))
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	85 30       	cpi	r24, 0x05	; 5
    2304:	18 f0       	brcs	.+6      	; 0x230c <MDIO_AssignPortValue+0x20>
		{
			State = MDIO_enumWrongPort;
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	35 c0       	rjmp	.+106    	; 0x2376 <MDIO_AssignPortValue+0x8a>
		else
		{
			/*
			 * Description: assign a required value to the port at a time
			 * */
				switch (Copy_uinit8PortNum)
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	3d 83       	std	Y+5, r19	; 0x05
    2314:	2c 83       	std	Y+4, r18	; 0x04
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	9d 81       	ldd	r25, Y+5	; 0x05
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	91 05       	cpc	r25, r1
    231e:	d1 f0       	breq	.+52     	; 0x2354 <MDIO_AssignPortValue+0x68>
    2320:	2c 81       	ldd	r18, Y+4	; 0x04
    2322:	3d 81       	ldd	r19, Y+5	; 0x05
    2324:	22 30       	cpi	r18, 0x02	; 2
    2326:	31 05       	cpc	r19, r1
    2328:	2c f4       	brge	.+10     	; 0x2334 <MDIO_AssignPortValue+0x48>
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	9d 81       	ldd	r25, Y+5	; 0x05
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	61 f0       	breq	.+24     	; 0x234a <MDIO_AssignPortValue+0x5e>
    2332:	1f c0       	rjmp	.+62     	; 0x2372 <MDIO_AssignPortValue+0x86>
    2334:	2c 81       	ldd	r18, Y+4	; 0x04
    2336:	3d 81       	ldd	r19, Y+5	; 0x05
    2338:	22 30       	cpi	r18, 0x02	; 2
    233a:	31 05       	cpc	r19, r1
    233c:	81 f0       	breq	.+32     	; 0x235e <MDIO_AssignPortValue+0x72>
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	9d 81       	ldd	r25, Y+5	; 0x05
    2342:	83 30       	cpi	r24, 0x03	; 3
    2344:	91 05       	cpc	r25, r1
    2346:	81 f0       	breq	.+32     	; 0x2368 <MDIO_AssignPortValue+0x7c>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <MDIO_AssignPortValue+0x86>
				{
					case MDIO_enumPortA : MDIO_PORTA=uinit8_tPortValue;break;
    234a:	eb e3       	ldi	r30, 0x3B	; 59
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	80 83       	st	Z, r24
    2352:	11 c0       	rjmp	.+34     	; 0x2376 <MDIO_AssignPortValue+0x8a>
					case MDIO_enumPortB : MDIO_PORTB=uinit8_tPortValue;break;
    2354:	e8 e3       	ldi	r30, 0x38	; 56
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	80 83       	st	Z, r24
    235c:	0c c0       	rjmp	.+24     	; 0x2376 <MDIO_AssignPortValue+0x8a>
					case MDIO_enumPortC : MDIO_PORTC=uinit8_tPortValue;break;
    235e:	e5 e3       	ldi	r30, 0x35	; 53
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	80 83       	st	Z, r24
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <MDIO_AssignPortValue+0x8a>
					case MDIO_enumPortD : MDIO_PORTD=uinit8_tPortValue;break;
    2368:	e2 e3       	ldi	r30, 0x32	; 50
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	80 83       	st	Z, r24
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <MDIO_AssignPortValue+0x8a>
					default :
					{
						State=MDIO_enumERRORValue;
    2372:	85 e0       	ldi	r24, 0x05	; 5
    2374:	89 83       	std	Y+1, r24	; 0x01

			}



		return State;
    2376:	89 81       	ldd	r24, Y+1	; 0x01
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <MDIO_SetConfig>:

MDIO_enumError_t MDIO_SetConfig(MDIO_HW_Config_t* Add_Port_Config, uinit8_t LENGTH)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	cd b7       	in	r28, 0x3d	; 61
    238e:	de b7       	in	r29, 0x3e	; 62
    2390:	2f 97       	sbiw	r28, 0x0f	; 15
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	f8 94       	cli
    2396:	de bf       	out	0x3e, r29	; 62
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	cd bf       	out	0x3d, r28	; 61
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	6d 83       	std	Y+5, r22	; 0x05
	
	MDIO_enumError_t state;
	
	for(uinit8_t i=0;i<LENGTH;i++)
    23a2:	19 82       	std	Y+1, r1	; 0x01
    23a4:	1c c5       	rjmp	.+2616   	; 0x2dde <MDIO_SetConfig+0xa56>
	{
		switch(Add_Port_Config[i].MPORT_HW_Config)
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	c9 01       	movw	r24, r18
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	28 0f       	add	r18, r24
    23b4:	39 1f       	adc	r19, r25
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	fc 01       	movw	r30, r24
    23bc:	e2 0f       	add	r30, r18
    23be:	f3 1f       	adc	r31, r19
    23c0:	80 81       	ld	r24, Z
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	3f 87       	std	Y+15, r19	; 0x0f
    23c8:	2e 87       	std	Y+14, r18	; 0x0e
    23ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    23cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    23ce:	81 30       	cpi	r24, 0x01	; 1
    23d0:	91 05       	cpc	r25, r1
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <MDIO_SetConfig+0x4e>
    23d4:	51 c1       	rjmp	.+674    	; 0x2678 <MDIO_SetConfig+0x2f0>
    23d6:	2e 85       	ldd	r18, Y+14	; 0x0e
    23d8:	3f 85       	ldd	r19, Y+15	; 0x0f
    23da:	22 30       	cpi	r18, 0x02	; 2
    23dc:	31 05       	cpc	r19, r1
    23de:	2c f4       	brge	.+10     	; 0x23ea <MDIO_SetConfig+0x62>
    23e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23e4:	00 97       	sbiw	r24, 0x00	; 0
    23e6:	71 f0       	breq	.+28     	; 0x2404 <MDIO_SetConfig+0x7c>
    23e8:	f5 c4       	rjmp	.+2538   	; 0x2dd4 <MDIO_SetConfig+0xa4c>
    23ea:	2e 85       	ldd	r18, Y+14	; 0x0e
    23ec:	3f 85       	ldd	r19, Y+15	; 0x0f
    23ee:	22 30       	cpi	r18, 0x02	; 2
    23f0:	31 05       	cpc	r19, r1
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <MDIO_SetConfig+0x6e>
    23f4:	7b c2       	rjmp	.+1270   	; 0x28ec <MDIO_SetConfig+0x564>
    23f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    23fa:	83 30       	cpi	r24, 0x03	; 3
    23fc:	91 05       	cpc	r25, r1
    23fe:	09 f4       	brne	.+2      	; 0x2402 <MDIO_SetConfig+0x7a>
    2400:	af c3       	rjmp	.+1886   	; 0x2b60 <MDIO_SetConfig+0x7d8>
    2402:	e8 c4       	rjmp	.+2512   	; 0x2dd4 <MDIO_SetConfig+0xa4c>
		{
			case MDIO_enumPortA:
			{
				switch(Add_Port_Config[i].MPORT_Config_State)
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	c9 01       	movw	r24, r18
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	28 0f       	add	r18, r24
    2412:	39 1f       	adc	r19, r25
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	fc 01       	movw	r30, r24
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	3d 87       	std	Y+13, r19	; 0x0d
    2426:	2c 87       	std	Y+12, r18	; 0x0c
    2428:	8c 85       	ldd	r24, Y+12	; 0x0c
    242a:	9d 85       	ldd	r25, Y+13	; 0x0d
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	09 f4       	brne	.+2      	; 0x2434 <MDIO_SetConfig+0xac>
    2432:	de c0       	rjmp	.+444    	; 0x25f0 <MDIO_SetConfig+0x268>
    2434:	2c 85       	ldd	r18, Y+12	; 0x0c
    2436:	3d 85       	ldd	r19, Y+13	; 0x0d
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	31 05       	cpc	r19, r1
    243c:	34 f4       	brge	.+12     	; 0x244a <MDIO_SetConfig+0xc2>
    243e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2440:	9d 85       	ldd	r25, Y+13	; 0x0d
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	09 f4       	brne	.+2      	; 0x2448 <MDIO_SetConfig+0xc0>
    2446:	92 c0       	rjmp	.+292    	; 0x256c <MDIO_SetConfig+0x1e4>
    2448:	14 c1       	rjmp	.+552    	; 0x2672 <MDIO_SetConfig+0x2ea>
    244a:	2c 85       	ldd	r18, Y+12	; 0x0c
    244c:	3d 85       	ldd	r19, Y+13	; 0x0d
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	39 f0       	breq	.+14     	; 0x2462 <MDIO_SetConfig+0xda>
    2454:	8c 85       	ldd	r24, Y+12	; 0x0c
    2456:	9d 85       	ldd	r25, Y+13	; 0x0d
    2458:	83 30       	cpi	r24, 0x03	; 3
    245a:	91 05       	cpc	r25, r1
    245c:	09 f4       	brne	.+2      	; 0x2460 <MDIO_SetConfig+0xd8>
    245e:	43 c0       	rjmp	.+134    	; 0x24e6 <MDIO_SetConfig+0x15e>
    2460:	08 c1       	rjmp	.+528    	; 0x2672 <MDIO_SetConfig+0x2ea>
				{
					case MDIO_enumInputInternalPU:
					{
						CLR_BIT(MDIO_DDRA,Add_Port_Config[i].MPIN_HW_Config);
    2462:	aa e3       	ldi	r26, 0x3A	; 58
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	ea e3       	ldi	r30, 0x3A	; 58
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	48 2f       	mov	r20, r24
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	c9 01       	movw	r24, r18
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	28 0f       	add	r18, r24
    247c:	39 1f       	adc	r19, r25
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	fc 01       	movw	r30, r24
    2484:	e2 0f       	add	r30, r18
    2486:	f3 1f       	adc	r31, r19
    2488:	81 81       	ldd	r24, Z+1	; 0x01
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <MDIO_SetConfig+0x110>
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	2a 95       	dec	r18
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <MDIO_SetConfig+0x10c>
    249c:	80 95       	com	r24
    249e:	84 23       	and	r24, r20
    24a0:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTA,Add_Port_Config[i].MPIN_HW_Config);
    24a2:	ab e3       	ldi	r26, 0x3B	; 59
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	eb e3       	ldi	r30, 0x3B	; 59
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	48 2f       	mov	r20, r24
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	c9 01       	movw	r24, r18
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	28 0f       	add	r18, r24
    24bc:	39 1f       	adc	r19, r25
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	9c 81       	ldd	r25, Y+4	; 0x04
    24c2:	fc 01       	movw	r30, r24
    24c4:	e2 0f       	add	r30, r18
    24c6:	f3 1f       	adc	r31, r19
    24c8:	81 81       	ldd	r24, Z+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 2e       	mov	r0, r18
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <MDIO_SetConfig+0x152>
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	0a 94       	dec	r0
    24dc:	e2 f7       	brpl	.-8      	; 0x24d6 <MDIO_SetConfig+0x14e>
    24de:	84 2b       	or	r24, r20
    24e0:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    24e2:	1a 82       	std	Y+2, r1	; 0x02
    24e4:	79 c4       	rjmp	.+2290   	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumInputExternalPD :
					{
						CLR_BIT(MDIO_DDRA,Add_Port_Config[i].MPIN_HW_Config);
    24e6:	aa e3       	ldi	r26, 0x3A	; 58
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	ea e3       	ldi	r30, 0x3A	; 58
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	48 2f       	mov	r20, r24
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	c9 01       	movw	r24, r18
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	28 0f       	add	r18, r24
    2500:	39 1f       	adc	r19, r25
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	fc 01       	movw	r30, r24
    2508:	e2 0f       	add	r30, r18
    250a:	f3 1f       	adc	r31, r19
    250c:	81 81       	ldd	r24, Z+1	; 0x01
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <MDIO_SetConfig+0x194>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	2a 95       	dec	r18
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <MDIO_SetConfig+0x190>
    2520:	80 95       	com	r24
    2522:	84 23       	and	r24, r20
    2524:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTA,Add_Port_Config[i].MPIN_HW_Config);
    2526:	ab e3       	ldi	r26, 0x3B	; 59
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	eb e3       	ldi	r30, 0x3B	; 59
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	48 2f       	mov	r20, r24
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	c9 01       	movw	r24, r18
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	28 0f       	add	r18, r24
    2540:	39 1f       	adc	r19, r25
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	fc 01       	movw	r30, r24
    2548:	e2 0f       	add	r30, r18
    254a:	f3 1f       	adc	r31, r19
    254c:	81 81       	ldd	r24, Z+1	; 0x01
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	02 2e       	mov	r0, r18
    2558:	02 c0       	rjmp	.+4      	; 0x255e <MDIO_SetConfig+0x1d6>
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	0a 94       	dec	r0
    2560:	e2 f7       	brpl	.-8      	; 0x255a <MDIO_SetConfig+0x1d2>
    2562:	80 95       	com	r24
    2564:	84 23       	and	r24, r20
    2566:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2568:	1a 82       	std	Y+2, r1	; 0x02
    256a:	36 c4       	rjmp	.+2156   	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_LOW :
					{
						SET_BIT(MDIO_DDRA,Add_Port_Config[i].MPIN_HW_Config);
    256c:	aa e3       	ldi	r26, 0x3A	; 58
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ea e3       	ldi	r30, 0x3A	; 58
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	48 2f       	mov	r20, r24
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	c9 01       	movw	r24, r18
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	28 0f       	add	r18, r24
    2586:	39 1f       	adc	r19, r25
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	fc 01       	movw	r30, r24
    258e:	e2 0f       	add	r30, r18
    2590:	f3 1f       	adc	r31, r19
    2592:	81 81       	ldd	r24, Z+1	; 0x01
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <MDIO_SetConfig+0x21a>
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	2a 95       	dec	r18
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <MDIO_SetConfig+0x216>
    25a6:	84 2b       	or	r24, r20
    25a8:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTA,Add_Port_Config[i].MPIN_HW_Config);
    25aa:	ab e3       	ldi	r26, 0x3B	; 59
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	eb e3       	ldi	r30, 0x3B	; 59
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	48 2f       	mov	r20, r24
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	c9 01       	movw	r24, r18
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	28 0f       	add	r18, r24
    25c4:	39 1f       	adc	r19, r25
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	fc 01       	movw	r30, r24
    25cc:	e2 0f       	add	r30, r18
    25ce:	f3 1f       	adc	r31, r19
    25d0:	81 81       	ldd	r24, Z+1	; 0x01
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	02 2e       	mov	r0, r18
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <MDIO_SetConfig+0x25a>
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	0a 94       	dec	r0
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <MDIO_SetConfig+0x256>
    25e6:	80 95       	com	r24
    25e8:	84 23       	and	r24, r20
    25ea:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    25ec:	1a 82       	std	Y+2, r1	; 0x02
    25ee:	f4 c3       	rjmp	.+2024   	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_HIGH :
					{
						SET_BIT(MDIO_DDRA,Add_Port_Config[i].MPIN_HW_Config);
    25f0:	aa e3       	ldi	r26, 0x3A	; 58
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	ea e3       	ldi	r30, 0x3A	; 58
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	48 2f       	mov	r20, r24
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	c9 01       	movw	r24, r18
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	28 0f       	add	r18, r24
    260a:	39 1f       	adc	r19, r25
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	81 81       	ldd	r24, Z+1	; 0x01
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <MDIO_SetConfig+0x29e>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	2a 95       	dec	r18
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <MDIO_SetConfig+0x29a>
    262a:	84 2b       	or	r24, r20
    262c:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTA,Add_Port_Config[i].MPIN_HW_Config);
    262e:	ab e3       	ldi	r26, 0x3B	; 59
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	eb e3       	ldi	r30, 0x3B	; 59
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	48 2f       	mov	r20, r24
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	c9 01       	movw	r24, r18
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	28 0f       	add	r18, r24
    2648:	39 1f       	adc	r19, r25
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	fc 01       	movw	r30, r24
    2650:	e2 0f       	add	r30, r18
    2652:	f3 1f       	adc	r31, r19
    2654:	81 81       	ldd	r24, Z+1	; 0x01
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	02 2e       	mov	r0, r18
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <MDIO_SetConfig+0x2de>
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <MDIO_SetConfig+0x2da>
    266a:	84 2b       	or	r24, r20
    266c:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    266e:	1a 82       	std	Y+2, r1	; 0x02
    2670:	b3 c3       	rjmp	.+1894   	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					default:
					{
						/*Report error*/
						state = MDIO_enumWrongConfig;
    2672:	84 e0       	ldi	r24, 0x04	; 4
    2674:	8a 83       	std	Y+2, r24	; 0x02
    2676:	b0 c3       	rjmp	.+1888   	; 0x2dd8 <MDIO_SetConfig+0xa50>
			}break;
			
			case MDIO_enumPortB:
			{
				
				switch(Add_Port_Config[i].MPORT_Config_State)
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	c9 01       	movw	r24, r18
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	28 0f       	add	r18, r24
    2686:	39 1f       	adc	r19, r25
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	fc 01       	movw	r30, r24
    268e:	e2 0f       	add	r30, r18
    2690:	f3 1f       	adc	r31, r19
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	3b 87       	std	Y+11, r19	; 0x0b
    269a:	2a 87       	std	Y+10, r18	; 0x0a
    269c:	8a 85       	ldd	r24, Y+10	; 0x0a
    269e:	9b 85       	ldd	r25, Y+11	; 0x0b
    26a0:	81 30       	cpi	r24, 0x01	; 1
    26a2:	91 05       	cpc	r25, r1
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <MDIO_SetConfig+0x320>
    26a6:	de c0       	rjmp	.+444    	; 0x2864 <MDIO_SetConfig+0x4dc>
    26a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    26aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    26ac:	22 30       	cpi	r18, 0x02	; 2
    26ae:	31 05       	cpc	r19, r1
    26b0:	34 f4       	brge	.+12     	; 0x26be <MDIO_SetConfig+0x336>
    26b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    26b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	09 f4       	brne	.+2      	; 0x26bc <MDIO_SetConfig+0x334>
    26ba:	92 c0       	rjmp	.+292    	; 0x27e0 <MDIO_SetConfig+0x458>
    26bc:	14 c1       	rjmp	.+552    	; 0x28e6 <MDIO_SetConfig+0x55e>
    26be:	2a 85       	ldd	r18, Y+10	; 0x0a
    26c0:	3b 85       	ldd	r19, Y+11	; 0x0b
    26c2:	22 30       	cpi	r18, 0x02	; 2
    26c4:	31 05       	cpc	r19, r1
    26c6:	39 f0       	breq	.+14     	; 0x26d6 <MDIO_SetConfig+0x34e>
    26c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    26cc:	83 30       	cpi	r24, 0x03	; 3
    26ce:	91 05       	cpc	r25, r1
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <MDIO_SetConfig+0x34c>
    26d2:	43 c0       	rjmp	.+134    	; 0x275a <MDIO_SetConfig+0x3d2>
    26d4:	08 c1       	rjmp	.+528    	; 0x28e6 <MDIO_SetConfig+0x55e>
				{
					case MDIO_enumInputInternalPU:
					{
						CLR_BIT(MDIO_DDRB,Add_Port_Config[i].MPIN_HW_Config);
    26d6:	a7 e3       	ldi	r26, 0x37	; 55
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e7 e3       	ldi	r30, 0x37	; 55
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	48 2f       	mov	r20, r24
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	c9 01       	movw	r24, r18
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	28 0f       	add	r18, r24
    26f0:	39 1f       	adc	r19, r25
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	fc 01       	movw	r30, r24
    26f8:	e2 0f       	add	r30, r18
    26fa:	f3 1f       	adc	r31, r19
    26fc:	81 81       	ldd	r24, Z+1	; 0x01
    26fe:	28 2f       	mov	r18, r24
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	02 c0       	rjmp	.+4      	; 0x270c <MDIO_SetConfig+0x384>
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	2a 95       	dec	r18
    270e:	e2 f7       	brpl	.-8      	; 0x2708 <MDIO_SetConfig+0x380>
    2710:	80 95       	com	r24
    2712:	84 23       	and	r24, r20
    2714:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTB,Add_Port_Config[i].MPIN_HW_Config);
    2716:	a8 e3       	ldi	r26, 0x38	; 56
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e8 e3       	ldi	r30, 0x38	; 56
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	48 2f       	mov	r20, r24
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	c9 01       	movw	r24, r18
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	28 0f       	add	r18, r24
    2730:	39 1f       	adc	r19, r25
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	fc 01       	movw	r30, r24
    2738:	e2 0f       	add	r30, r18
    273a:	f3 1f       	adc	r31, r19
    273c:	81 81       	ldd	r24, Z+1	; 0x01
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	02 2e       	mov	r0, r18
    2748:	02 c0       	rjmp	.+4      	; 0x274e <MDIO_SetConfig+0x3c6>
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	0a 94       	dec	r0
    2750:	e2 f7       	brpl	.-8      	; 0x274a <MDIO_SetConfig+0x3c2>
    2752:	84 2b       	or	r24, r20
    2754:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2756:	1a 82       	std	Y+2, r1	; 0x02
    2758:	3f c3       	rjmp	.+1662   	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumInputExternalPD :
					{
						CLR_BIT(MDIO_DDRB,Add_Port_Config[i].MPIN_HW_Config);
    275a:	a7 e3       	ldi	r26, 0x37	; 55
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e7 e3       	ldi	r30, 0x37	; 55
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	48 2f       	mov	r20, r24
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	c9 01       	movw	r24, r18
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	28 0f       	add	r18, r24
    2774:	39 1f       	adc	r19, r25
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	fc 01       	movw	r30, r24
    277c:	e2 0f       	add	r30, r18
    277e:	f3 1f       	adc	r31, r19
    2780:	81 81       	ldd	r24, Z+1	; 0x01
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	02 c0       	rjmp	.+4      	; 0x2790 <MDIO_SetConfig+0x408>
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	2a 95       	dec	r18
    2792:	e2 f7       	brpl	.-8      	; 0x278c <MDIO_SetConfig+0x404>
    2794:	80 95       	com	r24
    2796:	84 23       	and	r24, r20
    2798:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTB,Add_Port_Config[i].MPIN_HW_Config);
    279a:	a8 e3       	ldi	r26, 0x38	; 56
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e8 e3       	ldi	r30, 0x38	; 56
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	48 2f       	mov	r20, r24
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	28 2f       	mov	r18, r24
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	c9 01       	movw	r24, r18
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	28 0f       	add	r18, r24
    27b4:	39 1f       	adc	r19, r25
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	fc 01       	movw	r30, r24
    27bc:	e2 0f       	add	r30, r18
    27be:	f3 1f       	adc	r31, r19
    27c0:	81 81       	ldd	r24, Z+1	; 0x01
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <MDIO_SetConfig+0x44a>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <MDIO_SetConfig+0x446>
    27d6:	80 95       	com	r24
    27d8:	84 23       	and	r24, r20
    27da:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    27dc:	1a 82       	std	Y+2, r1	; 0x02
    27de:	fc c2       	rjmp	.+1528   	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_LOW :
					{
						SET_BIT(MDIO_DDRB,Add_Port_Config[i].MPIN_HW_Config);
    27e0:	a7 e3       	ldi	r26, 0x37	; 55
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e7 e3       	ldi	r30, 0x37	; 55
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	48 2f       	mov	r20, r24
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	c9 01       	movw	r24, r18
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	28 0f       	add	r18, r24
    27fa:	39 1f       	adc	r19, r25
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	fc 01       	movw	r30, r24
    2802:	e2 0f       	add	r30, r18
    2804:	f3 1f       	adc	r31, r19
    2806:	81 81       	ldd	r24, Z+1	; 0x01
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <MDIO_SetConfig+0x48e>
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	2a 95       	dec	r18
    2818:	e2 f7       	brpl	.-8      	; 0x2812 <MDIO_SetConfig+0x48a>
    281a:	84 2b       	or	r24, r20
    281c:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTB,Add_Port_Config[i].MPIN_HW_Config);
    281e:	a8 e3       	ldi	r26, 0x38	; 56
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e8 e3       	ldi	r30, 0x38	; 56
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	48 2f       	mov	r20, r24
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	28 2f       	mov	r18, r24
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	c9 01       	movw	r24, r18
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	28 0f       	add	r18, r24
    2838:	39 1f       	adc	r19, r25
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	fc 01       	movw	r30, r24
    2840:	e2 0f       	add	r30, r18
    2842:	f3 1f       	adc	r31, r19
    2844:	81 81       	ldd	r24, Z+1	; 0x01
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	02 2e       	mov	r0, r18
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <MDIO_SetConfig+0x4ce>
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	0a 94       	dec	r0
    2858:	e2 f7       	brpl	.-8      	; 0x2852 <MDIO_SetConfig+0x4ca>
    285a:	80 95       	com	r24
    285c:	84 23       	and	r24, r20
    285e:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2860:	1a 82       	std	Y+2, r1	; 0x02
    2862:	ba c2       	rjmp	.+1396   	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_HIGH :
					{
						SET_BIT(MDIO_DDRB,Add_Port_Config[i].MPIN_HW_Config);
    2864:	a7 e3       	ldi	r26, 0x37	; 55
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e7 e3       	ldi	r30, 0x37	; 55
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	48 2f       	mov	r20, r24
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	c9 01       	movw	r24, r18
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	28 0f       	add	r18, r24
    287e:	39 1f       	adc	r19, r25
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	fc 01       	movw	r30, r24
    2886:	e2 0f       	add	r30, r18
    2888:	f3 1f       	adc	r31, r19
    288a:	81 81       	ldd	r24, Z+1	; 0x01
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	02 c0       	rjmp	.+4      	; 0x289a <MDIO_SetConfig+0x512>
    2896:	88 0f       	add	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	2a 95       	dec	r18
    289c:	e2 f7       	brpl	.-8      	; 0x2896 <MDIO_SetConfig+0x50e>
    289e:	84 2b       	or	r24, r20
    28a0:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTB,Add_Port_Config[i].MPIN_HW_Config);
    28a2:	a8 e3       	ldi	r26, 0x38	; 56
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e8 e3       	ldi	r30, 0x38	; 56
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	48 2f       	mov	r20, r24
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	c9 01       	movw	r24, r18
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	28 0f       	add	r18, r24
    28bc:	39 1f       	adc	r19, r25
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	fc 01       	movw	r30, r24
    28c4:	e2 0f       	add	r30, r18
    28c6:	f3 1f       	adc	r31, r19
    28c8:	81 81       	ldd	r24, Z+1	; 0x01
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	02 2e       	mov	r0, r18
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <MDIO_SetConfig+0x552>
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	0a 94       	dec	r0
    28dc:	e2 f7       	brpl	.-8      	; 0x28d6 <MDIO_SetConfig+0x54e>
    28de:	84 2b       	or	r24, r20
    28e0:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    28e2:	1a 82       	std	Y+2, r1	; 0x02
    28e4:	79 c2       	rjmp	.+1266   	; 0x2dd8 <MDIO_SetConfig+0xa50>
					}break;
					
					default:
					{
						/*Report error*/
						state = MDIO_enumWrongConfig;
    28e6:	84 e0       	ldi	r24, 0x04	; 4
    28e8:	8a 83       	std	Y+2, r24	; 0x02
    28ea:	76 c2       	rjmp	.+1260   	; 0x2dd8 <MDIO_SetConfig+0xa50>
			
			
			case MDIO_enumPortC:
			{
				
				switch(Add_Port_Config[i].MPORT_Config_State)
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	c9 01       	movw	r24, r18
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	28 0f       	add	r18, r24
    28fa:	39 1f       	adc	r19, r25
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	28 2f       	mov	r18, r24
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	39 87       	std	Y+9, r19	; 0x09
    290e:	28 87       	std	Y+8, r18	; 0x08
    2910:	88 85       	ldd	r24, Y+8	; 0x08
    2912:	99 85       	ldd	r25, Y+9	; 0x09
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	91 05       	cpc	r25, r1
    2918:	09 f4       	brne	.+2      	; 0x291c <MDIO_SetConfig+0x594>
    291a:	de c0       	rjmp	.+444    	; 0x2ad8 <MDIO_SetConfig+0x750>
    291c:	28 85       	ldd	r18, Y+8	; 0x08
    291e:	39 85       	ldd	r19, Y+9	; 0x09
    2920:	22 30       	cpi	r18, 0x02	; 2
    2922:	31 05       	cpc	r19, r1
    2924:	34 f4       	brge	.+12     	; 0x2932 <MDIO_SetConfig+0x5aa>
    2926:	88 85       	ldd	r24, Y+8	; 0x08
    2928:	99 85       	ldd	r25, Y+9	; 0x09
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	09 f4       	brne	.+2      	; 0x2930 <MDIO_SetConfig+0x5a8>
    292e:	92 c0       	rjmp	.+292    	; 0x2a54 <MDIO_SetConfig+0x6cc>
    2930:	14 c1       	rjmp	.+552    	; 0x2b5a <MDIO_SetConfig+0x7d2>
    2932:	28 85       	ldd	r18, Y+8	; 0x08
    2934:	39 85       	ldd	r19, Y+9	; 0x09
    2936:	22 30       	cpi	r18, 0x02	; 2
    2938:	31 05       	cpc	r19, r1
    293a:	39 f0       	breq	.+14     	; 0x294a <MDIO_SetConfig+0x5c2>
    293c:	88 85       	ldd	r24, Y+8	; 0x08
    293e:	99 85       	ldd	r25, Y+9	; 0x09
    2940:	83 30       	cpi	r24, 0x03	; 3
    2942:	91 05       	cpc	r25, r1
    2944:	09 f4       	brne	.+2      	; 0x2948 <MDIO_SetConfig+0x5c0>
    2946:	43 c0       	rjmp	.+134    	; 0x29ce <MDIO_SetConfig+0x646>
    2948:	08 c1       	rjmp	.+528    	; 0x2b5a <MDIO_SetConfig+0x7d2>
				{
					case MDIO_enumInputInternalPU:
					{
						CLR_BIT(MDIO_DDRC,Add_Port_Config[i].MPIN_HW_Config);
    294a:	a4 e3       	ldi	r26, 0x34	; 52
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e4 e3       	ldi	r30, 0x34	; 52
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	48 2f       	mov	r20, r24
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	28 2f       	mov	r18, r24
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	c9 01       	movw	r24, r18
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	28 0f       	add	r18, r24
    2964:	39 1f       	adc	r19, r25
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	9c 81       	ldd	r25, Y+4	; 0x04
    296a:	fc 01       	movw	r30, r24
    296c:	e2 0f       	add	r30, r18
    296e:	f3 1f       	adc	r31, r19
    2970:	81 81       	ldd	r24, Z+1	; 0x01
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <MDIO_SetConfig+0x5f8>
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	2a 95       	dec	r18
    2982:	e2 f7       	brpl	.-8      	; 0x297c <MDIO_SetConfig+0x5f4>
    2984:	80 95       	com	r24
    2986:	84 23       	and	r24, r20
    2988:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTC,Add_Port_Config[i].MPIN_HW_Config);
    298a:	a5 e3       	ldi	r26, 0x35	; 53
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e5 e3       	ldi	r30, 0x35	; 53
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	48 2f       	mov	r20, r24
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	28 2f       	mov	r18, r24
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	c9 01       	movw	r24, r18
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	28 0f       	add	r18, r24
    29a4:	39 1f       	adc	r19, r25
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	fc 01       	movw	r30, r24
    29ac:	e2 0f       	add	r30, r18
    29ae:	f3 1f       	adc	r31, r19
    29b0:	81 81       	ldd	r24, Z+1	; 0x01
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	02 2e       	mov	r0, r18
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <MDIO_SetConfig+0x63a>
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	0a 94       	dec	r0
    29c4:	e2 f7       	brpl	.-8      	; 0x29be <MDIO_SetConfig+0x636>
    29c6:	84 2b       	or	r24, r20
    29c8:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    29ca:	1a 82       	std	Y+2, r1	; 0x02
    29cc:	05 c2       	rjmp	.+1034   	; 0x2dd8 <MDIO_SetConfig+0xa50>
					}break;
					case MDIO_enumInputExternalPD :
					{
						CLR_BIT(MDIO_DDRC,Add_Port_Config[i].MPIN_HW_Config);
    29ce:	a4 e3       	ldi	r26, 0x34	; 52
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e4 e3       	ldi	r30, 0x34	; 52
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	48 2f       	mov	r20, r24
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	c9 01       	movw	r24, r18
    29e2:	88 0f       	add	r24, r24
    29e4:	99 1f       	adc	r25, r25
    29e6:	28 0f       	add	r18, r24
    29e8:	39 1f       	adc	r19, r25
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	fc 01       	movw	r30, r24
    29f0:	e2 0f       	add	r30, r18
    29f2:	f3 1f       	adc	r31, r19
    29f4:	81 81       	ldd	r24, Z+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <MDIO_SetConfig+0x67c>
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	2a 95       	dec	r18
    2a06:	e2 f7       	brpl	.-8      	; 0x2a00 <MDIO_SetConfig+0x678>
    2a08:	80 95       	com	r24
    2a0a:	84 23       	and	r24, r20
    2a0c:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTC,Add_Port_Config[i].MPIN_HW_Config);
    2a0e:	a5 e3       	ldi	r26, 0x35	; 53
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	e5 e3       	ldi	r30, 0x35	; 53
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	48 2f       	mov	r20, r24
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	c9 01       	movw	r24, r18
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	28 0f       	add	r18, r24
    2a28:	39 1f       	adc	r19, r25
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	fc 01       	movw	r30, r24
    2a30:	e2 0f       	add	r30, r18
    2a32:	f3 1f       	adc	r31, r19
    2a34:	81 81       	ldd	r24, Z+1	; 0x01
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	02 2e       	mov	r0, r18
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <MDIO_SetConfig+0x6be>
    2a42:	88 0f       	add	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	0a 94       	dec	r0
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <MDIO_SetConfig+0x6ba>
    2a4a:	80 95       	com	r24
    2a4c:	84 23       	and	r24, r20
    2a4e:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2a50:	1a 82       	std	Y+2, r1	; 0x02
    2a52:	c2 c1       	rjmp	.+900    	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_LOW :
					{
						SET_BIT(MDIO_DDRC,Add_Port_Config[i].MPIN_HW_Config);
    2a54:	a4 e3       	ldi	r26, 0x34	; 52
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e4 e3       	ldi	r30, 0x34	; 52
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	48 2f       	mov	r20, r24
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	c9 01       	movw	r24, r18
    2a68:	88 0f       	add	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	28 0f       	add	r18, r24
    2a6e:	39 1f       	adc	r19, r25
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	fc 01       	movw	r30, r24
    2a76:	e2 0f       	add	r30, r18
    2a78:	f3 1f       	adc	r31, r19
    2a7a:	81 81       	ldd	r24, Z+1	; 0x01
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <MDIO_SetConfig+0x702>
    2a86:	88 0f       	add	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	2a 95       	dec	r18
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <MDIO_SetConfig+0x6fe>
    2a8e:	84 2b       	or	r24, r20
    2a90:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTC,Add_Port_Config[i].MPIN_HW_Config);
    2a92:	a5 e3       	ldi	r26, 0x35	; 53
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e5 e3       	ldi	r30, 0x35	; 53
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	48 2f       	mov	r20, r24
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	c9 01       	movw	r24, r18
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	28 0f       	add	r18, r24
    2aac:	39 1f       	adc	r19, r25
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	e2 0f       	add	r30, r18
    2ab6:	f3 1f       	adc	r31, r19
    2ab8:	81 81       	ldd	r24, Z+1	; 0x01
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	02 2e       	mov	r0, r18
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <MDIO_SetConfig+0x742>
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	0a 94       	dec	r0
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <MDIO_SetConfig+0x73e>
    2ace:	80 95       	com	r24
    2ad0:	84 23       	and	r24, r20
    2ad2:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2ad4:	1a 82       	std	Y+2, r1	; 0x02
    2ad6:	80 c1       	rjmp	.+768    	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_HIGH :
					{
						SET_BIT(MDIO_DDRC,Add_Port_Config[i].MPIN_HW_Config);
    2ad8:	a4 e3       	ldi	r26, 0x34	; 52
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e4 e3       	ldi	r30, 0x34	; 52
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	48 2f       	mov	r20, r24
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	c9 01       	movw	r24, r18
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	28 0f       	add	r18, r24
    2af2:	39 1f       	adc	r19, r25
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	fc 01       	movw	r30, r24
    2afa:	e2 0f       	add	r30, r18
    2afc:	f3 1f       	adc	r31, r19
    2afe:	81 81       	ldd	r24, Z+1	; 0x01
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <MDIO_SetConfig+0x786>
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	2a 95       	dec	r18
    2b10:	e2 f7       	brpl	.-8      	; 0x2b0a <MDIO_SetConfig+0x782>
    2b12:	84 2b       	or	r24, r20
    2b14:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTC,Add_Port_Config[i].MPIN_HW_Config);
    2b16:	a5 e3       	ldi	r26, 0x35	; 53
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e5 e3       	ldi	r30, 0x35	; 53
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	48 2f       	mov	r20, r24
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	c9 01       	movw	r24, r18
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	28 0f       	add	r18, r24
    2b30:	39 1f       	adc	r19, r25
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	fc 01       	movw	r30, r24
    2b38:	e2 0f       	add	r30, r18
    2b3a:	f3 1f       	adc	r31, r19
    2b3c:	81 81       	ldd	r24, Z+1	; 0x01
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	02 2e       	mov	r0, r18
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <MDIO_SetConfig+0x7c6>
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	0a 94       	dec	r0
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <MDIO_SetConfig+0x7c2>
    2b52:	84 2b       	or	r24, r20
    2b54:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2b56:	1a 82       	std	Y+2, r1	; 0x02
    2b58:	3f c1       	rjmp	.+638    	; 0x2dd8 <MDIO_SetConfig+0xa50>
					}break;
					
					default:
					{
						/*Report error*/
						state = MDIO_enumWrongConfig;
    2b5a:	84 e0       	ldi	r24, 0x04	; 4
    2b5c:	8a 83       	std	Y+2, r24	; 0x02
    2b5e:	3c c1       	rjmp	.+632    	; 0x2dd8 <MDIO_SetConfig+0xa50>
			}break;
			
			case MDIO_enumPortD:
			{
				
				switch(Add_Port_Config[i].MPORT_Config_State)
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	c9 01       	movw	r24, r18
    2b68:	88 0f       	add	r24, r24
    2b6a:	99 1f       	adc	r25, r25
    2b6c:	28 0f       	add	r18, r24
    2b6e:	39 1f       	adc	r19, r25
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	fc 01       	movw	r30, r24
    2b76:	e2 0f       	add	r30, r18
    2b78:	f3 1f       	adc	r31, r19
    2b7a:	82 81       	ldd	r24, Z+2	; 0x02
    2b7c:	28 2f       	mov	r18, r24
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	3f 83       	std	Y+7, r19	; 0x07
    2b82:	2e 83       	std	Y+6, r18	; 0x06
    2b84:	8e 81       	ldd	r24, Y+6	; 0x06
    2b86:	9f 81       	ldd	r25, Y+7	; 0x07
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	91 05       	cpc	r25, r1
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <MDIO_SetConfig+0x808>
    2b8e:	de c0       	rjmp	.+444    	; 0x2d4c <MDIO_SetConfig+0x9c4>
    2b90:	2e 81       	ldd	r18, Y+6	; 0x06
    2b92:	3f 81       	ldd	r19, Y+7	; 0x07
    2b94:	22 30       	cpi	r18, 0x02	; 2
    2b96:	31 05       	cpc	r19, r1
    2b98:	34 f4       	brge	.+12     	; 0x2ba6 <MDIO_SetConfig+0x81e>
    2b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <MDIO_SetConfig+0x81c>
    2ba2:	92 c0       	rjmp	.+292    	; 0x2cc8 <MDIO_SetConfig+0x940>
    2ba4:	14 c1       	rjmp	.+552    	; 0x2dce <MDIO_SetConfig+0xa46>
    2ba6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ba8:	3f 81       	ldd	r19, Y+7	; 0x07
    2baa:	22 30       	cpi	r18, 0x02	; 2
    2bac:	31 05       	cpc	r19, r1
    2bae:	39 f0       	breq	.+14     	; 0x2bbe <MDIO_SetConfig+0x836>
    2bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb4:	83 30       	cpi	r24, 0x03	; 3
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <MDIO_SetConfig+0x834>
    2bba:	43 c0       	rjmp	.+134    	; 0x2c42 <MDIO_SetConfig+0x8ba>
    2bbc:	08 c1       	rjmp	.+528    	; 0x2dce <MDIO_SetConfig+0xa46>
				{
					case MDIO_enumInputInternalPU:
					{
						CLR_BIT(MDIO_DDRD,Add_Port_Config[i].MPIN_HW_Config);
    2bbe:	a1 e3       	ldi	r26, 0x31	; 49
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	e1 e3       	ldi	r30, 0x31	; 49
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	48 2f       	mov	r20, r24
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	28 0f       	add	r18, r24
    2bd8:	39 1f       	adc	r19, r25
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	fc 01       	movw	r30, r24
    2be0:	e2 0f       	add	r30, r18
    2be2:	f3 1f       	adc	r31, r19
    2be4:	81 81       	ldd	r24, Z+1	; 0x01
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <MDIO_SetConfig+0x86c>
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	2a 95       	dec	r18
    2bf6:	e2 f7       	brpl	.-8      	; 0x2bf0 <MDIO_SetConfig+0x868>
    2bf8:	80 95       	com	r24
    2bfa:	84 23       	and	r24, r20
    2bfc:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTD,Add_Port_Config[i].MPIN_HW_Config);
    2bfe:	a2 e3       	ldi	r26, 0x32	; 50
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e2 e3       	ldi	r30, 0x32	; 50
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	80 81       	ld	r24, Z
    2c08:	48 2f       	mov	r20, r24
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	c9 01       	movw	r24, r18
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	28 0f       	add	r18, r24
    2c18:	39 1f       	adc	r19, r25
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e2 0f       	add	r30, r18
    2c22:	f3 1f       	adc	r31, r19
    2c24:	81 81       	ldd	r24, Z+1	; 0x01
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	02 2e       	mov	r0, r18
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <MDIO_SetConfig+0x8ae>
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	0a 94       	dec	r0
    2c38:	e2 f7       	brpl	.-8      	; 0x2c32 <MDIO_SetConfig+0x8aa>
    2c3a:	84 2b       	or	r24, r20
    2c3c:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2c3e:	1a 82       	std	Y+2, r1	; 0x02
    2c40:	cb c0       	rjmp	.+406    	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumInputExternalPD :
					{
						CLR_BIT(MDIO_DDRD,Add_Port_Config[i].MPIN_HW_Config);
    2c42:	a1 e3       	ldi	r26, 0x31	; 49
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e1 e3       	ldi	r30, 0x31	; 49
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	48 2f       	mov	r20, r24
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	28 2f       	mov	r18, r24
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	c9 01       	movw	r24, r18
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	28 0f       	add	r18, r24
    2c5c:	39 1f       	adc	r19, r25
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	9c 81       	ldd	r25, Y+4	; 0x04
    2c62:	fc 01       	movw	r30, r24
    2c64:	e2 0f       	add	r30, r18
    2c66:	f3 1f       	adc	r31, r19
    2c68:	81 81       	ldd	r24, Z+1	; 0x01
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <MDIO_SetConfig+0x8f0>
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	2a 95       	dec	r18
    2c7a:	e2 f7       	brpl	.-8      	; 0x2c74 <MDIO_SetConfig+0x8ec>
    2c7c:	80 95       	com	r24
    2c7e:	84 23       	and	r24, r20
    2c80:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTD,Add_Port_Config[i].MPIN_HW_Config);
    2c82:	a2 e3       	ldi	r26, 0x32	; 50
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e2 e3       	ldi	r30, 0x32	; 50
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	48 2f       	mov	r20, r24
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	28 2f       	mov	r18, r24
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	c9 01       	movw	r24, r18
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	28 0f       	add	r18, r24
    2c9c:	39 1f       	adc	r19, r25
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	e2 0f       	add	r30, r18
    2ca6:	f3 1f       	adc	r31, r19
    2ca8:	81 81       	ldd	r24, Z+1	; 0x01
    2caa:	28 2f       	mov	r18, r24
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	02 2e       	mov	r0, r18
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <MDIO_SetConfig+0x932>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	0a 94       	dec	r0
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <MDIO_SetConfig+0x92e>
    2cbe:	80 95       	com	r24
    2cc0:	84 23       	and	r24, r20
    2cc2:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2cc4:	1a 82       	std	Y+2, r1	; 0x02
    2cc6:	88 c0       	rjmp	.+272    	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_LOW :
					{
						SET_BIT(MDIO_DDRD,Add_Port_Config[i].MPIN_HW_Config);
    2cc8:	a1 e3       	ldi	r26, 0x31	; 49
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e1 e3       	ldi	r30, 0x31	; 49
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	48 2f       	mov	r20, r24
    2cd4:	89 81       	ldd	r24, Y+1	; 0x01
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	c9 01       	movw	r24, r18
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	28 0f       	add	r18, r24
    2ce2:	39 1f       	adc	r19, r25
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	fc 01       	movw	r30, r24
    2cea:	e2 0f       	add	r30, r18
    2cec:	f3 1f       	adc	r31, r19
    2cee:	81 81       	ldd	r24, Z+1	; 0x01
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <MDIO_SetConfig+0x976>
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	2a 95       	dec	r18
    2d00:	e2 f7       	brpl	.-8      	; 0x2cfa <MDIO_SetConfig+0x972>
    2d02:	84 2b       	or	r24, r20
    2d04:	8c 93       	st	X, r24
						CLR_BIT(MDIO_PORTD,Add_Port_Config[i].MPIN_HW_Config);
    2d06:	a2 e3       	ldi	r26, 0x32	; 50
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	e2 e3       	ldi	r30, 0x32	; 50
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	48 2f       	mov	r20, r24
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	c9 01       	movw	r24, r18
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	28 0f       	add	r18, r24
    2d20:	39 1f       	adc	r19, r25
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	9c 81       	ldd	r25, Y+4	; 0x04
    2d26:	fc 01       	movw	r30, r24
    2d28:	e2 0f       	add	r30, r18
    2d2a:	f3 1f       	adc	r31, r19
    2d2c:	81 81       	ldd	r24, Z+1	; 0x01
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	02 2e       	mov	r0, r18
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <MDIO_SetConfig+0x9b6>
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	0a 94       	dec	r0
    2d40:	e2 f7       	brpl	.-8      	; 0x2d3a <MDIO_SetConfig+0x9b2>
    2d42:	80 95       	com	r24
    2d44:	84 23       	and	r24, r20
    2d46:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2d48:	1a 82       	std	Y+2, r1	; 0x02
    2d4a:	46 c0       	rjmp	.+140    	; 0x2dd8 <MDIO_SetConfig+0xa50>
						
					}break;
					case MDIO_enumOutput_HIGH :
					{
						SET_BIT(MDIO_DDRD,Add_Port_Config[i].MPIN_HW_Config);
    2d4c:	a1 e3       	ldi	r26, 0x31	; 49
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e1 e3       	ldi	r30, 0x31	; 49
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	48 2f       	mov	r20, r24
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	c9 01       	movw	r24, r18
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	28 0f       	add	r18, r24
    2d66:	39 1f       	adc	r19, r25
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	e2 0f       	add	r30, r18
    2d70:	f3 1f       	adc	r31, r19
    2d72:	81 81       	ldd	r24, Z+1	; 0x01
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <MDIO_SetConfig+0x9fa>
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	2a 95       	dec	r18
    2d84:	e2 f7       	brpl	.-8      	; 0x2d7e <MDIO_SetConfig+0x9f6>
    2d86:	84 2b       	or	r24, r20
    2d88:	8c 93       	st	X, r24
						SET_BIT(MDIO_PORTD,Add_Port_Config[i].MPIN_HW_Config);
    2d8a:	a2 e3       	ldi	r26, 0x32	; 50
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e2 e3       	ldi	r30, 0x32	; 50
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	48 2f       	mov	r20, r24
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	28 0f       	add	r18, r24
    2da4:	39 1f       	adc	r19, r25
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	fc 01       	movw	r30, r24
    2dac:	e2 0f       	add	r30, r18
    2dae:	f3 1f       	adc	r31, r19
    2db0:	81 81       	ldd	r24, Z+1	; 0x01
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	02 2e       	mov	r0, r18
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <MDIO_SetConfig+0xa3a>
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	0a 94       	dec	r0
    2dc4:	e2 f7       	brpl	.-8      	; 0x2dbe <MDIO_SetConfig+0xa36>
    2dc6:	84 2b       	or	r24, r20
    2dc8:	8c 93       	st	X, r24
						state = MDIO_enumOk;
    2dca:	1a 82       	std	Y+2, r1	; 0x02
    2dcc:	05 c0       	rjmp	.+10     	; 0x2dd8 <MDIO_SetConfig+0xa50>
					}break;
					
					default:
					{
						/*Report error*/
						state = MDIO_enumWrongConfig;
    2dce:	84 e0       	ldi	r24, 0x04	; 4
    2dd0:	8a 83       	std	Y+2, r24	; 0x02
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <MDIO_SetConfig+0xa50>
			}break;
			
			default:
			{
				/*Report error*/
				state = MDIO_enumWrongConfig;
    2dd4:	84 e0       	ldi	r24, 0x04	; 4
    2dd6:	8a 83       	std	Y+2, r24	; 0x02
MDIO_enumError_t MDIO_SetConfig(MDIO_HW_Config_t* Add_Port_Config, uinit8_t LENGTH)
{
	
	MDIO_enumError_t state;
	
	for(uinit8_t i=0;i<LENGTH;i++)
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	99 81       	ldd	r25, Y+1	; 0x01
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	98 17       	cp	r25, r24
    2de4:	08 f4       	brcc	.+2      	; 0x2de8 <MDIO_SetConfig+0xa60>
    2de6:	df ca       	rjmp	.-2626   	; 0x23a6 <MDIO_SetConfig+0x1e>
			
			
			}/*FOR FOR LOOP */
			
			
			return state;
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
			
}
    2dea:	2f 96       	adiw	r28, 0x0f	; 15
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <MDIO_AssignValueLowNibble>:



MDIO_enumError_t MDIO_AssignValueLowNibble (MDIO_enumPorts_t Copy_uinit8PortNum, uinit8_t uinit8_tLowNibblePortValue )
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	00 d0       	rcall	.+0      	; 0x2e02 <MDIO_AssignValueLowNibble+0x6>
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <MDIO_AssignValueLowNibble+0x8>
    2e04:	0f 92       	push	r0
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	8a 83       	std	Y+2, r24	; 0x02
    2e0c:	6b 83       	std	Y+3, r22	; 0x03
	MDIO_enumError_t state = MDIO_enumErrorOpre;
    2e0e:	86 e0       	ldi	r24, 0x06	; 6
    2e10:	89 83       	std	Y+1, r24	; 0x01
	
	/*
	  * Clear HIGH because we need only the low nibble value to be assigned to Port so we cleared any unrequited value (Value &= 0X0F)
	 */
	CLR_HIGH_NIB(uinit8_tLowNibblePortValue); 
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	8f 70       	andi	r24, 0x0F	; 15
    2e16:	8b 83       	std	Y+3, r24	; 0x03
	
	switch(Copy_uinit8PortNum)
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	3d 83       	std	Y+5, r19	; 0x05
    2e20:	2c 83       	std	Y+4, r18	; 0x04
    2e22:	8c 81       	ldd	r24, Y+4	; 0x04
    2e24:	9d 81       	ldd	r25, Y+5	; 0x05
    2e26:	81 30       	cpi	r24, 0x01	; 1
    2e28:	91 05       	cpc	r25, r1
    2e2a:	31 f1       	breq	.+76     	; 0x2e78 <MDIO_AssignValueLowNibble+0x7c>
    2e2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e30:	22 30       	cpi	r18, 0x02	; 2
    2e32:	31 05       	cpc	r19, r1
    2e34:	2c f4       	brge	.+10     	; 0x2e40 <MDIO_AssignValueLowNibble+0x44>
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3a:	00 97       	sbiw	r24, 0x00	; 0
    2e3c:	61 f0       	breq	.+24     	; 0x2e56 <MDIO_AssignValueLowNibble+0x5a>
    2e3e:	4f c0       	rjmp	.+158    	; 0x2ede <MDIO_AssignValueLowNibble+0xe2>
    2e40:	2c 81       	ldd	r18, Y+4	; 0x04
    2e42:	3d 81       	ldd	r19, Y+5	; 0x05
    2e44:	22 30       	cpi	r18, 0x02	; 2
    2e46:	31 05       	cpc	r19, r1
    2e48:	41 f1       	breq	.+80     	; 0x2e9a <MDIO_AssignValueLowNibble+0x9e>
    2e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4e:	83 30       	cpi	r24, 0x03	; 3
    2e50:	91 05       	cpc	r25, r1
    2e52:	a1 f1       	breq	.+104    	; 0x2ebc <MDIO_AssignValueLowNibble+0xc0>
    2e54:	44 c0       	rjmp	.+136    	; 0x2ede <MDIO_AssignValueLowNibble+0xe2>
	{
		
		case MDIO_enumPortA : CLR_LOW_NIB (MDIO_PORTA); WRITE_REG_VAL(MDIO_PORTA,uinit8_tLowNibblePortValue); state = MDIO_enumOk; break; 
    2e56:	ab e3       	ldi	r26, 0x3B	; 59
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	eb e3       	ldi	r30, 0x3B	; 59
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	80 7f       	andi	r24, 0xF0	; 240
    2e62:	8c 93       	st	X, r24
    2e64:	ab e3       	ldi	r26, 0x3B	; 59
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	eb e3       	ldi	r30, 0x3B	; 59
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	90 81       	ld	r25, Z
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	89 2b       	or	r24, r25
    2e72:	8c 93       	st	X, r24
    2e74:	19 82       	std	Y+1, r1	; 0x01
    2e76:	35 c0       	rjmp	.+106    	; 0x2ee2 <MDIO_AssignValueLowNibble+0xe6>
		case MDIO_enumPortB : CLR_LOW_NIB (MDIO_PORTB); WRITE_REG_VAL(MDIO_PORTB,uinit8_tLowNibblePortValue); state = MDIO_enumOk; break;
    2e78:	a8 e3       	ldi	r26, 0x38	; 56
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	e8 e3       	ldi	r30, 0x38	; 56
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	80 7f       	andi	r24, 0xF0	; 240
    2e84:	8c 93       	st	X, r24
    2e86:	a8 e3       	ldi	r26, 0x38	; 56
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	e8 e3       	ldi	r30, 0x38	; 56
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	90 81       	ld	r25, Z
    2e90:	8b 81       	ldd	r24, Y+3	; 0x03
    2e92:	89 2b       	or	r24, r25
    2e94:	8c 93       	st	X, r24
    2e96:	19 82       	std	Y+1, r1	; 0x01
    2e98:	24 c0       	rjmp	.+72     	; 0x2ee2 <MDIO_AssignValueLowNibble+0xe6>
		case MDIO_enumPortC : CLR_LOW_NIB (MDIO_PORTC); WRITE_REG_VAL(MDIO_PORTC,uinit8_tLowNibblePortValue); state = MDIO_enumOk; break;
    2e9a:	a5 e3       	ldi	r26, 0x35	; 53
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	80 7f       	andi	r24, 0xF0	; 240
    2ea6:	8c 93       	st	X, r24
    2ea8:	a5 e3       	ldi	r26, 0x35	; 53
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e5 e3       	ldi	r30, 0x35	; 53
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	90 81       	ld	r25, Z
    2eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb4:	89 2b       	or	r24, r25
    2eb6:	8c 93       	st	X, r24
    2eb8:	19 82       	std	Y+1, r1	; 0x01
    2eba:	13 c0       	rjmp	.+38     	; 0x2ee2 <MDIO_AssignValueLowNibble+0xe6>
		case MDIO_enumPortD : CLR_LOW_NIB (MDIO_PORTD); WRITE_REG_VAL(MDIO_PORTD,uinit8_tLowNibblePortValue); state = MDIO_enumOk; break;
    2ebc:	a2 e3       	ldi	r26, 0x32	; 50
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e2 e3       	ldi	r30, 0x32	; 50
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	80 7f       	andi	r24, 0xF0	; 240
    2ec8:	8c 93       	st	X, r24
    2eca:	a2 e3       	ldi	r26, 0x32	; 50
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e2 e3       	ldi	r30, 0x32	; 50
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	90 81       	ld	r25, Z
    2ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed6:	89 2b       	or	r24, r25
    2ed8:	8c 93       	st	X, r24
    2eda:	19 82       	std	Y+1, r1	; 0x01
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <MDIO_AssignValueLowNibble+0xe6>
		
		default :
		{
			
			state = MDIO_enumErrorOpre;
    2ede:	86 e0       	ldi	r24, 0x06	; 6
    2ee0:	89 83       	std	Y+1, r24	; 0x01
			
		}
	}
	
	return state;
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	cf 91       	pop	r28
    2ef0:	df 91       	pop	r29
    2ef2:	08 95       	ret

00002ef4 <MDIO_GetPinValueReturn>:
uinit8_t MDIO_GetPinValueReturn      (MDIO_enumPorts_t Copy_uinit8PortNum,MDIO_enumPins_t Copy_uinit8PinNum)
{
    2ef4:	df 93       	push	r29
    2ef6:	cf 93       	push	r28
    2ef8:	00 d0       	rcall	.+0      	; 0x2efa <MDIO_GetPinValueReturn+0x6>
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <MDIO_GetPinValueReturn+0x8>
    2efc:	0f 92       	push	r0
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	8a 83       	std	Y+2, r24	; 0x02
    2f04:	6b 83       	std	Y+3, r22	; 0x03
	uinit8_t Get_Puinit8_tPinValue;

	if(((Copy_uinit8PortNum>4) || (Copy_uinit8PortNum<0)) && ((Copy_uinit8PinNum<0) || (Copy_uinit8PinNum>8)))
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	85 30       	cpi	r24, 0x05	; 5
    2f0a:	30 f0       	brcs	.+12     	; 0x2f18 <MDIO_GetPinValueReturn+0x24>
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	89 30       	cpi	r24, 0x09	; 9
    2f10:	18 f0       	brcs	.+6      	; 0x2f18 <MDIO_GetPinValueReturn+0x24>
	{
		Get_Puinit8_tPinValue=-1;
    2f12:	8f ef       	ldi	r24, 0xFF	; 255
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	6a c0       	rjmp	.+212    	; 0x2fec <MDIO_GetPinValueReturn+0xf8>
	}
	else
	{
		switch (Copy_uinit8PortNum)
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	3d 83       	std	Y+5, r19	; 0x05
    2f20:	2c 83       	std	Y+4, r18	; 0x04
    2f22:	4c 81       	ldd	r20, Y+4	; 0x04
    2f24:	5d 81       	ldd	r21, Y+5	; 0x05
    2f26:	41 30       	cpi	r20, 0x01	; 1
    2f28:	51 05       	cpc	r21, r1
    2f2a:	41 f1       	breq	.+80     	; 0x2f7c <MDIO_GetPinValueReturn+0x88>
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f30:	82 30       	cpi	r24, 0x02	; 2
    2f32:	91 05       	cpc	r25, r1
    2f34:	34 f4       	brge	.+12     	; 0x2f42 <MDIO_GetPinValueReturn+0x4e>
    2f36:	2c 81       	ldd	r18, Y+4	; 0x04
    2f38:	3d 81       	ldd	r19, Y+5	; 0x05
    2f3a:	21 15       	cp	r18, r1
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	61 f0       	breq	.+24     	; 0x2f58 <MDIO_GetPinValueReturn+0x64>
    2f40:	53 c0       	rjmp	.+166    	; 0x2fe8 <MDIO_GetPinValueReturn+0xf4>
    2f42:	4c 81       	ldd	r20, Y+4	; 0x04
    2f44:	5d 81       	ldd	r21, Y+5	; 0x05
    2f46:	42 30       	cpi	r20, 0x02	; 2
    2f48:	51 05       	cpc	r21, r1
    2f4a:	51 f1       	breq	.+84     	; 0x2fa0 <MDIO_GetPinValueReturn+0xac>
    2f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f50:	83 30       	cpi	r24, 0x03	; 3
    2f52:	91 05       	cpc	r25, r1
    2f54:	b9 f1       	breq	.+110    	; 0x2fc4 <MDIO_GetPinValueReturn+0xd0>
    2f56:	48 c0       	rjmp	.+144    	; 0x2fe8 <MDIO_GetPinValueReturn+0xf4>
		{
			case MDIO_enumPortA : Get_Puinit8_tPinValue = READ_BIT(MDIO_PINA,Copy_uinit8PinNum) ; break;
    2f58:	e9 e3       	ldi	r30, 0x39	; 57
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	8b 81       	ldd	r24, Y+3	; 0x03
    2f64:	88 2f       	mov	r24, r24
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a9 01       	movw	r20, r18
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <MDIO_GetPinValueReturn+0x7c>
    2f6c:	55 95       	asr	r21
    2f6e:	47 95       	ror	r20
    2f70:	8a 95       	dec	r24
    2f72:	e2 f7       	brpl	.-8      	; 0x2f6c <MDIO_GetPinValueReturn+0x78>
    2f74:	ca 01       	movw	r24, r20
    2f76:	81 70       	andi	r24, 0x01	; 1
    2f78:	89 83       	std	Y+1, r24	; 0x01
    2f7a:	38 c0       	rjmp	.+112    	; 0x2fec <MDIO_GetPinValueReturn+0xf8>
			case MDIO_enumPortB : Get_Puinit8_tPinValue = READ_BIT(MDIO_PINB,Copy_uinit8PinNum) ; break;
    2f7c:	e6 e3       	ldi	r30, 0x36	; 54
    2f7e:	f0 e0       	ldi	r31, 0x00	; 0
    2f80:	80 81       	ld	r24, Z
    2f82:	28 2f       	mov	r18, r24
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	8b 81       	ldd	r24, Y+3	; 0x03
    2f88:	88 2f       	mov	r24, r24
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	a9 01       	movw	r20, r18
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <MDIO_GetPinValueReturn+0xa0>
    2f90:	55 95       	asr	r21
    2f92:	47 95       	ror	r20
    2f94:	8a 95       	dec	r24
    2f96:	e2 f7       	brpl	.-8      	; 0x2f90 <MDIO_GetPinValueReturn+0x9c>
    2f98:	ca 01       	movw	r24, r20
    2f9a:	81 70       	andi	r24, 0x01	; 1
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	26 c0       	rjmp	.+76     	; 0x2fec <MDIO_GetPinValueReturn+0xf8>
			case MDIO_enumPortC : Get_Puinit8_tPinValue = READ_BIT(MDIO_PINC,Copy_uinit8PinNum) ; break;
    2fa0:	e3 e3       	ldi	r30, 0x33	; 51
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a9 01       	movw	r20, r18
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <MDIO_GetPinValueReturn+0xc4>
    2fb4:	55 95       	asr	r21
    2fb6:	47 95       	ror	r20
    2fb8:	8a 95       	dec	r24
    2fba:	e2 f7       	brpl	.-8      	; 0x2fb4 <MDIO_GetPinValueReturn+0xc0>
    2fbc:	ca 01       	movw	r24, r20
    2fbe:	81 70       	andi	r24, 0x01	; 1
    2fc0:	89 83       	std	Y+1, r24	; 0x01
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <MDIO_GetPinValueReturn+0xf8>
			case MDIO_enumPortD : Get_Puinit8_tPinValue = READ_BIT(MDIO_PIND,Copy_uinit8PinNum) ; break;
    2fc4:	e0 e3       	ldi	r30, 0x30	; 48
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	88 2f       	mov	r24, r24
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	a9 01       	movw	r20, r18
    2fd6:	02 c0       	rjmp	.+4      	; 0x2fdc <MDIO_GetPinValueReturn+0xe8>
    2fd8:	55 95       	asr	r21
    2fda:	47 95       	ror	r20
    2fdc:	8a 95       	dec	r24
    2fde:	e2 f7       	brpl	.-8      	; 0x2fd8 <MDIO_GetPinValueReturn+0xe4>
    2fe0:	ca 01       	movw	r24, r20
    2fe2:	81 70       	andi	r24, 0x01	; 1
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <MDIO_GetPinValueReturn+0xf8>
			default :
			{
				Get_Puinit8_tPinValue=-1;
    2fe8:	8f ef       	ldi	r24, 0xFF	; 255
    2fea:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	}

	return Get_Puinit8_tPinValue;
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	cf 91       	pop	r28
    2ffa:	df 91       	pop	r29
    2ffc:	08 95       	ret

00002ffe <main>:




int main(void)
{
    2ffe:	0f 93       	push	r16
    3000:	1f 93       	push	r17
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	c4 55       	subi	r28, 0x54	; 84
    300c:	d0 40       	sbci	r29, 0x00	; 0
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
	 HAL_LCD_Init();
    3018:	0e 94 9b 05 	call	0xb36	; 0xb36 <HAL_LCD_Init>
	 LCD_init();
    301c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <LCD_init>
	 LCD_enuWriteNumber(-776);
    3020:	88 ef       	ldi	r24, 0xF8	; 248
    3022:	9c ef       	ldi	r25, 0xFC	; 252
    3024:	0e 94 bb 09 	call	0x1376	; 0x1376 <LCD_enuWriteNumber>
    3028:	fe 01       	movw	r30, r28
    302a:	ef 5a       	subi	r30, 0xAF	; 175
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 ec       	ldi	r25, 0xC0	; 192
    3032:	aa ed       	ldi	r26, 0xDA	; 218
    3034:	b5 e4       	ldi	r27, 0x45	; 69
    3036:	80 83       	st	Z, r24
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	a2 83       	std	Z+2, r26	; 0x02
    303c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303e:	8e 01       	movw	r16, r28
    3040:	03 5b       	subi	r16, 0xB3	; 179
    3042:	1f 4f       	sbci	r17, 0xFF	; 255
    3044:	fe 01       	movw	r30, r28
    3046:	ef 5a       	subi	r30, 0xAF	; 175
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	4a ef       	ldi	r20, 0xFA	; 250
    3058:	54 e4       	ldi	r21, 0x44	; 68
    305a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	f8 01       	movw	r30, r16
    3064:	80 83       	st	Z, r24
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	a2 83       	std	Z+2, r26	; 0x02
    306a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306c:	fe 01       	movw	r30, r28
    306e:	e3 5b       	subi	r30, 0xB3	; 179
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	44 f4       	brge	.+16     	; 0x309a <main+0x9c>
		__ticks = 1;
    308a:	fe 01       	movw	r30, r28
    308c:	e5 5b       	subi	r30, 0xB5	; 181
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
    3098:	64 c0       	rjmp	.+200    	; 0x3162 <main+0x164>
	else if (__tmp > 65535)
    309a:	fe 01       	movw	r30, r28
    309c:	e3 5b       	subi	r30, 0xB3	; 179
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	60 81       	ld	r22, Z
    30a2:	71 81       	ldd	r23, Z+1	; 0x01
    30a4:	82 81       	ldd	r24, Z+2	; 0x02
    30a6:	93 81       	ldd	r25, Z+3	; 0x03
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	3f ef       	ldi	r19, 0xFF	; 255
    30ac:	4f e7       	ldi	r20, 0x7F	; 127
    30ae:	57 e4       	ldi	r21, 0x47	; 71
    30b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    30b4:	18 16       	cp	r1, r24
    30b6:	0c f0       	brlt	.+2      	; 0x30ba <main+0xbc>
    30b8:	43 c0       	rjmp	.+134    	; 0x3140 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ba:	fe 01       	movw	r30, r28
    30bc:	ef 5a       	subi	r30, 0xAF	; 175
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	60 81       	ld	r22, Z
    30c2:	71 81       	ldd	r23, Z+1	; 0x01
    30c4:	82 81       	ldd	r24, Z+2	; 0x02
    30c6:	93 81       	ldd	r25, Z+3	; 0x03
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	8e 01       	movw	r16, r28
    30da:	05 5b       	subi	r16, 0xB5	; 181
    30dc:	1f 4f       	sbci	r17, 0xFF	; 255
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	f8 01       	movw	r30, r16
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
    30f0:	1f c0       	rjmp	.+62     	; 0x3130 <main+0x132>
    30f2:	fe 01       	movw	r30, r28
    30f4:	e7 5b       	subi	r30, 0xB7	; 183
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	88 ec       	ldi	r24, 0xC8	; 200
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	fe 01       	movw	r30, r28
    3102:	e7 5b       	subi	r30, 0xB7	; 183
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	80 81       	ld	r24, Z
    3108:	91 81       	ldd	r25, Z+1	; 0x01
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <main+0x10c>
    310e:	fe 01       	movw	r30, r28
    3110:	e7 5b       	subi	r30, 0xB7	; 183
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	91 83       	std	Z+1, r25	; 0x01
    3116:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3118:	de 01       	movw	r26, r28
    311a:	a5 5b       	subi	r26, 0xB5	; 181
    311c:	bf 4f       	sbci	r27, 0xFF	; 255
    311e:	fe 01       	movw	r30, r28
    3120:	e5 5b       	subi	r30, 0xB5	; 181
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	91 81       	ldd	r25, Z+1	; 0x01
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	11 96       	adiw	r26, 0x01	; 1
    312c:	9c 93       	st	X, r25
    312e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3130:	fe 01       	movw	r30, r28
    3132:	e5 5b       	subi	r30, 0xB5	; 181
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	d1 f6       	brne	.-76     	; 0x30f2 <main+0xf4>
    313e:	27 c0       	rjmp	.+78     	; 0x318e <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	8e 01       	movw	r16, r28
    3142:	05 5b       	subi	r16, 0xB5	; 181
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	fe 01       	movw	r30, r28
    3148:	e3 5b       	subi	r30, 0xB3	; 179
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	f8 01       	movw	r30, r16
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	80 83       	st	Z, r24
    3162:	de 01       	movw	r26, r28
    3164:	a9 5b       	subi	r26, 0xB9	; 185
    3166:	bf 4f       	sbci	r27, 0xFF	; 255
    3168:	fe 01       	movw	r30, r28
    316a:	e5 5b       	subi	r30, 0xB5	; 181
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	80 81       	ld	r24, Z
    3170:	91 81       	ldd	r25, Z+1	; 0x01
    3172:	8d 93       	st	X+, r24
    3174:	9c 93       	st	X, r25
    3176:	fe 01       	movw	r30, r28
    3178:	e9 5b       	subi	r30, 0xB9	; 185
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <main+0x182>
    3184:	fe 01       	movw	r30, r28
    3186:	e9 5b       	subi	r30, 0xB9	; 185
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
	 _delay_ms(7000);
	 LCD_enuWriteCommand(0x01);
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
    3194:	fe 01       	movw	r30, r28
    3196:	ed 5b       	subi	r30, 0xBD	; 189
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	90 ec       	ldi	r25, 0xC0	; 192
    319e:	aa ed       	ldi	r26, 0xDA	; 218
    31a0:	b5 e4       	ldi	r27, 0x45	; 69
    31a2:	80 83       	st	Z, r24
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	a2 83       	std	Z+2, r26	; 0x02
    31a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31aa:	8e 01       	movw	r16, r28
    31ac:	01 5c       	subi	r16, 0xC1	; 193
    31ae:	1f 4f       	sbci	r17, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	ed 5b       	subi	r30, 0xBD	; 189
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a ef       	ldi	r20, 0xFA	; 250
    31c4:	54 e4       	ldi	r21, 0x44	; 68
    31c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	f8 01       	movw	r30, r16
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31d8:	fe 01       	movw	r30, r28
    31da:	ff 96       	adiw	r30, 0x3f	; 63
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	93 81       	ldd	r25, Z+3	; 0x03
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e8       	ldi	r20, 0x80	; 128
    31ea:	5f e3       	ldi	r21, 0x3F	; 63
    31ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31f0:	88 23       	and	r24, r24
    31f2:	2c f4       	brge	.+10     	; 0x31fe <main+0x200>
		__ticks = 1;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	9e af       	std	Y+62, r25	; 0x3e
    31fa:	8d af       	std	Y+61, r24	; 0x3d
    31fc:	46 c0       	rjmp	.+140    	; 0x328a <main+0x28c>
	else if (__tmp > 65535)
    31fe:	fe 01       	movw	r30, r28
    3200:	ff 96       	adiw	r30, 0x3f	; 63
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	3f ef       	ldi	r19, 0xFF	; 255
    320e:	4f e7       	ldi	r20, 0x7F	; 127
    3210:	57 e4       	ldi	r21, 0x47	; 71
    3212:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3216:	18 16       	cp	r1, r24
    3218:	64 f5       	brge	.+88     	; 0x3272 <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321a:	fe 01       	movw	r30, r28
    321c:	ed 5b       	subi	r30, 0xBD	; 189
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	40 e2       	ldi	r20, 0x20	; 32
    322e:	51 e4       	ldi	r21, 0x41	; 65
    3230:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	9e af       	std	Y+62, r25	; 0x3e
    3246:	8d af       	std	Y+61, r24	; 0x3d
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <main+0x26a>
    324a:	88 ec       	ldi	r24, 0xC8	; 200
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9c af       	std	Y+60, r25	; 0x3c
    3250:	8b af       	std	Y+59, r24	; 0x3b
    3252:	8b ad       	ldd	r24, Y+59	; 0x3b
    3254:	9c ad       	ldd	r25, Y+60	; 0x3c
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <main+0x258>
    325a:	9c af       	std	Y+60, r25	; 0x3c
    325c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3260:	9e ad       	ldd	r25, Y+62	; 0x3e
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	9e af       	std	Y+62, r25	; 0x3e
    3266:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3268:	8d ad       	ldd	r24, Y+61	; 0x3d
    326a:	9e ad       	ldd	r25, Y+62	; 0x3e
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f7       	brne	.-38     	; 0x324a <main+0x24c>
    3270:	16 c0       	rjmp	.+44     	; 0x329e <main+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3272:	fe 01       	movw	r30, r28
    3274:	ff 96       	adiw	r30, 0x3f	; 63
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	9e af       	std	Y+62, r25	; 0x3e
    3288:	8d af       	std	Y+61, r24	; 0x3d
    328a:	8d ad       	ldd	r24, Y+61	; 0x3d
    328c:	9e ad       	ldd	r25, Y+62	; 0x3e
    328e:	9a af       	std	Y+58, r25	; 0x3a
    3290:	89 af       	std	Y+57, r24	; 0x39
    3292:	89 ad       	ldd	r24, Y+57	; 0x39
    3294:	9a ad       	ldd	r25, Y+58	; 0x3a
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <main+0x298>
    329a:	9a af       	std	Y+58, r25	; 0x3a
    329c:	89 af       	std	Y+57, r24	; 0x39
	 _delay_ms(7000);
	 LCD_enuWriteNumber(0);
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	0e 94 bb 09 	call	0x1376	; 0x1376 <LCD_enuWriteNumber>
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 ec       	ldi	r25, 0xC0	; 192
    32aa:	aa ed       	ldi	r26, 0xDA	; 218
    32ac:	b5 e4       	ldi	r27, 0x45	; 69
    32ae:	8d ab       	std	Y+53, r24	; 0x35
    32b0:	9e ab       	std	Y+54, r25	; 0x36
    32b2:	af ab       	std	Y+55, r26	; 0x37
    32b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b6:	6d a9       	ldd	r22, Y+53	; 0x35
    32b8:	7e a9       	ldd	r23, Y+54	; 0x36
    32ba:	8f a9       	ldd	r24, Y+55	; 0x37
    32bc:	98 ad       	ldd	r25, Y+56	; 0x38
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	4a ef       	ldi	r20, 0xFA	; 250
    32c4:	54 e4       	ldi	r21, 0x44	; 68
    32c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	89 ab       	std	Y+49, r24	; 0x31
    32d0:	9a ab       	std	Y+50, r25	; 0x32
    32d2:	ab ab       	std	Y+51, r26	; 0x33
    32d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32d6:	69 a9       	ldd	r22, Y+49	; 0x31
    32d8:	7a a9       	ldd	r23, Y+50	; 0x32
    32da:	8b a9       	ldd	r24, Y+51	; 0x33
    32dc:	9c a9       	ldd	r25, Y+52	; 0x34
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e8       	ldi	r20, 0x80	; 128
    32e4:	5f e3       	ldi	r21, 0x3F	; 63
    32e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32ea:	88 23       	and	r24, r24
    32ec:	2c f4       	brge	.+10     	; 0x32f8 <main+0x2fa>
		__ticks = 1;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	98 ab       	std	Y+48, r25	; 0x30
    32f4:	8f a7       	std	Y+47, r24	; 0x2f
    32f6:	3f c0       	rjmp	.+126    	; 0x3376 <main+0x378>
	else if (__tmp > 65535)
    32f8:	69 a9       	ldd	r22, Y+49	; 0x31
    32fa:	7a a9       	ldd	r23, Y+50	; 0x32
    32fc:	8b a9       	ldd	r24, Y+51	; 0x33
    32fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	3f ef       	ldi	r19, 0xFF	; 255
    3304:	4f e7       	ldi	r20, 0x7F	; 127
    3306:	57 e4       	ldi	r21, 0x47	; 71
    3308:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    330c:	18 16       	cp	r1, r24
    330e:	4c f5       	brge	.+82     	; 0x3362 <main+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3310:	6d a9       	ldd	r22, Y+53	; 0x35
    3312:	7e a9       	ldd	r23, Y+54	; 0x36
    3314:	8f a9       	ldd	r24, Y+55	; 0x37
    3316:	98 ad       	ldd	r25, Y+56	; 0x38
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e2       	ldi	r20, 0x20	; 32
    331e:	51 e4       	ldi	r21, 0x41	; 65
    3320:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	bc 01       	movw	r22, r24
    332a:	cd 01       	movw	r24, r26
    332c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	98 ab       	std	Y+48, r25	; 0x30
    3336:	8f a7       	std	Y+47, r24	; 0x2f
    3338:	0f c0       	rjmp	.+30     	; 0x3358 <main+0x35a>
    333a:	88 ec       	ldi	r24, 0xC8	; 200
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	9e a7       	std	Y+46, r25	; 0x2e
    3340:	8d a7       	std	Y+45, r24	; 0x2d
    3342:	8d a5       	ldd	r24, Y+45	; 0x2d
    3344:	9e a5       	ldd	r25, Y+46	; 0x2e
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <main+0x348>
    334a:	9e a7       	std	Y+46, r25	; 0x2e
    334c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3350:	98 a9       	ldd	r25, Y+48	; 0x30
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	98 ab       	std	Y+48, r25	; 0x30
    3356:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3358:	8f a5       	ldd	r24, Y+47	; 0x2f
    335a:	98 a9       	ldd	r25, Y+48	; 0x30
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	69 f7       	brne	.-38     	; 0x333a <main+0x33c>
    3360:	14 c0       	rjmp	.+40     	; 0x338a <main+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3362:	69 a9       	ldd	r22, Y+49	; 0x31
    3364:	7a a9       	ldd	r23, Y+50	; 0x32
    3366:	8b a9       	ldd	r24, Y+51	; 0x33
    3368:	9c a9       	ldd	r25, Y+52	; 0x34
    336a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	98 ab       	std	Y+48, r25	; 0x30
    3374:	8f a7       	std	Y+47, r24	; 0x2f
    3376:	8f a5       	ldd	r24, Y+47	; 0x2f
    3378:	98 a9       	ldd	r25, Y+48	; 0x30
    337a:	9c a7       	std	Y+44, r25	; 0x2c
    337c:	8b a7       	std	Y+43, r24	; 0x2b
    337e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3380:	9c a5       	ldd	r25, Y+44	; 0x2c
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	f1 f7       	brne	.-4      	; 0x3382 <main+0x384>
    3386:	9c a7       	std	Y+44, r25	; 0x2c
    3388:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(7000);
	 LCD_enuWriteCommand(0x01);
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
	 LCD_enuWriteNumber(15845);
    3390:	85 ee       	ldi	r24, 0xE5	; 229
    3392:	9d e3       	ldi	r25, 0x3D	; 61
    3394:	0e 94 bb 09 	call	0x1376	; 0x1376 <LCD_enuWriteNumber>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 ec       	ldi	r25, 0xC0	; 192
    339c:	aa ed       	ldi	r26, 0xDA	; 218
    339e:	b5 e4       	ldi	r27, 0x45	; 69
    33a0:	8f a3       	std	Y+39, r24	; 0x27
    33a2:	98 a7       	std	Y+40, r25	; 0x28
    33a4:	a9 a7       	std	Y+41, r26	; 0x29
    33a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33a8:	6f a1       	ldd	r22, Y+39	; 0x27
    33aa:	78 a5       	ldd	r23, Y+40	; 0x28
    33ac:	89 a5       	ldd	r24, Y+41	; 0x29
    33ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	4a ef       	ldi	r20, 0xFA	; 250
    33b6:	54 e4       	ldi	r21, 0x44	; 68
    33b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33bc:	dc 01       	movw	r26, r24
    33be:	cb 01       	movw	r24, r22
    33c0:	8b a3       	std	Y+35, r24	; 0x23
    33c2:	9c a3       	std	Y+36, r25	; 0x24
    33c4:	ad a3       	std	Y+37, r26	; 0x25
    33c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33c8:	6b a1       	ldd	r22, Y+35	; 0x23
    33ca:	7c a1       	ldd	r23, Y+36	; 0x24
    33cc:	8d a1       	ldd	r24, Y+37	; 0x25
    33ce:	9e a1       	ldd	r25, Y+38	; 0x26
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	5f e3       	ldi	r21, 0x3F	; 63
    33d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33dc:	88 23       	and	r24, r24
    33de:	2c f4       	brge	.+10     	; 0x33ea <main+0x3ec>
		__ticks = 1;
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	9a a3       	std	Y+34, r25	; 0x22
    33e6:	89 a3       	std	Y+33, r24	; 0x21
    33e8:	3f c0       	rjmp	.+126    	; 0x3468 <main+0x46a>
	else if (__tmp > 65535)
    33ea:	6b a1       	ldd	r22, Y+35	; 0x23
    33ec:	7c a1       	ldd	r23, Y+36	; 0x24
    33ee:	8d a1       	ldd	r24, Y+37	; 0x25
    33f0:	9e a1       	ldd	r25, Y+38	; 0x26
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	3f ef       	ldi	r19, 0xFF	; 255
    33f6:	4f e7       	ldi	r20, 0x7F	; 127
    33f8:	57 e4       	ldi	r21, 0x47	; 71
    33fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    33fe:	18 16       	cp	r1, r24
    3400:	4c f5       	brge	.+82     	; 0x3454 <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3402:	6f a1       	ldd	r22, Y+39	; 0x27
    3404:	78 a5       	ldd	r23, Y+40	; 0x28
    3406:	89 a5       	ldd	r24, Y+41	; 0x29
    3408:	9a a5       	ldd	r25, Y+42	; 0x2a
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e2       	ldi	r20, 0x20	; 32
    3410:	51 e4       	ldi	r21, 0x41	; 65
    3412:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	9a a3       	std	Y+34, r25	; 0x22
    3428:	89 a3       	std	Y+33, r24	; 0x21
    342a:	0f c0       	rjmp	.+30     	; 0x344a <main+0x44c>
    342c:	88 ec       	ldi	r24, 0xC8	; 200
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	98 a3       	std	Y+32, r25	; 0x20
    3432:	8f 8f       	std	Y+31, r24	; 0x1f
    3434:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3436:	98 a1       	ldd	r25, Y+32	; 0x20
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <main+0x43a>
    343c:	98 a3       	std	Y+32, r25	; 0x20
    343e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3440:	89 a1       	ldd	r24, Y+33	; 0x21
    3442:	9a a1       	ldd	r25, Y+34	; 0x22
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	9a a3       	std	Y+34, r25	; 0x22
    3448:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344a:	89 a1       	ldd	r24, Y+33	; 0x21
    344c:	9a a1       	ldd	r25, Y+34	; 0x22
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	69 f7       	brne	.-38     	; 0x342c <main+0x42e>
    3452:	14 c0       	rjmp	.+40     	; 0x347c <main+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	6b a1       	ldd	r22, Y+35	; 0x23
    3456:	7c a1       	ldd	r23, Y+36	; 0x24
    3458:	8d a1       	ldd	r24, Y+37	; 0x25
    345a:	9e a1       	ldd	r25, Y+38	; 0x26
    345c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9a a3       	std	Y+34, r25	; 0x22
    3466:	89 a3       	std	Y+33, r24	; 0x21
    3468:	89 a1       	ldd	r24, Y+33	; 0x21
    346a:	9a a1       	ldd	r25, Y+34	; 0x22
    346c:	9e 8f       	std	Y+30, r25	; 0x1e
    346e:	8d 8f       	std	Y+29, r24	; 0x1d
    3470:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3472:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <main+0x476>
    3478:	9e 8f       	std	Y+30, r25	; 0x1e
    347a:	8d 8f       	std	Y+29, r24	; 0x1d
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	90 ec       	ldi	r25, 0xC0	; 192
    3480:	aa ed       	ldi	r26, 0xDA	; 218
    3482:	b5 e4       	ldi	r27, 0x45	; 69
    3484:	89 8f       	std	Y+25, r24	; 0x19
    3486:	9a 8f       	std	Y+26, r25	; 0x1a
    3488:	ab 8f       	std	Y+27, r26	; 0x1b
    348a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    348c:	69 8d       	ldd	r22, Y+25	; 0x19
    348e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	4a ef       	ldi	r20, 0xFA	; 250
    349a:	54 e4       	ldi	r21, 0x44	; 68
    349c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	8d 8b       	std	Y+21, r24	; 0x15
    34a6:	9e 8b       	std	Y+22, r25	; 0x16
    34a8:	af 8b       	std	Y+23, r26	; 0x17
    34aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34ac:	6d 89       	ldd	r22, Y+21	; 0x15
    34ae:	7e 89       	ldd	r23, Y+22	; 0x16
    34b0:	8f 89       	ldd	r24, Y+23	; 0x17
    34b2:	98 8d       	ldd	r25, Y+24	; 0x18
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e8       	ldi	r20, 0x80	; 128
    34ba:	5f e3       	ldi	r21, 0x3F	; 63
    34bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34c0:	88 23       	and	r24, r24
    34c2:	2c f4       	brge	.+10     	; 0x34ce <main+0x4d0>
		__ticks = 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	9c 8b       	std	Y+20, r25	; 0x14
    34ca:	8b 8b       	std	Y+19, r24	; 0x13
    34cc:	3f c0       	rjmp	.+126    	; 0x354c <main+0x54e>
	else if (__tmp > 65535)
    34ce:	6d 89       	ldd	r22, Y+21	; 0x15
    34d0:	7e 89       	ldd	r23, Y+22	; 0x16
    34d2:	8f 89       	ldd	r24, Y+23	; 0x17
    34d4:	98 8d       	ldd	r25, Y+24	; 0x18
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	3f ef       	ldi	r19, 0xFF	; 255
    34da:	4f e7       	ldi	r20, 0x7F	; 127
    34dc:	57 e4       	ldi	r21, 0x47	; 71
    34de:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34e2:	18 16       	cp	r1, r24
    34e4:	4c f5       	brge	.+82     	; 0x3538 <main+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	69 8d       	ldd	r22, Y+25	; 0x19
    34e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e2       	ldi	r20, 0x20	; 32
    34f4:	51 e4       	ldi	r21, 0x41	; 65
    34f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9c 8b       	std	Y+20, r25	; 0x14
    350c:	8b 8b       	std	Y+19, r24	; 0x13
    350e:	0f c0       	rjmp	.+30     	; 0x352e <main+0x530>
    3510:	88 ec       	ldi	r24, 0xC8	; 200
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9a 8b       	std	Y+18, r25	; 0x12
    3516:	89 8b       	std	Y+17, r24	; 0x11
    3518:	89 89       	ldd	r24, Y+17	; 0x11
    351a:	9a 89       	ldd	r25, Y+18	; 0x12
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <main+0x51e>
    3520:	9a 8b       	std	Y+18, r25	; 0x12
    3522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3524:	8b 89       	ldd	r24, Y+19	; 0x13
    3526:	9c 89       	ldd	r25, Y+20	; 0x14
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	9c 8b       	std	Y+20, r25	; 0x14
    352c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    352e:	8b 89       	ldd	r24, Y+19	; 0x13
    3530:	9c 89       	ldd	r25, Y+20	; 0x14
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	69 f7       	brne	.-38     	; 0x3510 <main+0x512>
    3536:	14 c0       	rjmp	.+40     	; 0x3560 <main+0x562>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3538:	6d 89       	ldd	r22, Y+21	; 0x15
    353a:	7e 89       	ldd	r23, Y+22	; 0x16
    353c:	8f 89       	ldd	r24, Y+23	; 0x17
    353e:	98 8d       	ldd	r25, Y+24	; 0x18
    3540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
    354c:	8b 89       	ldd	r24, Y+19	; 0x13
    354e:	9c 89       	ldd	r25, Y+20	; 0x14
    3550:	98 8b       	std	Y+16, r25	; 0x10
    3552:	8f 87       	std	Y+15, r24	; 0x0f
    3554:	8f 85       	ldd	r24, Y+15	; 0x0f
    3556:	98 89       	ldd	r25, Y+16	; 0x10
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <main+0x55a>
    355c:	98 8b       	std	Y+16, r25	; 0x10
    355e:	8f 87       	std	Y+15, r24	; 0x0f
	 */

	while(1)
	{
		  _delay_ms(7000);
		        LCD_enuWriteCommand(0x01);
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	0e 94 3c 08 	call	0x1078	; 0x1078 <LCD_enuWriteCommand>
		        LCD_enuGotoDDRAM_XY(1,1);
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	61 e0       	ldi	r22, 0x01	; 1
    356a:	0e 94 88 09 	call	0x1310	; 0x1310 <LCD_enuGotoDDRAM_XY>
		        LCD_enuWriteString(" Stop Watch ");
    356e:	80 e6       	ldi	r24, 0x60	; 96
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_enuWriteString>
		        LCD_enuGotoDDRAM_XY(2,1);
    3576:	82 e0       	ldi	r24, 0x02	; 2
    3578:	61 e0       	ldi	r22, 0x01	; 1
    357a:	0e 94 88 09 	call	0x1310	; 0x1310 <LCD_enuGotoDDRAM_XY>
		        LCD_enuWriteString("  00:00:00 ");
    357e:	8d e6       	ldi	r24, 0x6D	; 109
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	0e 94 25 0a 	call	0x144a	; 0x144a <LCD_enuWriteString>
    3586:	80 e0       	ldi	r24, 0x00	; 0
    3588:	90 ec       	ldi	r25, 0xC0	; 192
    358a:	aa ed       	ldi	r26, 0xDA	; 218
    358c:	b5 e4       	ldi	r27, 0x45	; 69
    358e:	8b 87       	std	Y+11, r24	; 0x0b
    3590:	9c 87       	std	Y+12, r25	; 0x0c
    3592:	ad 87       	std	Y+13, r26	; 0x0d
    3594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3596:	6b 85       	ldd	r22, Y+11	; 0x0b
    3598:	7c 85       	ldd	r23, Y+12	; 0x0c
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4a ef       	ldi	r20, 0xFA	; 250
    35a4:	54 e4       	ldi	r21, 0x44	; 68
    35a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	8f 83       	std	Y+7, r24	; 0x07
    35b0:	98 87       	std	Y+8, r25	; 0x08
    35b2:	a9 87       	std	Y+9, r26	; 0x09
    35b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b6:	6f 81       	ldd	r22, Y+7	; 0x07
    35b8:	78 85       	ldd	r23, Y+8	; 0x08
    35ba:	89 85       	ldd	r24, Y+9	; 0x09
    35bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e8       	ldi	r20, 0x80	; 128
    35c4:	5f e3       	ldi	r21, 0x3F	; 63
    35c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35ca:	88 23       	and	r24, r24
    35cc:	2c f4       	brge	.+10     	; 0x35d8 <main+0x5da>
		__ticks = 1;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9e 83       	std	Y+6, r25	; 0x06
    35d4:	8d 83       	std	Y+5, r24	; 0x05
    35d6:	3f c0       	rjmp	.+126    	; 0x3656 <main+0x658>
	else if (__tmp > 65535)
    35d8:	6f 81       	ldd	r22, Y+7	; 0x07
    35da:	78 85       	ldd	r23, Y+8	; 0x08
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	3f ef       	ldi	r19, 0xFF	; 255
    35e4:	4f e7       	ldi	r20, 0x7F	; 127
    35e6:	57 e4       	ldi	r21, 0x47	; 71
    35e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35ec:	18 16       	cp	r1, r24
    35ee:	4c f5       	brge	.+82     	; 0x3642 <main+0x644>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e2       	ldi	r20, 0x20	; 32
    35fe:	51 e4       	ldi	r21, 0x41	; 65
    3600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	bc 01       	movw	r22, r24
    360a:	cd 01       	movw	r24, r26
    360c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9e 83       	std	Y+6, r25	; 0x06
    3616:	8d 83       	std	Y+5, r24	; 0x05
    3618:	0f c0       	rjmp	.+30     	; 0x3638 <main+0x63a>
    361a:	88 ec       	ldi	r24, 0xC8	; 200
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	9c 83       	std	Y+4, r25	; 0x04
    3620:	8b 83       	std	Y+3, r24	; 0x03
    3622:	8b 81       	ldd	r24, Y+3	; 0x03
    3624:	9c 81       	ldd	r25, Y+4	; 0x04
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	f1 f7       	brne	.-4      	; 0x3626 <main+0x628>
    362a:	9c 83       	std	Y+4, r25	; 0x04
    362c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    362e:	8d 81       	ldd	r24, Y+5	; 0x05
    3630:	9e 81       	ldd	r25, Y+6	; 0x06
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	9e 83       	std	Y+6, r25	; 0x06
    3636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3638:	8d 81       	ldd	r24, Y+5	; 0x05
    363a:	9e 81       	ldd	r25, Y+6	; 0x06
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	69 f7       	brne	.-38     	; 0x361a <main+0x61c>
    3640:	1d cf       	rjmp	.-454    	; 0x347c <main+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	9a 83       	std	Y+2, r25	; 0x02
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <main+0x664>
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
    366a:	08 cf       	rjmp	.-496    	; 0x347c <main+0x47e>

0000366c <__divmodhi4>:
    366c:	97 fb       	bst	r25, 7
    366e:	09 2e       	mov	r0, r25
    3670:	07 26       	eor	r0, r23
    3672:	0a d0       	rcall	.+20     	; 0x3688 <__divmodhi4_neg1>
    3674:	77 fd       	sbrc	r23, 7
    3676:	04 d0       	rcall	.+8      	; 0x3680 <__divmodhi4_neg2>
    3678:	0c d0       	rcall	.+24     	; 0x3692 <__udivmodhi4>
    367a:	06 d0       	rcall	.+12     	; 0x3688 <__divmodhi4_neg1>
    367c:	00 20       	and	r0, r0
    367e:	1a f4       	brpl	.+6      	; 0x3686 <__divmodhi4_exit>

00003680 <__divmodhi4_neg2>:
    3680:	70 95       	com	r23
    3682:	61 95       	neg	r22
    3684:	7f 4f       	sbci	r23, 0xFF	; 255

00003686 <__divmodhi4_exit>:
    3686:	08 95       	ret

00003688 <__divmodhi4_neg1>:
    3688:	f6 f7       	brtc	.-4      	; 0x3686 <__divmodhi4_exit>
    368a:	90 95       	com	r25
    368c:	81 95       	neg	r24
    368e:	9f 4f       	sbci	r25, 0xFF	; 255
    3690:	08 95       	ret

00003692 <__udivmodhi4>:
    3692:	aa 1b       	sub	r26, r26
    3694:	bb 1b       	sub	r27, r27
    3696:	51 e1       	ldi	r21, 0x11	; 17
    3698:	07 c0       	rjmp	.+14     	; 0x36a8 <__udivmodhi4_ep>

0000369a <__udivmodhi4_loop>:
    369a:	aa 1f       	adc	r26, r26
    369c:	bb 1f       	adc	r27, r27
    369e:	a6 17       	cp	r26, r22
    36a0:	b7 07       	cpc	r27, r23
    36a2:	10 f0       	brcs	.+4      	; 0x36a8 <__udivmodhi4_ep>
    36a4:	a6 1b       	sub	r26, r22
    36a6:	b7 0b       	sbc	r27, r23

000036a8 <__udivmodhi4_ep>:
    36a8:	88 1f       	adc	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	5a 95       	dec	r21
    36ae:	a9 f7       	brne	.-22     	; 0x369a <__udivmodhi4_loop>
    36b0:	80 95       	com	r24
    36b2:	90 95       	com	r25
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	08 95       	ret

000036ba <__prologue_saves__>:
    36ba:	2f 92       	push	r2
    36bc:	3f 92       	push	r3
    36be:	4f 92       	push	r4
    36c0:	5f 92       	push	r5
    36c2:	6f 92       	push	r6
    36c4:	7f 92       	push	r7
    36c6:	8f 92       	push	r8
    36c8:	9f 92       	push	r9
    36ca:	af 92       	push	r10
    36cc:	bf 92       	push	r11
    36ce:	cf 92       	push	r12
    36d0:	df 92       	push	r13
    36d2:	ef 92       	push	r14
    36d4:	ff 92       	push	r15
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	ca 1b       	sub	r28, r26
    36e4:	db 0b       	sbc	r29, r27
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	09 94       	ijmp

000036f2 <__epilogue_restores__>:
    36f2:	2a 88       	ldd	r2, Y+18	; 0x12
    36f4:	39 88       	ldd	r3, Y+17	; 0x11
    36f6:	48 88       	ldd	r4, Y+16	; 0x10
    36f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    36fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    36fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    36fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    3700:	9b 84       	ldd	r9, Y+11	; 0x0b
    3702:	aa 84       	ldd	r10, Y+10	; 0x0a
    3704:	b9 84       	ldd	r11, Y+9	; 0x09
    3706:	c8 84       	ldd	r12, Y+8	; 0x08
    3708:	df 80       	ldd	r13, Y+7	; 0x07
    370a:	ee 80       	ldd	r14, Y+6	; 0x06
    370c:	fd 80       	ldd	r15, Y+5	; 0x05
    370e:	0c 81       	ldd	r16, Y+4	; 0x04
    3710:	1b 81       	ldd	r17, Y+3	; 0x03
    3712:	aa 81       	ldd	r26, Y+2	; 0x02
    3714:	b9 81       	ldd	r27, Y+1	; 0x01
    3716:	ce 0f       	add	r28, r30
    3718:	d1 1d       	adc	r29, r1
    371a:	0f b6       	in	r0, 0x3f	; 63
    371c:	f8 94       	cli
    371e:	de bf       	out	0x3e, r29	; 62
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	cd bf       	out	0x3d, r28	; 61
    3724:	ed 01       	movw	r28, r26
    3726:	08 95       	ret

00003728 <_exit>:
    3728:	f8 94       	cli

0000372a <__stop_program>:
    372a:	ff cf       	rjmp	.-2      	; 0x372a <__stop_program>
